@page "/BillRequisition"
@layout CustomLayout
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IToastService toastService
<div class="card">
    <div class="card-header">
        <h3>Requisition</h3>
    </div>

    <br />
    <EditForm Model="@misc" style="height:20%;margin-left:10px">
        <div style="padding:10px">
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="inputEmail4">Date</label>
                    <input type="text" class="form-control" id="date_1" @bind-value="@require_date" autocomplete="off" style="width:203px;height:28px" placeholder="dd/mm/yy" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="inputEmail4">Employee</label>
                    <InputSelect name="" id="" @bind-Value="@misc.EMPLOYEE" class="form-control">
                        <option value="">--Select Employee--</option>
                        @foreach (var employee in employeeList)
                        {
                            <option value="@employee.EMPLOYEE_NAME">@employee.EMPLOYEE_NAME</option>
                        }
                    </InputSelect>

                </div>
                <div class="form-group col-md-4">
                    <label for="inputPassword4">Subject</label>
                    <InputSelect name="" id="" @bind-Value="@misc.LEDGER_NAME" class="form-control">
                        <option value=""></option>
                        @foreach (var item in ledgerList)
                        {
                            <option value="@item.LEDGER_NAME">@item.LEDGER_NAME</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="inputEmail4">From</label>                    
                    <InputText @bind-Value="@misc.LOCATION_FROM" class="form-control"></InputText>
                </div>
                <div class="form-group col-md-4">
                    <label for="inputPassword4">To</label>                    
                    <InputText @bind-Value="@misc.DESTINATION_TO" class="form-control"></InputText>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-8">
                    <label for="inputAddress">Purpose</label>
                    <InputTextArea @bind-Value="@misc.PURPOSE" cols="30" rows="3" class="form-control"></InputTextArea>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="inputEmail4">Tour By</label>                    
                    <InputText @bind-Value="@misc.TOUR_BY" class="form-control"></InputText>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="inputEmail4">Amount</label>                    
                    <InputNumber @bind-Value="@misc.AMOUNT" class="form-control"></InputNumber>
                </div>
            </div>
        </div>





        <br />
        <div class="row">
            <div class="col-md-2"></div>
            <div class="col-md-7">
                <button type="submit" @onclick="SaveBillReq" class="btn btn-info" style="width:120px;margin-right:10px">@submit</button>
                <button type="button" @onclick="Cancel" class="btn btn-danger" style="width:90px">Cancel</button>


            </div>
        </div>

    </EditForm>


</div>



@code {
    clsMiscBillRequisition misc = new clsMiscBillRequisition();
    List<clsMiscBillRequisition> misclist = new List<clsMiscBillRequisition>();
    List<LedgerModel> ledgerList = new List<LedgerModel>();
    List<EmployeeModel> employeeList = new List<EmployeeModel>();
    string submit = "Save";
    string require_date;
    protected override async Task OnInitializedAsync()
    {
        await GetBillReq();
        await GetLedger();
        employeeList = await Http.GetJsonAsync<List<EmployeeModel>>(Utility.BaseUrl + "api/Employee");
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
        await JSRuntime.InvokeVoidAsync("JsInteropDatepicker");
    }
    private async Task GetLedger()
    {
        ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");
    }
    private async Task GetBillReq()
    {
        misclist = await Http.GetJsonAsync<List<clsMiscBillRequisition>>(Utility.BaseUrl + "api/Setup/GetBrandList");
    }
    public async Task SaveBillReq()
    {
        if (IsValidation_Brand() != true)
        {
            try
            {
                if (submit == "Save")
                {
                    misc.Operation_Type = 1;
                    string d = require_date.Substring(0, 2);
                    string m = require_date.Substring(3,2);
                    string y = require_date.Substring(6, 4);
                    string dt = y + "-" + m + "-" + d;
                    misc.DATE = Utility.GetDateFromStringToDate(require_date); //Convert.ToDateTime(dt);
                    misc.STATUS = "Submitted";
                    var data = await Http.PostJsonAsync<clsMiscBillRequisition>(Utility.BaseUrl + "api/Transection/AddBillReq", misc);
                    toastService.ShowSuccess("Insert Successfully!!!");
                }
                else if (submit == "Update")
                {
                    misc.Operation_Type = 2;
                    var data = await Http.PutJsonAsync<clsMiscBillRequisition>(Utility.BaseUrl + "api/Transection/UpdateBrand", misc);
                    toastService.ShowSuccess("Insert Successfully!!!");
                }
                submit = "Save";
                misc = new clsMiscBillRequisition();
            }
            catch (Exception ex)
            {

            }

        }
        await GetBillReq();
    }
    private bool IsValidation_Brand()
    {
        bool flag = false;
        if (misc.LEDGER_NAME == "" || misc.LEDGER_NAME == null)
        {
            toastService.ShowWarning("Please Select LEDGER_NAME!");
            flag = true;
        }

        return flag;
    }
    private async Task Cancel()
    {
        misc = new clsMiscBillRequisition();
        submit = "Save";
    }
    private async Task EditBrand(int Id)
    {
        submit = "Update";
        misc = new clsMiscBillRequisition();
        //misc.LEDGER_NAME = brandList.Find(x => x.BRAND_ID == Id).BRAND_NAME;
        misc.BILL_REQUISITION_ID = Id;
        misc.Operation_Type = 2;
    }
    private async Task Delete(int Id)
    {

        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
            return;

        await Http.DeleteAsync(Utility.BaseUrl + "api/Setup/DeleteBrand/" + Id);
        await GetBillReq();
    }

}
