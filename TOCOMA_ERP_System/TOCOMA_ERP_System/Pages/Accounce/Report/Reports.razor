@page "/Reports"
@layout CustomLayout
@inject HttpClient Http
@inject Microsoft.JSInterop.IJSRuntime JsRuntime;
<style>
    .report-section {
        margin-bottom: 20px;
        max-width: 250px;
        display: block;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -15px;
        margin-left: -15px;
    }

    text-regular, h3, h4 {
        font-weight: 400
    }

    h4, .h4 {
        font-size: 1.3rem;
    }

    svg {
        vertical-align: baseline;
    }

        svg.icon {
            height: 16px;
            width: 16px;
            fill: currentColor;
        }
</style>
<div class="row">
    <div class="col-lg-4">
        <div class="report-section">
            <h4><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 512 512" xml:space="preserve" class="icon lpanel"><path d="M480 195.3H143.9c-8.7 0-15.8 7.1-15.8 15.8l-.1.5c0 8.7 7.1 15.8 15.8 15.8H455c11.3 0 19 11.4 14.8 21.9l-51.2 128c-2.4 6.1-8.3 10.1-14.9 10.1H112c-8.8 0-16-7.2-16-16v-176c0-17.7-14.3-32-32-32H15.8c-8.7 0-15.8 7.1-15.8 15.8v.3c0 8.7 7.1 15.8 15.8 15.8H48c8.8 0 16 7.2 16 16v176c0 17.7 14.3 32 32 32h322.5c13.2 0 25.1-8.2 29.9-20.5l61.4-160c8-21-7.4-43.5-29.8-43.5z"></path><circle cx="141.9" cy="472.3" r="38.7"></circle><circle cx="356.5" cy="472.3" r="38.7"></circle><path d="M143.8 355.3h224.4c8.7 0 15.8-7.1 15.8-15.8v-.3c0-8.7-7.1-15.8-15.8-15.8H143.8c-8.7 0-15.8 7.1-15.8 15.8v.3c0 8.7 7.1 15.8 15.8 15.8zM144 291.3h256.2c8.7 0 15.8-7.1 15.8-15.8v-.3c0-8.7-7.1-15.8-15.8-15.8H144c-8.7 0-15.8 7.1-15.8 15.8v.3c0 8.7 7.1 15.8 15.8 15.8z"></path></svg> Sales</h4>
        </div>
        <div class="nav flex-column">
            <div class="nav-item">
                <a href="CustomerAccount">Customer Account</a>
            </div>
            <div class="nav-item">
                <a href="CustomerAccount">A</a>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <div class="report-section">
            <h4><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 512 512" xml:space="preserve" class="icon lpanel"><path d="M320 192h32v32h-32zM160 192h32v32h-32z"></path><path d="M416 128h-62.4V96.6c0-30.6-8.6-54.8-25.6-71.9-17.1-17.1-41.1-25.8-71.6-25.8s-54.6 8.7-71.6 25.8-25.6 41.3-25.6 71.9V128H96c-17.7 0-32 14.3-32 32v320c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32zM191.2 96.6c0-21.8 5.5-38.4 16.3-49.3s27.3-16.4 48.9-16.4c21.7 0 38.1 5.5 48.9 16.4s16.3 27.5 16.3 49.3V128H191.2V96.6zM416 480H96V160h320v320z"></path></svg> Purchases </h4>
        </div>
        <div class="nav flex-column">
            <div class="nav-item">
                <a href="CustomerAccount">Supplier Payable</a>
            </div>
            <div class="nav-item">
                <a href="CustomerAccount">C</a>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <div class="report-section">
            <h4><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 512 512" xml:space="preserve" class="icon lpanel"><path d="M480 480V264c0-4.4-3.6-8-8-8h-16c-4.4 0-8-3.6-8-8v-16c0-4.4-3.6-8-8-8H328c-4.4 0-8 3.6-8 8v16c0 4.4-3.6 8-8 8h-16c-4.4 0-8 3.6-8 8v216h-32V72c0-4.4-3.6-8-8-8h-16c-4.4 0-8-3.6-8-8V40c0-4.4-3.6-8-8-8h-24V0H96v32H72c-4.4 0-8 3.6-8 8v16c0 4.4-3.6 8-8 8H40c-4.4 0-8 3.6-8 8v408H0v32h512v-32h-32zM64 96h64v64H64V96zm0 96h64v64H64v-64zm0 96h64v64H64v-64zm128 192H96v-96h96v96zm32-128h-64v-64h64v64zm0-96h-64v-64h64v64zm0-96h-64V96h64v64zm96 128h64v32h-64v-32zm0 64h64v32h-64v-32zm96 128h-64v-64h64v64zm32-96h-32v-32h32v32zm0-64h-32v-32h32v32z"></path></svg> Account</h4>
        </div>
        <div class="nav flex-column">
            <div class="nav-item" style="padding:10px">
                @*<a href="CustomerAccount">Balance Sheet</a>*@
                <a data-toggle="modal" data-backdrop="static" data-keyboard="false" href="" data-target="._bd-example-modal-lg_gl">General Ledger</a>
            </div>
            <div class="nav-item" style="padding:10px">
                @*<a href="CustomerAccount">Trial Balance</a>*@
                <a data-toggle="modal" data-backdrop="static" data-keyboard="false" href="" data-target="._bd-example-modal-lg" @onclick=@(() => ReportTypeClick(1))>Trial Balance</a>
            </div>
            <div class="nav-item" style="padding:10px">
                @*<a href="CustomerAccount">Profit And Loss</a>*@
                <a data-toggle="modal" data-backdrop="static" data-keyboard="false" href="" data-target="._bd-example-modal-lg" @onclick=@(() => ReportTypeClick(3))>Profit & Loss</a>
            </div>
            <div class="nav-item" style="padding:10px">
                <a>Cash Flow Statement</a>
            </div>
            <div class="nav-item" style="padding:10px">
                @*<a href="CustomerAccount">Balance Sheet</a>*@
                <a data-toggle="modal" data-backdrop="static" data-keyboard="false" href="" data-target="._bd-example-modal-lg" @onclick=@(() => ReportTypeClick(2))>Balance Sheet</a>
            </div>

        </div>
    </div>



</div>


<div class="modal fade _bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h4 class="p-2"><span class="text-uppercase">@ReportType</span>  </h4>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="form-group row">
                    <label for="colFormLabel" class="col-sm-2 col-form-label">Date From </label>
                    <div class="col-sm-4">
                        <input type="date" value="@currentDate" @onchange="GetFromDate" />

                    </div>
                </div>
                <div class="form-group row">
                    <label for="colFormLabel" class="col-sm-2 col-form-label">To</label>
                    <div class="col-sm-4">
                        <input type="date" value="@currentDate" @onchange="GetToDate" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div>
                    <button type="submit" style="width:100px;margin-right:10px" class="btn btn-info" @onclick=@(() => GetTrialBalance(ReportType))>Report</button>
                    <button type="button" class="btn btn-danger" style="width:70px" data-dismiss="modal">Close</button>

                </div>
            </div>

        </div>
    </div>
</div>

  <!--------General Ledger Report Modal------>

<div class="modal fade _bd-example-modal-lg_gl" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h4 class="p-2"><span class="text-uppercase">General Ledger</span>  </h4>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label>From</label>
                        <input type="date" value="@currentDate" @onchange="GetFromDate" />
                    </div>
                    <div class="form-group col-md-6">
                        <label>To</label>
                        <input type="date" value="@currentDate" @onchange="GetToDate" />
                    </div>

                </div>
                <div class="form-group">
                    <label>Ledger</label>
                    <select @onchange="selectedledger" class="form-control">
                        <option></option>
                        @foreach (var item in ledgerList)
                        {
                            <option value="@item.LEDGER_NAME">@item.LEDGER_NAME</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <div>
                    <button type="submit" style="width:100px;margin-right:10px" class="btn btn-info" @onclick=@(() => GetGeneralLedger())>Report</button>
                    <button type="button" class="btn btn-danger" style="width:70px" data-dismiss="modal">Close</button>

                </div>
            </div>

        </div>
    </div>
</div>



@code {
    string fromdate;
    string todate;
    string currentDate;
    string ReportType;
    IJSObjectReference module;
    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    private IJSObjectReference _jsModule;
    List<ACC_Trial_Balance_Report> trialBalanceReport = new List<ACC_Trial_Balance_Report>();
    List<ACC_PROFIT_LOSS> profitAndLossReport = new List<ACC_PROFIT_LOSS>();
    List<ACC_Balance_Sheet_Report> balanceSheetReport = new List<ACC_Balance_Sheet_Report>();
    List<ACC_General_Ledger_Report> generalLedgerReport = new List<ACC_General_Ledger_Report>();
    LedgerModel ledger = new LedgerModel();
    string SelectedString = "";
    List<LedgerModel> ledgerList = new List<LedgerModel>();
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();        
        ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");        
        currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("JsInteropcollaps");
            currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');

        }

    }
    private async void GetFromDate(ChangeEventArgs change)
    {
        fromdate = change.Value.ToString();
        //accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(date);
    }
    private async void GetToDate(ChangeEventArgs change)
    {
        todate = change.Value.ToString();
        //accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(date);
    }
    public async Task GetGeneralLedger()
    {
        if (fromdate == null)
        { fromdate = currentDate; }
        if (todate == null)
        { todate = currentDate; }
        generalLedgerReport = new List<ACC_General_Ledger_Report>();

        generalLedgerReport = await Http.GetJsonAsync<List<ACC_General_Ledger_Report>>(Utility.BaseUrl + "api/Transection/GetGeneralLedger/" + fromdate + "/" + todate + "/" + SelectedString);
        ledger = await Http.GetJsonAsync<LedgerModel>(Utility.BaseUrl + "api/Transection/GetLedgerDataByLedgerName/" + SelectedString);
        SessionData.From_date = fromdate;
        SessionData.To_date = todate;
        SessionData.generalLedgerList = generalLedgerReport;
        SessionData.sessionLedgerModel = ledger;
        await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetGeneralLedgerReport", "_blank");
    }
    void selectedledger(ChangeEventArgs e)
    {
        SelectedString = e.Value.ToString();
    }
    private void ReportTypeClick(int Type)
    {
        if (Type == 1)
        { ReportType = "Trial Balance"; }
        else if (Type == 2)
        { ReportType = "Balance Sheet"; }
        else if (Type == 3)
        { ReportType = "Profit & Loss"; }
    }
    public async Task GetTrialBalance(string Type)
    {

        ////int type = 4;
        //string REFNO = "1234";

        //int tpe = 1;
        if (fromdate == null)
        { fromdate = currentDate; }
        if (todate == null)
        { todate = currentDate; }
        try
        {
            if (ReportType == "Trial Balance")
            {
                //trialBalanceReport = new List<ACC_Trial_Balance_Report>();
                //string url = Utility.BaseUrl + "api/Transection/GetTrialBalanceInfo/" + fromdate+"/"+ todate;
                //string url = Utility.BaseUrl + "api/Transection/GetTrialBalanceInfo/" + "20220801" + "/" + "20220911";
                //string url = Utility.BaseUrl + "api/Transection/GetTrialBalanceInfo";
                trialBalanceReport = new List<ACC_Trial_Balance_Report>();

                trialBalanceReport = await Http.GetJsonAsync<List<ACC_Trial_Balance_Report>>(Utility.BaseUrl + "api/Transection/Get_ACC_TrialBalanceInfo/" + fromdate + "/" + todate);
                //trialBalanceReport = await Http.GetJsonAsync<List<ACC_Trial_Balance_Report>>(url);
                SessionData.From_date = fromdate;
                SessionData.To_date = todate;
                SessionData.trialBalanceList = trialBalanceReport;
                await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetTrialBalanceReport", "_blank");
            }
            else if (ReportType == "Balance Sheet")
            {
                //await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetBalanceSheetReport/" + REFNO + "/" + tpe, "_blank");
                balanceSheetReport = new List<ACC_Balance_Sheet_Report>();
                balanceSheetReport = await Http.GetJsonAsync<List<ACC_Balance_Sheet_Report>>(Utility.BaseUrl + "api/Transection/GetBalanceSheet/" + fromdate + "/" + todate);
                SessionData.From_date = fromdate;
                SessionData.To_date = todate;
                SessionData.balanceSheetList = balanceSheetReport;
                await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetBalanceSheetReport", "_blank");
            }
            else if (ReportType == "Profit & Loss")
            {

                //await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetProfitLossReport/" + REFNO + "/" + tpe, "_blank");
                profitAndLossReport = new List<ACC_PROFIT_LOSS>();
                profitAndLossReport = await Http.GetJsonAsync<List<ACC_PROFIT_LOSS>>(Utility.BaseUrl + "api/Transection/GetProfitAndLoss/" + fromdate + "/" + todate);
                //decimal income = profitAndLossReport.Sum(x => Convert.ToDecimal(x.));
                decimal income = profitAndLossReport.Where(p => p.GR_PRIMARY_TYPE == "Income" && p.GR_NAME != "Total Income").Sum(p => Convert.ToDecimal(p.GR_AMOUNT));
                decimal expense = profitAndLossReport.Where(p => p.GR_PRIMARY_TYPE == "Expenses" && p.GR_NAME != "Total Expense").Sum(p => Convert.ToDecimal(p.GR_AMOUNT));
                decimal TotalProfitLoss = income - expense;
                SessionData.TotalProfitLoss = TotalProfitLoss;
                SessionData.From_date = fromdate;
                SessionData.To_date = todate;
                SessionData.profitAndLossList = profitAndLossReport;
                await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetProfitLossReport", "_blank");
            }
        }
        catch (Exception EX)
        {

        }


    }
}
