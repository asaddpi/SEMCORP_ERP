@page "/NewPurchaseOrder"
@layout CustomLayout
@using System.Data
@using System.IO
@inject HttpClient Http
@using System.Collections.Generic;
@using System.Data;
@using System.Reflection;
@*@inject IHostingEnvironment _host*@
@inject IToastService toastService
@inject IJSRuntime JSRuntime
@inject Microsoft.JSInterop.IJSRuntime JsRuntime

<style>
    tbody tr td {
        /*border: none;*/
    }

    text {
        border: none;
        background-color: transparent;
        resize: none;
        outline: none;
    }

    table {
        border-collapse: collapse;
        margin: auto;
        /*background-color: #A4A4A4;*/
        /*border: 2px solid black;*/
        padding: 0;
    }

        table td {
            position: relative;
            text-align: center;
            /*border: 2px solid green;*/
            padding: 0;
            margin: 0;
        }
    /*tr td:hover {
        background-color: #ffff99;
    }*/
    /*hovertable :hover {
        background-color: #ffff99;
    }*/
    tbody tr td:hover {
        background-color: #ffff99;
    }

    div.autocom {
        width: 400px;
    }

    div section {
        height: 30px;
        width: 100%;
        padding-top: 5px;
        padding-left: 5px;
    }

        div section:hover {
            background-color: lightseagreen;
            cursor: pointer;
        }
</style>
<div class="container-fluid">
    @*<EditForm Model="@ledger">*@
    <div class="card">
        <div class="card-header"><h4>New Purchase Order</h4></div>
        <div class="testbox">
            <div class="form">

                <div class="row">
                    <div class="col-25">
                        <label>Purchase Date:</label>
                    </div>
                    <div class="col-75">
                        <input type="date" id="today" value="@currentDate" format-value="dd-MM-yyyy" style="width:200px" @onchange="GetDate">
                    </div>
                </div>
                <div class="row">
                    <div class="col-25">
                        <label for="fname">Supplier:</label>
                    </div>
                    <div class="col-75" style="display: inline-block;">
                        <input type="search" @bind="searchVendor" @oninput="GetvendorList" @onclick="OnClickVendorList" class="form-control" />
                        <div class="autocom">
                            @if (options1 != null)
                            {
                                @foreach (var item in options1)
                                {
                                    if (searchVendor == "")
                                    {
                                        <section @onclick=@(() => Selectedvendor(item))>@item</section>
                                    }
                                    if (item.ToUpper().Contains(searchVendor.ToUpper()) && searchVendor.Length > 1)
                                    {
                                        if (searchVendor != "")
                                        {
                                            vendor_name = item;
                                            <section @onclick=@(() => Selectedvendor(item))>@item</section>
                                        }
                                        else
                                        { <section></section>}



                                    }
                                    @*}*@

                                }

                            }

                        </div>
                        @*<input type="search" @bind="searchVendor" @oninput="GetvendorList" @onclick="OnClickVendorList" class="form-control" />
                <div class="autocom">
                    @if (options1 != null)
                    {
                        @foreach (var item in options1)
                        {

                            if (item.ToUpper().Contains(searchVendor.ToUpper()) && searchVendor.Length > 1)
                            {
                                if (searchVendor != "")
                                {
                                    vendor_name = item;
                                    <section @onclick=@(() => EditItem(item))>@item</section>
                                }
                                else
                                { <section></section>}
                            }
                            else
                            {
                                <section style="width:100%" @onclick=@(() => EditItem(item))>@item</section>
                            }
                        }

                    }

                </div>*@
                    </div>


                </div>

                <div class="row">
                    <div class="col-25">
                        <label for="fname">Delivery Address:</label>
                    </div>
                    <div class="col-75" style="display: inline-block;">
                        <input type="text" @bind="@deliveryAddress" class="form-control" />
                    </div>


                </div>
                <div class="row">
                    <div class="col-25">
                        <label for="fname">Delivery Mode:</label>
                    </div>
                    <div class="col-75" style="display: inline-block;">
                        <input type="text" @bind="@deliveryMode" class="form-control" />
                    </div>


                </div>
                <div class="row">
                    <div class="col-25">
                        <label for="fname">Delivery Time:</label>
                    </div>
                    <div class="col-75" style="display: inline-block;">
                        <input type="text" @bind="@deliveryTime" class="form-control" />
                    </div>


                </div>

                <div class="row">
                    <div class="col-25">
                        <label for="fname">Terms & Conditions:</label>
                    </div>
                    <div class="col-75" style="display: inline-block">
                        <BlazoredTextEditor @ref="@terms_Condition">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>


                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>

                </div>
                <br />
                <br />
                <br />



                <div class="form-row">
                    <div class="form-group col-md-3">
                        <label for="inputCity">Item</label>
                        <input type="search" @bind="searchitem" @ref="itmInput" @oninput="GetItemList" @onclick="OnClickItemList" class="form-control" />
                        <div class="autocom">
                            @if (itemnameList != null)
                            {
                                @foreach (var item in itemnameList)
                                {
                                    if (searchitem == "")
                                    {
                                        <section @onclick=@(() => SelectedItm(item))>@item</section>
                                    }
                                    if (item.ToUpper().Contains(searchitem.ToUpper()) && searchitem.Length > 1)
                                    {
                                        if (searchitem != "")
                                        {
                                            itemName = item;
                                            <section @onclick=@(() => SelectedItm(item)) style="width:84%">@item</section>
                                        }
                                        else
                                        { <section></section>}
                                    }
                                }
                            }

                        </div>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="inputState">Unit</label>
                        <EditForm Model="@itemEntity">
                            <InputSelect @bind-Value="@itemEntity.UNIT_ID" class="form-control">
                                <option>--Unit--</option>
                                @foreach (var item in unitList)
                                {
                                    <option value="@item.UNIT_ID">@item.UNIT_NAME</option>
                                }

                            </InputSelect>
                        </EditForm>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="inputZip">Qty</label>
                        <input type="number" class="form-control" @bind-value="Q" @oninput="QtyClicked" @onkeyup="QtyEnter" @ref="QtyInput" />
                    </div>
                    <div class="form-group col-md-2">
                        <label for="inputZip">Rate</label>
                        <input type="number" class="form-control" @bind-value="R" @oninput="rateClicked" @ref="RateInput" />
                    </div>
                    <div class="form-group col-md-2">
                        <label for="inputZip">Total</label>
                        <input class="form-control" @bind-value="totalAmount" @bind-value:event="oninput" disabled="@isCrDisable" />
                    </div>
                    @*<div class="form-group col-md-1">
                <button for="inputZip" style="width:10px">>></button>
            </div>*@

                </div>

                <br />
                <button class="btn btn-primary" @onclick="AddClicked" style="width:100px;padding-bottom:10px">Add</button>
                <br />
                <br />

                <table width="100%" style="padding-top:10px">
                    <thead>
                        <tr>
                            <td colspan="2" style="width:45%">Item Name</td>
                            <td style="width:10%">Unit</td>
                            <td style="width:10%">QTY.</td>
                            <td style="width:10%">Rate</td>
                            <td style="width:15%">Total</td>
                            <td colspan="2" style="width:10%"></td>
                            @*<td style="width:5%"></td>*@
                        </tr>
                    </thead>
                    <tbody>

                        @*@if (visibletext != 1)
                {*@
                        <!--<tr>-->
                        @*<td style="width:10%;margin-top:10px"><input type="text" @onkeypress="@Keypress" value="@MyProperty" @ref="myref" /></td>*@
                        <!--<td colspan="2">-->
                        @*<input type="text" class="form-control" data-toggle="modal" data-target=".bd-example-modal-lg" @oninput="ItemNameClicked" value="@itemName" @ref="myref" />*@
                        <!--<input type="search" @bind="searchitem" @bind:event="oninput" class="form-control" />
                    <div class="autocom">
                        @if (itemnameList != null)
                        {
                            @foreach (var item in itemnameList)
                            {
                                if (item.ToUpper().Contains(searchitem.ToUpper()) && searchitem.Length > 1)
                                {
                                    if (searchitem != "")
                                    {
                                        vendor_name = item;
                                        <section @onclick=@(() => SelectedItm(item))>@item</section>
                                    }
                                    else
                                    { <section></section>}



                                }


                            }

                        }

                    </div>
                    @if (bankStatus == 1)
                    {
                        <table width="100%">
                            <tr>
                                <td><input class="form-control" type="text" @bind-value="@chequeNo" placeholder="chaque no." /></td>
                                <td><input class="form-control" type="date" @onchange="GetChequeDate"></td>
                                <td><input class="form-control" type="text" placeholder="drawn on" @bind-value="@drawnon" /></td>
                            </tr>
                        </table>
                    }

                </td>
                <td>
                    <EditForm Model="@itemdetails">
                        <InputSelect @bind-Value="@unitId" class="form-control">
                            <option>--Unit--</option>
                            @foreach (var item in unitList)
                                {
                                <option value="@item.UNIT_ID">@item.UNIT_NAME</option>
                                }

                        </InputSelect>
                    </EditForm>



                </td>
                <td><input class="form-control" @bind-value="Qty" @bind-value:event="oninput" @onkeyup="DoTheThing" style="margin-top:10px" /></td>
                <td><input class="form-control" @bind-value="Rate" @oninput="rateClicked" @onkeyup="DoTheThing" style="margin-top:10px" /></td>
                <td><input class="form-control" @bind-value="totalAmount" @bind-value:event="oninput" @onkeyup="DoTheThing" style="margin-top:10px" disabled="@isCrDisable" /></td>
                <td></td>
            </tr>-->
                        @*}*@
                        @foreach (var item in voucherItemList)
                        {
                            <tr style="font-size: 14px; height:34px">
                                <td colspan="2" style="width:45%">@item.ITEM_NAME</td>
                                <td style="width:10%">@item.UOM</td>
                                <td style="width:10%">@item.QUANTITY</td>
                                <td style="width:10%">@item.UNIT_PRICE</td>
                                <td style="width:15%">@item.TOTAL_AMOUNT</td>
                                <td><a @onclick=@(() => EditClick(item.PO_DETAILS_ID))><span class="oi oi-pencil"></span></a></td>
                                <td><a @onclick=@(() => DeleteItem(item.ITEM_NAME))><span class="oi oi-delete"></span></a></td>
                            </tr>
                        }
                    </tbody>
                    <tr>
                        <td colspan="5" style="text-align:right">Sub-Total</td>
                        <td><input type="text" @bind-value="@subTotal" /></td>
                        @*<td rowspan="4"></td>*@
                    </tr>
                    <tr>
                        <td colspan="4" style="text-align:right">TAX(%)</td>
                        <td><input type="text" placeholder="%" @oninput="TaxClick" /></td>
                        <td><input type="text" @bind-value="@taxAmount" /></td>
                        @*<td rowspan="4"></td>*@
                    </tr>
                    <tr>
                        <td colspan="4" style="text-align:right">VAT(%)</td>
                        <td><input type="text" placeholder="%" @oninput="VATClick" /></td>
                        <td><input type="text" @bind-value="@vatAmount" /></td>
                        @*<td rowspan="4"></td>*@
                    </tr>
                    <tr>
                        <td colspan="4" style="text-align:right">Discount(%)</td>
                        <td><input type="text" placeholder="%" @oninput="DiscountClick" /></td>
                        <td><input type="text" @bind-value="@discountAmount" @oninput="Discount_Taka_Click" /></td>
                        @*<td rowspan="4"></td>*@
                    </tr>

                    @*<div class="form-group row">
                <label for="inputEmail3" class="col-sm-8 col-form-label"></label>
                <label for="inputEmail3" class="col-sm-1 col-form-label">TAX(%)</label>
                <div class="col-sm-1">
                    <input type="number" id="inputEmail3" placeholder="%" autocomplete="off" style="text-align:right" @oninput="TaxClick">
                </div>
                <div class="col-sm-2">
                    <input type="text" id="inputEmail3" style="text-align:right" @bind="@taxAmount">
                </div>
            </div>*@
                    <!--<tr>
            <td colspan="5" style="text-align:right">Transport cost</td>
            <td><input type="text" @oninput="TransportClicked" @bind-value="@transport_cost" /></td>-->
                    @*<td rowspan="4"></td>*@
                    <!--</tr>
        <tr>
            <td colspan="5" style="text-align:right">Labour Cost</td>
            <td><input type="text" @oninput="LabourClicked" @bind-value="@labour_cost" /></td>
        </tr>
        <tr>
            <td colspan="5" style="text-align:right">Others</td>
            <td><input type="text" @oninput="OthersClicked" @bind-value="@others_cost" /></td>
        </tr>-->
                    <tr>
                        <td colspan="5" style="text-align:right"><b>Grand Total</b></td>
                        <td><input type="text" @bind-value="@GrandTotal" /></td>
                    </tr>
                </table>
            </div>


        </div>
        <div class="btn-block">
            <button type="button" style="width:90px" class="btn btn-danger" >Cancel</button>
            <button type="submit" style="width:120px;margin-left:10px;background-color:black;color:white" @onclick="@SavePaymentVoucher">@btnText</button>

        </div>
    </div>
    @*</EditForm>*@
</div>


@*--------Midal-ItemList----------*@
<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="p-2"><img src="images/fountain-pen.png" alt="" width="50" height="50" class="mr-3"><span class="text-uppercase">Item List</span>  </h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <table class="table-hover">
                    <tbody>

                        @foreach (var item in itemNameList)
                        {
                            <tr>
                                <td style="text-align: left; cursor: pointer" class="form-control" @onclick=@(() => SelectItem(item.ITEM_NAME)) data-dismiss="modal">@item.ITEM_NAME</td>
                                <td style="width:25px">@item.UOM</td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>

        </div>
    </div>
</div>
@*--------Midal-Supplier----------*@
<div class="modal fade bd-example-modal-lgvendor" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="p-2"><span class="text-uppercase">Supplier List</span>  </h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table>
                    <tbody>
                        @foreach (var item in vendorList)
                        {
                            <tr>
                                <td style="text-align:left;cursor:pointer" class="form-control hovertable" @onclick=@(() => SelectSupplierItem(item.VENDOR_NAME)) data-dismiss="modal">@item.VENDOR_NAME</td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>

        </div>
    </div>
</div>
@code {
    PurchaseOrderModel porderModel = new PurchaseOrderModel();
    List<VendorEntity> vendorList = new List<VendorEntity>();
    List<UnitModel> unitList = new List<UnitModel>();
    UnitModel unit = new UnitModel();
    string vendor_name;
    LedgerModel ledger = new LedgerModel();
    List<ItemEntity> itemNameList = new List<ItemEntity>();
    List<BranchModel> branchList = new List<BranchModel>();
    string MyProperty;
    List<string> itemList = new List<string>();
    List<CountryModel> countryList = new List<CountryModel>();
    private PurchaseOrderDetailsEntity SelectedArticle;
    private VendorEntity SelectedVendor;
    List<VendorEntity> options;
    private string newTodo;
    List<PurchaseOrderDetailsEntity> voucherItemList = new List<PurchaseOrderDetailsEntity>();
    PurchaseOrderDetailsEntity itemdetails = new PurchaseOrderDetailsEntity();
    ItemEntity itemEntity = new ItemEntity();
    VoucherItem paymentvoucher = new VoucherItem();
    ACC_COMPANY_VOUCHER_MODEL accCompanyVoucherModel = new ACC_COMPANY_VOUCHER_MODEL();
    List<PurchaseOrderDetailsEntity> paymentVoucherDetails = new List<PurchaseOrderDetailsEntity>();
    ACC_VOUCHER_MODEL voucherDetails = new ACC_VOUCHER_MODEL();
    List<PurchaseOrderViewModel> purchaseviewList = new List<PurchaseOrderViewModel>();
    List<PurchaseOrderDetailsEntity> purchaseviewListByVoucherNo = new List<PurchaseOrderDetailsEntity>();
    ACC_VOUCHER_ITEM_MODEL accVoucherItem = new ACC_VOUCHER_ITEM_MODEL();
    List<ACC_VOUCHER_ITEM_MODEL> accVoucherItemList = new List<ACC_VOUCHER_ITEM_MODEL>();
    BlazoredTextEditor terms_Condition;
    string voucherNo;
    decimal taxRate;
    decimal taxAmount;
    decimal vatAmount;
    decimal vatRate;
    double otherCost;
    decimal discountRate;
    decimal discountAmount;
    BlazoredTextEditor shortDescription;
    decimal amount;
    string KeyPressed = "";
    public string Value { get; set; }
    public string MyDrValue { get; set; }
    public string MyCrValue { get; set; }
    string btnText;

    double Qty { get; set; }
    decimal Rate { get; set; }
    string R;
    string Q;
    public decimal totalAmount { get; set; }

    private ElementReference myref;
    private ElementReference myDr_ref;
    private ElementReference myCr_ref;
    private ElementReference narrationref;
    ElementReference itmInput;
    ElementReference voucherInput;
    ElementReference QtyInput;
    ElementReference RateInput;
    ElementReference sdInput;
    private bool isDrDisable { get; set; }
    private bool isCrDisable { get; set; }
    decimal totalDebit;
    decimal totalCredit;
    int visibletext;
    string BranchName;
    string voucherDate;
    string narration;
    int bankStatus = 0;
    List<string> templates = new List<string>() { "Maui", "Hawaii", "Niihau", "Kauai", "Kahoolawe" };
    string SelectedString = "Maui";
    string parent;
    string chequeNo;
    string drawnon;
    string voucherChequedate = "";
    string currentDate;
    string selected_date;
    string itemName;
    string supplierName;
    decimal GrandTotal;
    decimal subTotal;
    decimal transport_cost;
    decimal labour_cost;
    decimal others_cost;
    string unitName;
    int unitId;
    int rowId;
    string deliveryAddress;
    string deliveryMode;
    string deliveryTime;
    //-----

    List<VendorEntity>? customers;
    string? selectedCustomerId;
    string? selectedCustomerName;
    string? filter;
    int flag = 0;

    public string searchVendor { get; set; } = "";
    public string searchVoucher { get; set; } = "";
    public string searchitem { get; set; } = "";

    List<string> options1;
    List<string> options2;
    List<string> itemnameList;
    List<string> voucherList;

    protected override async Task OnInitializedAsync()
    {
        MyProperty = "Dr";
        btnText = "Save";
        onDisable(MyProperty);
        accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 1);
        //await GetCountry();
        await GetLedger();
        await GetBranch();
        itemNameList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product/GetProjectItem");
        unitList = await Http.GetJsonAsync<List<UnitModel>>(Utility.BaseUrl + "api/Setup/GetUnit");
        vendorList = await Http.GetJsonAsync<List<VendorEntity>>(Utility.BaseUrl + "api/Vendor");
        purchaseviewList = await Http.GetJsonAsync<List<PurchaseOrderViewModel>>(Utility.BaseUrl + "api/Purchase/GetPurchaseItem");
        currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');
        //currentDate = System.DateTime.Now.Day.ToString().PadLeft(2, '0')+"/"+ (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + System.DateTime.Now.Year ;
        //options1 = vendorList.Select(f => f.VENDOR_NAME).Distinct().ToList();
        options2 = purchaseviewList.Select(f => f.VOUCHER_NO).Distinct().ToList();
        //itemnameList = itemNameList.Select(f => f.ITEM_NAME).Distinct().ToList();
        voucherList = purchaseviewList.Select(f => f.VOUCHER_NO).Distinct().ToList();

        StateHasChanged();

    }
    private async Task GetItemList(ChangeEventArgs change)
    {
        searchitem = change.Value.ToString();
        itemnameList = itemNameList.Select(f => f.ITEM_NAME).Distinct().ToList();
    }
    private async Task GetvendorList(ChangeEventArgs change)
    {
        searchVendor = change.Value.ToString();
        options1 = vendorList.Select(f => f.VENDOR_NAME).Distinct().ToList();
    }
    private async Task OnClickVendorList()
    {
        options1 = vendorList.Select(f => f.VENDOR_NAME).Distinct().ToList();// deliveryNoteList.Select(f => f.).Distinct().ToList();

    }
    private async Task OnClickItemList()
    {
        itemnameList = itemNameList.Select(f => f.ITEM_NAME).Distinct().ToList();

    }
    private async Task GetvoucherList(ChangeEventArgs change)
    {
        searchVoucher = change.Value.ToString();
        voucherList = purchaseviewList.Select(f => f.VOUCHER_NO).Distinct().ToList();
    }
    public async Task Selectedvendor(string ff)
    {
        searchVendor = ff;
        //supplierName = searchVendor;
        //vendor_name = null;
        if(searchVendor!="" && searchVendor!=null)
        {
            int vendorId = vendorList.Find(x => x.VENDOR_NAME == searchVendor).VENDOR_ID;
            porderModel.VENDOR_ID = vendorId;
        }

        options1 = new List<string>();

        ////searchVendor = ff;
        //searchVendor = ff;
        ////
        ////vendor_name = null;
        //options1 = new List<string>();
        //StateHasChanged();
        StateHasChanged();
    }
    public async Task SelectedVoucher(string ff)
    {
        btnText = "Update";
        searchVoucher = ff;
        voucherList = new List<string>();
        options1 = new List<string>();
        purchaseviewListByVoucherNo = await Http.GetJsonAsync<List<PurchaseOrderDetailsEntity>>(Utility.BaseUrl + "api/Purchase/GetPurchaseListForProjectByVoucherNo/" + searchVoucher);
        voucherItemList = purchaseviewListByVoucherNo;
        transport_cost = Convert.ToDecimal(purchaseviewListByVoucherNo.FirstOrDefault().CARRING_WAY_COST);
        labour_cost = Convert.ToDecimal(purchaseviewListByVoucherNo.FirstOrDefault().LABOUR_COST);
        others_cost = Convert.ToDecimal(purchaseviewListByVoucherNo.FirstOrDefault().OTHERS_COST);
        searchVendor = (purchaseviewListByVoucherNo.FirstOrDefault().VENDOR_NAME);
        currentDate = (purchaseviewListByVoucherNo.FirstOrDefault().PO_DATE);
        string d = currentDate.Substring(0, 2);
        string m = currentDate.Substring(3, 2);
        string y = currentDate.Substring(6, 4);
        porderModel.PO_ID = purchaseviewListByVoucherNo.FirstOrDefault().PO_ID;
        //currentDate = Convert.ToDateTime(currentDate).Year + "-" + (Convert.ToDateTime(currentDate).Month).ToString().PadLeft(2, '0') + "-" + (Convert.ToDateTime(currentDate).Day).ToString().PadLeft(2, '0');
        DateTime dd = Convert.ToDateTime(y + "-" + m + "-" + d);
        currentDate = y + "-" + m + "-" + d;
        //string d= Convert.ToDateTime(currentDate).Year.ToString().PadLeft(2, '0') + "-" + Convert.ToDateTime(currentDate).Month.ToString().PadLeft(2, '0') + "-" + Convert.ToDateTime(currentDate).Day;
        GetTotal();
        StateHasChanged();
    }
    public async Task SelectedItm(string param_itm)
    {
        itemName = param_itm;
        searchitem = param_itm;
        itemEntity.UNIT_ID = itemNameList.Find(x => x.ITEM_NAME == searchitem).UNIT_ID;
        unitName = itemNameList.Find(x => x.ITEM_NAME == searchitem).UOM;
        itemEntity.UOM = unitName;
        itemEntity.UNIT_ID = itemEntity.UNIT_ID;
        itemnameList = new List<string>();
        await QtyInput.FocusAsync();
        StateHasChanged();
    }
    async Task HandleInput(ChangeEventArgs e)
    {
        filter = e.Value?.ToString();
        if (filter?.Length > 2)
        {
            customers = await Http.GetJsonAsync<List<VendorEntity>>(Utility.BaseUrl + "api/Vendor/GetVendorDetailsByVendorCode/" + filter);
        }
        else
        {
            customers = null;
            selectedCustomerName = selectedCustomerId = null;
        }
    }

    void SelectCustomer(string id)
    {
        selectedCustomerId = id;
        selectedCustomerName = customers!.First(c => c.VENDOR_ID.Equals(selectedCustomerId)).VENDOR_NAME;
        customers = null;
    }
    async void selectedledger(ChangeEventArgs e)
    {
        SelectedString = e.Value.ToString();
        if (SelectedString == "Bank Accounts") { bankStatus = 1; }
        else { bankStatus = 0; }
        if (MyProperty == "Dr")
        { await myDr_ref.FocusAsync(); }
        else if (MyProperty == "Cr")
        { await myCr_ref.FocusAsync(); }
    }
    public async Task GetBranch()
    {
        branchList = await Http.GetJsonAsync<List<BranchModel>>(Utility.BaseUrl + "api/Setup/GetBranchList");
        if (branchList.Count > 0)
        { BranchName = branchList.FirstOrDefault().BRANCH_NAME; }


    }
    private async Task GetLedger()
    {
        //ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");
    }
    //private async Task GetCountry()
    //{
    //    countryList = await Http.GetJsonAsync<List<CountryModel>>(Utility.BaseUrl + "api/Setup/GetCountry");
    //}
    private void ItemNameClicked(ChangeEventArgs changeEventArgs)
    {
        itemName = changeEventArgs.Value.ToString();
    }
    private void SupplierNameClicked(ChangeEventArgs changeEventArgs)
    {
        supplierName = changeEventArgs.Value.ToString();
    }
    private void QtyClicked(ChangeEventArgs changeEventArgs)
    {
        //double sum = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString());
        if (changeEventArgs.Value.ToString() != "")
        {
            Q = (changeEventArgs.Value.ToString());
            //totalAmount = Convert.ToDecimal(Convert.ToDecimal(Q) * Convert.ToDecimal(R));
        }
        else
        {
            Q = "";
            totalAmount = 0;
        }

        GetTotal();
        //ADJ = Convert.ToDouble(changeEventArgs.Value.ToString());
    }
    private void rateClicked(ChangeEventArgs changeEventArgs)
    {
        //double sum = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString());
        if (changeEventArgs.Value.ToString() != "")
        {
            R = (changeEventArgs.Value.ToString());
            //totalAmount = Convert.ToDecimal(Convert.ToDecimal(Q) * Convert.ToDecimal(R));
        }
        else
        {
            R = "";
            totalAmount = 0;
        }

        GetTotal();
        //ADJ = Convert.ToDouble(changeEventArgs.Value.ToString());
    }
    private async Task TaxClick(ChangeEventArgs tax)
    {
        if (subTotal != 0 && subTotal != null)
        {
            if (tax.Value != "" && tax.Value != null)
            {
                taxRate = Convert.ToDecimal(tax.Value);
                taxAmount = subTotal * Convert.ToDecimal(tax.Value.ToString()) / 100;
            }
            else
            {
                taxRate = 0;
                taxAmount = 0;
            }

            GetTotal();
        }
    }
    private async Task VATClick(ChangeEventArgs vat)
    {
        if (subTotal != 0 && subTotal != null)
        {
            if (vat.Value != "" && vat.Value != null)
            {
                vatRate = Convert.ToDecimal(vat.Value);
                decimal t = subTotal + taxAmount;
                vatAmount = t * Convert.ToDecimal(vat.Value.ToString()) / 100;
            }
            else
            {
                vatRate = 0;
                vatAmount = 0;
            }

            GetTotal();
        }
    }
    private async Task DiscountClick(ChangeEventArgs discount)
    {
        if (discount.Value != "" && discount != null)
        {
            discountRate = Convert.ToDecimal(discount.Value);
            discountAmount = GrandTotal * Convert.ToDecimal(discount.Value.ToString()) / 100;
        }
        else
        {
            discountRate = 0;
            discountAmount = 0;
        }

        GetTotal();
    }
    private async Task Discount_Taka_Click(ChangeEventArgs discount_taka)
    {
        if (discount_taka.Value != "" && discount_taka != null)
        {
            discountAmount = Convert.ToDecimal(discount_taka.Value);
        }
        else
        {
            discountAmount = 0;
        }
        GetTotal();
    }
    private void TransportClicked(ChangeEventArgs changeEventArgs)
    {
        //double sum = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString());
        if (changeEventArgs.Value.ToString() != "") { transport_cost = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { transport_cost = 0; }
        GetTotal();
        //ADJ = Convert.ToDouble(changeEventArgs.Value.ToString());
    }
    private void LabourClicked(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs.Value.ToString() != "") { labour_cost = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { labour_cost = 0; }
        GetTotal();
    }
    private void OthersClicked(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs.Value.ToString() != "") { others_cost = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { others_cost = 0; }
        GetTotal();
    }
    private void GetTotal()
    {
        //if(AIT== 0 && VAT==0 && ADJ==0)
        //{ finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate)); }
        //finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));

        subTotal= voucherItemList.Sum(x => Convert.ToDecimal(x.TOTAL_AMOUNT));

        if (R != "" && Q != "")
        {
            totalAmount = Convert.ToDecimal(Convert.ToDecimal(Q) * Convert.ToDecimal(R));
        }

        //if (VAT != 0)
        //{ finaltotal = finaltotal + VAT; }
        //if (ADJ != 0)
        //{ finaltotal = finaltotal + ADJ; }
        //if (SeaFreight != 0)
        //{ finaltotal = finaltotal + SeaFreight; }
        //double inwordValue = Convert.ToDouble(finaltotal);
        // Inwords = NumberToWords.ConvertAmount(inwordValue);
        //else { finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate)); }
        //decimal t = voucherItemList.Sum(x => Convert.ToDecimal(x.QUANTITY) * Convert.ToDecimal(x.UNIT_PRICE));
        GrandTotal = subTotal +taxAmount+vatAmount+ transport_cost + labour_cost + others_cost+discountAmount;

    }


    //private async Task<IEnumerable<LedgerModel>> KeyPressLedger(string searchText)
    //{
    //    //return await Task.FromResult(ledgerList.Where(x => x.LEDGER_NAME.ToLower().Contains(searchText.ToLower())).ToList());


    //}
    public async Task AddClicked()
    {
        bool rowexists = voucherItemList.Exists(x => x.ITEM_NAME == searchitem);
        if (rowexists != true)
        {
            int u = itemEntity.UNIT_ID;//itemdetails.UNIT_ID;

            itemdetails = new PurchaseOrderDetailsEntity();
            itemdetails.ITEM_NAME = searchitem;
            itemdetails.ITEM_ID = itemNameList.Find(x => x.ITEM_NAME == searchitem).ITEM_ID;
            itemdetails.ITEM_NAME= itemNameList.Find(x => x.ITEM_NAME == searchitem).ITEM_NAME;
            itemdetails.ITEM_CODE= itemNameList.Find(x => x.ITEM_NAME == searchitem).ITEM_CODE;
            itemdetails.UNIT_ID = u; //unitId;
            if (itemEntity.UNIT_ID != null && itemEntity.UNIT_ID != 0)
            { itemdetails.UOM = unitList.Find(x => x.UNIT_ID == itemEntity.UNIT_ID).UNIT_NAME; }
            else
            {
                itemdetails.UOM = itemEntity.UOM;
            }
            if (shortDescription != null)
            {
                itemdetails.SHORT_DESCRIPTION = await this.shortDescription.GetHTML();
            }
            itemdetails.QUANTITY = Convert.ToDouble(Q);
            itemdetails.UNIT_PRICE = Convert.ToDouble(R);
            itemdetails.TOTAL_AMOUNT = Convert.ToString(totalAmount);
            voucherItemList.Add(itemdetails);

            Clear();
        }
        else
        {
            voucherItemList.Where(w => w.PO_DETAILS_ID == rowId).ToList().ForEach(s => s.ITEM_NAME = searchitem);
            voucherItemList.Where(w => w.PO_DETAILS_ID == rowId).ToList().ForEach(s => s.UNIT_ID = itemEntity.UNIT_ID);
            voucherItemList.Where(w => w.PO_DETAILS_ID == rowId).ToList().ForEach(s => s.UOM = unitName);
            voucherItemList.Where(w => w.PO_DETAILS_ID == rowId).ToList().ForEach(s => s.QUANTITY = Convert.ToDouble(Q));
            voucherItemList.Where(w => w.PO_DETAILS_ID == rowId).ToList().ForEach(s => s.UNIT_PRICE = Convert.ToDouble(R));
            voucherItemList.Where(w => w.PO_DETAILS_ID == rowId).ToList().ForEach(s => s.TOTAL_AMOUNT = Convert.ToString(totalAmount));
            Clear();
        }


        //await itmInput.FocusAsync();
        GetTotal();
    }
    private async void Clear()
    {
        itemName = "";
        //Qty = 0;
        //Rate = 0;
        totalAmount = 0;
        unitId = 0;
        unitName = "";
        searchitem = "";
        itemEntity.UNIT_ID = 0;
        Q = "";
        R = "";
        string shortd = "";
        //await this.shortDescription.LoadHTMLContent(shortd);
        itemnameList = itemNameList.Select(f => f.ITEM_NAME).Distinct().ToList();
    }
    public async Task SavePaymentVoucher()
    {
        //if (IsValidation() != true)
        //{
        //bool exists = voucherItemList.Exists(x => x.ITEM_NAME == "Cr");
        //if (exists != true)
        //{
        //    toastService.ShowWarning("Please Add Credit Info In List");
        //    return;
        //}
        //if (searchVoucher == "" || searchVoucher == null)
        //{
        //    toastService.ShowWarning("Please Add Voucher No.");
        //    return;
        //}
        if (currentDate == "" || currentDate == null)
        {
            toastService.ShowWarning("Please Select Purchase Date.");
            return;
        }
        else
        {
            //if (!await jsruntime.InvokeAsync<bool>("confirm", $"Do you want to save ?"))
            //    return;

            string d = "";
            string m = "";
            string y = "";
            try
            {

                if (selected_date == "" || selected_date == null)
                {
                    porderModel.PO_DATE = Convert.ToDateTime(currentDate).Day.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(currentDate).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(currentDate).Year;
                    d = porderModel.PO_DATE.Substring(0, 2);
                    m = porderModel.PO_DATE.Substring(3, 2);
                    y = porderModel.PO_DATE.Substring(6, 4);
                }
                else
                {
                    d = porderModel.PO_DATE.Substring(0, 2);
                    m = porderModel.PO_DATE.Substring(3, 2);
                    y = porderModel.PO_DATE.Substring(6, 4);
                }

                //accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
                //accCompanyVoucherModel.LEDGER_NAME = voucherItemList.FirstOrDefault().particular;


                ////----------Account Master Data



                //DateTime dd = Convert.ToDateTime(y + "-" + m + "-" + d);
                ////+ "-" + Convert.ToDateTime(d).Month + "-" + Convert.ToDateTime(d).Day); ;
                ////DateTime dtt = Convert.ToDateTime(dd);
                //accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 3);
                //accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(dd);
                //accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
                //accCompanyVoucherModel.LEDGER_NAME = "Purchase A/C"; //vendorList.Find(x => x.VENDOR_ID == purchaseOrderModel.VENDOR_ID).VENDOR_NAME;
                //accCompanyVoucherModel.COMP_VOUCHER_AMOUNT = Convert.ToDecimal(GrandTotal);
                //accCompanyVoucherModel.COMP_VOUCHER_ADD_AMOUNT = 0;
                //accCompanyVoucherModel.COMP_VOUCHER_LESS_AMOUNT = 0;
                //accCompanyVoucherModel.COMP_VOUCHER_NET_AMOUNT = Convert.ToDecimal(GrandTotal);
                //accCompanyVoucherModel.COMP_VOUCHER_PROCESS_AMOUNT = 0;
                //accCompanyVoucherModel.COMP_VOUCHER_NARRATION = "";
                //accCompanyVoucherModel.COMP_VOUCHER_TYPE = 3;
                //accCompanyVoucherModel.ENTRYBY = "Asaduzzaman";
                //accCompanyVoucherModel.UPDATEBY = "Asaduzzaman";
                ////-------------------------------

                ////-----Acc Voucher Details

                //// Create a List of objects
                //            List<ACC_VOUCHER_MODEL> voucherItem = new List<ACC_VOUCHER_MODEL>
                //{
                //                    new ACC_VOUCHER_MODEL {
                //                          COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                //                          ,VOUCHER_REF_KEY=""
                //                          ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                //                          ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                //                          ,COMP_VOUCHER_TYPE=3
                //                          ,LEDGER_NAME="Cash"//vendorList.Find(x => x.VENDOR_ID == purchaseOrderModel.VENDOR_ID).VENDOR_NAME
                //                          ,VOUCHER_DEBIT_AMOUNT=0
                //                                  ,VOUCHER_CREDIT_AMOUNT=Convert.ToDecimal(GrandTotal)
                //                                  ,VOUCHER_ADD_AMOUNT=0
                //                                  ,VOUCHER_LESS_AMOUNT=0
                //                                  ,VOUCHER_TOBY="Cr"
                //                                  ,VOUCHER_FC_DEBIT_AMOUNT=0
                //                                  ,VOUCHER_FC_CREDIT_AMOUNT = 0
                //                            },
                //                    new ACC_VOUCHER_MODEL {
                //                        COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                //                          ,VOUCHER_REF_KEY=""
                //                          ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                //                          ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                //                          ,COMP_VOUCHER_TYPE=3
                //                          ,LEDGER_NAME="Purchase A/C"
                //                          ,VOUCHER_DEBIT_AMOUNT=Convert.ToDecimal(GrandTotal)
                //                          ,VOUCHER_CREDIT_AMOUNT=0
                //                          ,VOUCHER_ADD_AMOUNT=0
                //                          ,VOUCHER_LESS_AMOUNT=0
                //                          ,VOUCHER_TOBY="Dr"
                //                          ,VOUCHER_FC_DEBIT_AMOUNT=0
                //                          ,VOUCHER_FC_CREDIT_AMOUNT = 0

                //                    }
                //                        };
                //            accCompanyVoucherModel.accVoucherList = voucherItem;
                //            porderModel.acc_com_VoucherModel = accCompanyVoucherModel;
                //            porderModel.acc_Voucher_Model = voucherItem;



                porderModel.PO_NUMBER = await Http.GetStringAsync(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderNo");
                porderModel.BUSINESS_ID =1;
                porderModel.VOUCHER_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetPurchaseVoucherNo");
                porderModel.SUPPLIER_MEMO_NO = searchVoucher;
                porderModel.VENDOR_NAME = searchVendor;
                if(vendorList!=null)
                    {
                        porderModel.VENDOR_ID = vendorList.Find(x => x.VENDOR_NAME == searchVendor).VENDOR_ID;
                    }
                
                porderModel.DEPARTMENT_NAME = BranchName;
                porderModel.SHIPPING_ADDRESS = deliveryAddress;
                porderModel.DELIVERY_MODE = deliveryMode;
                porderModel.DELIVERY_TIME = deliveryTime;
                porderModel.CARRING_WAY_COST = transport_cost;
                porderModel.LABOUR_COST = labour_cost;
                porderModel.SUB_TOTAL = subTotal;
                porderModel.TAX_RATE = taxRate;
                porderModel.TAX_AMOUNT = taxAmount;
                porderModel.VAT_RATE = vatRate;
                porderModel.VAT_AMOUNT = vatAmount;
                porderModel.DISCOUNT_RATE = discountRate;
                porderModel.DISCOUNT_AMOUNT = discountAmount;
                porderModel.GRAND_TOTAL = Convert.ToDouble(GrandTotal);
                if (terms_Condition != null)
                {
                    porderModel.TERMS_CONDITION = await this.terms_Condition.GetHTML();
                }



                if (voucherItemList != null)
                {
                    foreach (var item in voucherItemList)
                    {
                        itemdetails = new PurchaseOrderDetailsEntity();
                        //itemdetails.PO_NUMBER_LONG_CODE = voucherNo;


                        itemdetails.PO_NUMBER = porderModel.PO_NUMBER;
                        itemdetails.ITEM_NAME = item.ITEM_NAME;
                        itemdetails.UNIT_ID = item.UNIT_ID;
                        itemdetails.UOM = item.UOM;
                        itemdetails.QUANTITY = item.QUANTITY;
                        itemdetails.UNIT_PRICE = item.UNIT_PRICE;
                        itemdetails.TOTAL_AMOUNT = item.TOTAL_AMOUNT;
                        itemdetails.UNIT_TOTAL = Convert.ToDouble(item.TOTAL_AMOUNT);
                        itemdetails.PO_DETAILS_ID = item.PO_DETAILS_ID;
                        itemdetails.ITEM_ID = item.ITEM_ID;
                        itemdetails.ITEM_CODE = item.ITEM_CODE;

                        //voucherDetails.LEDGER_NAME = item.particular;
                        //voucherDetails.VOUCHER_DEBIT_AMOUNT = item.debitAmount;
                        //voucherDetails.VOUCHER_CREDIT_AMOUNT = item.creditAmount;
                        //voucherDetails.VOUCHER_ADD_AMOUNT = item.creditAmount;
                        //voucherDetails.VOUCHER_LESS_AMOUNT = item.creditAmount;
                        //voucherDetails.VOUCHER_TOBY = item.symbol;
                        //voucherDetails.VOUCHER_FC_DEBIT_AMOUNT = 0;
                        //voucherDetails.VOUCHER_FC_CREDIT_AMOUNT = 0;
                        //if (item.ChequeNo != "" && item.ChequeNo != null && item.ChequeNo != "NULL")
                        //{
                        //    voucherDetails.VOUCHER_CHEQUE_NUMBER = item.ChequeNo;
                        //    voucherDetails.VOUCHER_CHEQUE_DATE = item.ChequeDate;
                        //    voucherDetails.VOUCHER_CHEQUE_DRAWN_ON = item.DrawnOn;
                        //}
                        //paymentVoucherDetails.Add(itemdetails);
                        if (porderModel.pOrderDetailsList == null)
                        { porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>(); }
                        porderModel.pOrderDetailsList.Add(itemdetails);
                    }

                    foreach (var item in voucherItemList)
                    {
                        accVoucherItem = new ACC_VOUCHER_ITEM_MODEL();
                        accVoucherItem.BRANCH_ID = accCompanyVoucherModel.BRANCH_ID;
                        accVoucherItem.COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO;
                        accVoucherItem.COMP_VOUCHER_TYPE = accCompanyVoucherModel.COMP_VOUCHER_TYPE;
                        accVoucherItem.COMP_VOUCHER_DATE = accCompanyVoucherModel.COMP_VOUCHER_DATE;
                        if (item.ITEM_ID != 0)
                        {
                            accVoucherItem.ITEM_ID = item.ITEM_ID;
                            accVoucherItem.STOCKITEM_NAME = item.ITEM_NAME; //productList.Find(x => x.ITEM_ID == item.ITEM_ID).ITEM_NAME;
                        }
                        else
                        {
                            accVoucherItem.STOCKITEM_NAME = item.ITEM_NAME;
                            accVoucherItem.ITEM_ID = 0;
                        }

                        accVoucherItem.BILL_QUANTITY = Convert.ToDecimal(item.QUANTITY);
                        accVoucherItem.BILL_RATE = Convert.ToDecimal(item.UNIT_PRICE);
                        accVoucherItem.GODOWNS_NAME = porderModel.SHIPPING_ADDRESS;
                        accVoucherItem.BILL_UOM = item.UOM;
                        accVoucherItem.BILL_AMOUNT = Convert.ToDecimal(item.QUANTITY * item.UNIT_PRICE);
                        accVoucherItemList.Add(accVoucherItem);


                    }
                    porderModel.acc_VoucherItemList = accVoucherItemList;
                    //var voucher = await Http.PostJsonAsync<List<ACC_VOUCHER_MODEL>>(Utility.BaseUrl + "api/Transection/AddPaymentVoucherDetails", paymentVoucherDetails);
                    if (btnText == "Save")
                    {
                        //bool precheck = await Http.GetJsonAsync<bool>(Utility.BaseUrl + "api/Purchase/CheckExistItem/" + porderModel.VOUCHER_NO);
                        //if (precheck != true)
                        //{



                        //}
                        //else { toastService.ShowSuccess("Item Exist!!"); }
                        var data = await Http.PostJsonAsync<PurchaseOrderModel>(Utility.BaseUrl + "api/Purchase/AddPurchaseOrder", porderModel);
                        toastService.ShowSuccess("Save Successfully!!!");
                        voucherItemList = new List<PurchaseOrderDetailsEntity>();
                        porderModel = new PurchaseOrderModel();
                        porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>();
                        voucherNo = "";
                        GrandTotal = 0;
                        currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');
                    }
                    else
                    {
                        porderModel.SUPPLIER_MEMO_NO = searchVoucher;
                        var data = await Http.PutJsonAsync<PurchaseOrderModel>(Utility.BaseUrl + "api/Purchase/UpdatePurchaseForProject", porderModel);
                        toastService.ShowSuccess("Save Successfully!!!");
                        voucherItemList = new List<PurchaseOrderDetailsEntity>();
                        porderModel = new PurchaseOrderModel();
                        porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>();
                        voucherNo = "";
                        GrandTotal = 0;
                        currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');
                    }



                    //if (data.status == true)
                    //{
                    //    toastService.ShowSuccess("Save Successfully!!!");
                    //    await LoadPage();
                    //}
                    //else { toastService.ShowError("Not Save : " + data.ErrorMessage); }

                }
                else
                {
                    toastService.ShowWarning("No Item For Purchase!");
                }
            }

            catch (Exception ex)
            {
                voucherItemList = new List<PurchaseOrderDetailsEntity>();
                porderModel = new PurchaseOrderModel();
                porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>();
            }
        }


    }

    private async Task LoadPage()
    {
        await GetVoucherNo();
        // voucherItemList = new List<VoucherItem>();
        visibletext = 0;
        MyProperty = "Dr";
        totalDebit = 0;
        totalCredit = 0;
        onDisable(MyProperty);
        StateHasChanged();
    }
    private async Task GetVoucherNo()
    {
        accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 1);
    }
    private void Keypress(KeyboardEventArgs args)
    {
        string value;
        value = args.Key;
        itemName = value;
        //if (value == "c" || value == "C")
        //{ MyProperty = "Cr"; }
        //else if (value == "d" || value == "D")
        //{ MyProperty = "Dr"; }
        //StateHasChanged();
        //onDisable(MyProperty);
    }
    private void onDisable(string property)
    {
        if (property == "Dr")
        {
            this.isDrDisable = false;
            this.isCrDisable = true;
            MyCrValue = "";
        }
        else if (property == "Cr")
        {
            this.isCrDisable = false;
            this.isDrDisable = true;
        }

    }

    private async Task GetSelectedValue(ChangeEventArgs change)
    {
        if (change.Value.ToString() == "Bank Accounts") { bankStatus = 1; }
    }
    //private void Enter(KeyboardEventArgs e)
    //private void Enter()
    //{
    //    //if (e.Key == "Enter")
    //    {
    //        if (!string.IsNullOrWhiteSpace(newTodo))
    //        {
    //            //todos.Add(new TodoItem { Title = newTodo });
    //            //newTodo = string.Empty;
    //        }
    //    }
    //}
    private void UnitClicked(ChangeEventArgs change)
    {
        unitId = Convert.ToInt32(change.Value.ToString());
        unitName = unitList.Find(x => x.UNIT_ID == unitId).UNIT_NAME;
    }
    private async void QtyEnter(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            await RateInput.FocusAsync();
        }
    }
    private async void RateEnter(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            await sdInput.FocusAsync();
        }
    }

    private async void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            int u = itemEntity.UNIT_ID;//itemdetails.UNIT_ID;

            itemdetails = new PurchaseOrderDetailsEntity();
            itemdetails.ITEM_NAME = searchitem;
            itemdetails.UNIT_ID = u; //unitId;
            if (itemEntity.UNIT_ID != null && itemEntity.UNIT_ID != 0)
            { itemdetails.UOM = unitList.Find(x => x.UNIT_ID == itemEntity.UNIT_ID).UNIT_NAME; }
            else
            {
                itemdetails.UOM = itemEntity.UOM;
            }
            if (shortDescription != null)
            {
                itemdetails.SHORT_DESCRIPTION = await this.shortDescription.GetHTML();
            }
            itemdetails.QUANTITY = Convert.ToDouble(Q);
            itemdetails.UNIT_PRICE = Convert.ToDouble(R);
            itemdetails.TOTAL_AMOUNT = Convert.ToString(totalAmount);

            voucherItemList.Add(itemdetails);


            GetTotal();

            itemName = "";
            //Qty = 0;
            //Rate = 0;
            totalAmount = 0;
            unitId = 0;
            unitName = "";
            searchitem = "";
            itemEntity.UNIT_ID = 0;
            this.shortDescription = null;

            //itemdetails.UNIT_ID =0;


            //paymentvoucher.symbol = MyProperty;
            //paymentvoucher.particular = SelectedString; //SelectedArticle.LEDGER_NAME;
            //if (paymentvoucher.particular == "" || paymentvoucher.particular == null)
            //{
            //    toastService.ShowWarning("Please Add Particular");
            //}
            //else
            //{
            //    //if (MyProperty == "Dr")
            //    //{
            //    //    paymentvoucher.debitAmount = Convert.ToDecimal(MyDrValue);
            //    //}
            //    //if (MyProperty == "Cr")
            //    //{
            //    //    paymentvoucher.creditAmount = Convert.ToDecimal(MyCrValue);
            //    //}
            //    //if (chequeNo != "" && chequeNo != null)
            //    //{
            //    //    paymentvoucher.ChequeNo = chequeNo;
            //    //    paymentvoucher.ChequeDate = Convert.ToDateTime(voucherChequedate);
            //    //    paymentvoucher.DrawnOn = drawnon;

            //    //}
            //    //else
            //    //{
            //    //    paymentvoucher.ChequeNo = "NULL";
            //    //    paymentvoucher.ChequeDate = Convert.ToDateTime("1900-01-01");
            //    //    paymentvoucher.DrawnOn = "NULL";
            //    //}




            //    //totalDebit = voucherItemList.Sum(item => item.debitAmount);
            //    //totalCredit = voucherItemList.Sum(item => item.debitAmount); //voucherItemList.Sum(item => item.creditAmount);


            //    //bool exists = voucherItemList.Exists(x => x.symbol == "Cr");

            //    //if (exists != true)
            //    //{
            //    //    MyProperty = "Cr";
            //    //    //double total = myList.Sum(item => item.Amount);
            //    //    MyCrValue = Convert.ToString(voucherItemList.Sum(item => item.debitAmount));
            //    //    //SelectedArticle.LEDGER_NAME = "";
            //    //    //SelectedString = "";
            //    //    MyDrValue = "";
            //    //    bankStatus = 0;
            //    //    chequeNo = "";
            //    //    drawnon = "";

            //    //    onDisable(MyProperty);
            //    //    await myref.FocusAsync();

            //    //}
            //    //else
            //    //{
            //    //    visibletext = 1;
            //    //    StateHasChanged();
            //    //    MyProperty = "";
            //    //    //SelectedArticle.LEDGER_NAME = "";
            //    //    SelectedString = "";
            //    //    MyDrValue = "";
            //    //    MyCrValue = "";
            //    //    bankStatus = 0;
            //    //    chequeNo = "";
            //    //    drawnon = "";

            //    //    await narrationref.FocusAsync();
            //    //}
            //}
        }
    }
    //public void Enter(KeyboardEventArgs e)
    //{
    //    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //    {
    //        // ...
    //        KeyPressed = "Key Pressed is " + this.Value;

    //        //amount = e.Key;
    //        paymentvoucher = new VoucherItem();
    //        paymentvoucher.symbol = MyProperty;
    //        paymentvoucher.particular = SelectedArticle.LEDGER_NAME;
    //        if (MyProperty == "Dr")
    //        {
    //            paymentvoucher.debitAmount = amount;
    //        }
    //        if (MyProperty == "Cr")
    //        {
    //            paymentvoucher.creditAmount = amount;
    //        }

    //        voucherItemList.Add(paymentvoucher);



    //    }
    //}
    //public class VoucherItem
    //{
    //    public string symbol { get; set; }
    //    public string particular { get; set; }
    //    public decimal debitAmount { get; set; }
    //    public decimal creditAmount { get; set; }
    //    public string ChequeNo { get; set; }
    //    //public DateTime ChequeDate { get; set; }
    //    public Nullable<DateTime> ChequeDate { get; set; }

    //    public string DrawnOn { get; set; }
    //}
    private async void GetDate(ChangeEventArgs change)
    {
        selected_date = change.Value.ToString();
        porderModel.PO_DATE = Convert.ToDateTime(selected_date).Day.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(selected_date).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(selected_date).Year;
    }

    private async void GetChequeDate(ChangeEventArgs change)
    {
        voucherChequedate = change.Value.ToString();

    }
    //void CloseClicked() { UriHelper.NavigateTo("DailyPurchaseForProject"); }
    private void SelectItem(string item)
    {
        itemName = item;
    }
    private void SelectSupplierItem(string item)
    {
        supplierName = item;
    }
    private void ClearList()
    {
        itemnameList = new List<string>();
    }
    private async void EditClick(int Id)
    {
        //btnLabel = "Update";
        //currencyModel = currencyList.FirstOrDefault(x => x.CURRENCY_SERIAL == serial);
        rowId = Id;
        searchitem = voucherItemList.Find(x => x.PO_DETAILS_ID == Id).ITEM_NAME;
        itemEntity.UNIT_ID = voucherItemList.Find(x => x.PO_DETAILS_ID == Id).UNIT_ID;
        unitName = itemNameList.Find(x => x.ITEM_NAME == searchitem).UOM;

        itemEntity.UOM = unitName;
        Q = Convert.ToString(voucherItemList.Find(x => x.PO_DETAILS_ID == Id).QUANTITY);
        R = Convert.ToString(voucherItemList.Find(x => x.PO_DETAILS_ID == Id).UNIT_PRICE);
        totalAmount = Convert.ToDecimal(voucherItemList.Find(x => x.PO_DETAILS_ID == Id).TOTAL_AMOUNT);
        ClearList();
        //string name = voucherItemList.Find(x => x.Serial == serial).particular;
        //MyDrValue = Convert.ToString(voucherItemList.Find(x => x.Serial == serial).debitAmount);
        //MyCrValue = Convert.ToString(voucherItemList.Find(x => x.Serial == serial).creditAmount);
        //SelectedArticle = ledgerList.FirstOrDefault(x => x.LEDGER_NAME == name);
        //ledgerList.Where(x => x.LEDGER_NAME.ToLower().Contains(searchText.ToLower())).ToList()
        //await myref.FocusAsync();
        //SelectedArticle.LEDGER_NAME = voucherItemList.Find(x => x.Serial == serial).particular; //ledgerList.Find(x => x.LEDGER_NAME == name).LEDGER_NAME;

        //parent = voucherItemList.Find(x => x.Serial == serial).particular;
        //chequeNo = voucherItemList.Find(x => x.Serial == serial).ChequeNo;
        //if (chequeNo != "" && chequeNo != null)
        //{
        //    chequeDate = voucherItemList.Find(x => x.Serial == serial).ChequeDate.Year + "-" +
        //        (voucherItemList.Find(x => x.Serial == serial).ChequeDate.Month).ToString().PadLeft(2, '0') + "-" +
        //        (voucherItemList.Find(x => x.Serial == serial).ChequeDate.Day).ToString().PadLeft(2, '0');
        //}
        //drawnon = voucherItemList.Find(x => x.Serial == serial).DrawnOn;
        //onDisable(MyProperty);

        //chequeDate = Convert.ToDateTime(voucherItemList.Find(x => x.Serial == serial).chequedate);
        //accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(voucherDate);
        StateHasChanged();

    }
    public async void DeleteItem(string item)
    {
        int detailsId = voucherItemList.Find(x => x.ITEM_NAME == item).PO_DETAILS_ID;
        if (detailsId != 0)
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
                return;

            await Http.DeleteAsync(Utility.BaseUrl + "api/Purchase/DeletePurchaseItem/" + detailsId);
            var itemRemove = voucherItemList.Single(r => r.ITEM_NAME == item);
            voucherItemList.Remove(itemRemove);
        }
        else
        {
            var itemToRemove = voucherItemList.Single(r => r.ITEM_NAME == item);
            voucherItemList.Remove(itemToRemove);
        }
        GetTotal();



        StateHasChanged();
    }
}

