@page "/StockOut"

@layout CustomLayout
@inject HttpClient Http
@inject IToastService toastService
@inject IJSRuntime jsruntime
@inject NavigationManager UriHelper
@using Blazored.Typeahead

<div class="container">
    @*<EditForm Model="@ledger">*@
    <div class="card">
        <div class="card-header" style="background-color:black;color:white"><h4>Delivery Note</h4></div>
        <div class="testbox">
            <div class="form">
                <div class="row">
                    <div class="col-25">
                        <label>Out Date:</label>
                    </div>
                    <div class="col-75">
                        <input type="date" id="today" value="@currentDate" format-value="dd-MM-yyyy" style="width:200px" @onchange="GetDate">
                    </div>
                </div>
                <div class="row">
                    <div class="col-25">
                        <label for="fname">Carrying By:</label>
                    </div>
                    <div class="col-75" style="display: inline-block;">
                        @*<input type="text" data-toggle="modal" data-target=".bd-example-modal-lgvendor" @oninput="SupplierNameClicked" value="@supplierName" @ref="myref" />*@
                        <input type="search" @bind="searchVendor" @oninput="GetEmployeeList" class="form-control" />
                        <div class="autocom">
                            @if (options1 != null)
                            {
                                @foreach (var item in options1)
                                {
                                    //if (searchWord != null)
                                    //{
                                    if (item.ToUpper().Contains(searchVendor.ToUpper()) && searchVendor.Length > 1)
                                    {
                                        if (searchVendor != "")
                                        {
                                            vendor_name = item;
                                            <section @onclick=@(() => selectedEmployee(item))>@item</section>
                                        }
                                        else
                                        { <section></section>}



                                    }
                                    @*}*@

                                }

                            }

                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-25">
                        <label for="fname">Customer:</label>
                    </div>
                    <div class="col-75" style="display: inline-block;">
                        @*<input type="text" data-toggle="modal" data-target=".bd-example-modal-lgvendor" @oninput="SupplierNameClicked" value="@supplierName" @ref="myref" />*@
                        <input type="search" @bind="searchCustomer" @oninput="GetCustomerList" class="form-control" />
                        <div class="autocom">
                            @if (customer != null)
                            {
                                @foreach (var item in customer)
                                {                                    
                                    if (item.ToUpper().Contains(searchCustomer.ToUpper()) && searchCustomer.Length > 1)
                                    {
                                        if (searchCustomer != "")
                                        {                                            
                                            <section @onclick=@(() => selectedcustomer(item))>@item</section>
                                        }
                                        else
                                        { <section></section>}
                                    }
                                }
                            }

                        </div>
                    </div>

                </div>
                
                <br />






                <div class="form-row">
                    <div class="form-group col-md-3">
                        <label for="inputCity">Item</label>
                        <input type="search" @bind="searchitem" @oninput="GetItemList" class="form-control" />
                        <div class="autocom">
                            @if (itemnameList != null)
                            {
                                @foreach (var item in itemnameList)
                                {
                                    if (item.ToUpper().Contains(searchitem.ToUpper()) && searchitem.Length > 1)
                                    {
                                        if (searchitem != "")
                                        {
                                            itemName = item;
                                            <section @onclick=@(() => SelectedItm(item)) style="width:84%">@item</section>
                                        }
                                        else
                                        { <section></section>}
                                    }
                                }
                            }

                        </div>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="inputState">Unit</label>
                        <EditForm Model="@itemEntity">
                            <InputSelect @bind-Value="@itemEntity.UNIT_ID" class="form-control">
                                <option>--Unit--</option>
                                @foreach (var item in unitList)
                                {
                                    <option value="@item.UNIT_ID">@item.UNIT_NAME</option>
                                }

                            </InputSelect>
                        </EditForm>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="inputZip">Qty</label>
                        <input class="form-control" @bind-value="Qty" @onkeyup="DoTheThing" />
                    </div>

                </div>



                <table width="100%">
                    <thead>
                        <tr>
                            <td colspan="2" style="width:75%">Item Name</td>
                            <td style="width:10%">Unit</td>
                            <td style="width:10%">QTY.</td>
                            <td style="width:5%"></td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in voucherItemList)
                        {
                            <tr style="font-size: 14px; height:34px">
                                <td colspan="2" style="width:75%">@item.ITEM_NAME</td>
                                <td style="width:10%">@item.UOM</td>
                                <td style="width:10%">@item.QUANTITY</td>
                                <td><a @onclick=@(() => DeleteItem(item.ITEM_NAME))><span class="oi oi-delete"></span></a></td>
                            </tr>
                        }
                    </tbody>

                    @*<tr>
                        <td colspan="4" style="text-align:right">Transport cost</td>
                        <td><input type="text" @oninput="TransportClicked" @bind-value="@transport_cost" /></td>
                        <td rowspan="4"></td>
                    </tr>
                    <tr>
                        <td colspan="4" style="text-align:right">Labour Cost</td>
                        <td><input type="text" @oninput="LabourClicked" @bind-value="@labour_cost" /></td>
                    </tr>
                    <tr>
                        <td colspan="4" style="text-align:right">Others</td>
                        <td><input type="text" @oninput="OthersClicked" @bind-value="@others_cost" /></td>
                    </tr>
                    <tr>
                        <td colspan="4" style="text-align:right"><b>Grand Total</b></td>
                        <td><input type="text" @bind-value="@GrandTotal" /></td>
                    </tr>*@
                </table>
            </div>


        </div>
        <div class="btn-block">
            <button type="button" style="width:90px" class="btn btn-danger" @onclick="CloseClicked">Cancel</button>
            <button type="submit" style="width:120px;margin-left:10px" @onclick="@SavePaymentVoucher">Save</button>

        </div>
    </div>
    @*</EditForm>*@
</div>


@*--------Midal-ItemList----------*@
<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="p-2"><img src="images/fountain-pen.png" alt="" width="50" height="50" class="mr-3"><span class="text-uppercase">Item List</span>  </h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <table class="table-hover">
                    <tbody>

                        @foreach (var item in itemNameList)
                        {
                            <tr>
                                <td style="text-align: left; cursor: pointer" class="form-control" @onclick=@(() => SelectItem(item.ITEM_NAME)) data-dismiss="modal">@item.ITEM_NAME</td>
                                <td style="width:25px">@item.UOM</td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>

        </div>
    </div>
</div>
@*--------Midal-Supplier----------*@
<div class="modal fade bd-example-modal-lgvendor" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="p-2"><span class="text-uppercase">Supplier List</span>  </h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table>
                    <tbody>
                        @foreach (var item in vendorList)
                        {
                            <tr>
                                <td style="text-align:left;cursor:pointer" class="form-control hovertable" @onclick=@(() => SelectSupplierItem(item.VENDOR_NAME)) data-dismiss="modal">@item.VENDOR_NAME</td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>

        </div>
    </div>
</div>

@code {
    PurchaseOrderModel porderModel = new PurchaseOrderModel();
    List<VendorEntity> vendorList = new List<VendorEntity>();
    List<UnitModel> unitList = new List<UnitModel>();
    UnitModel unit = new UnitModel();
    string vendor_name;
    LedgerModel ledger = new LedgerModel();
    List<ItemEntity> itemNameList = new List<ItemEntity>();
    List<BranchModel> branchList = new List<BranchModel>();
    string MyProperty;
    List<string> itemList = new List<string>();


    private VendorEntity SelectedVendor;
    List<VendorEntity> options;

    List<PurchaseOrderDetailsEntity> voucherItemList = new List<PurchaseOrderDetailsEntity>();
    PurchaseOrderDetailsEntity itemdetails = new PurchaseOrderDetailsEntity();
    ItemEntity itemEntity = new ItemEntity();
    VoucherItem paymentvoucher = new VoucherItem();
    ACC_COMPANY_VOUCHER_MODEL accCompanyVoucherModel = new ACC_COMPANY_VOUCHER_MODEL();
    List<PurchaseOrderDetailsEntity> paymentVoucherDetails = new List<PurchaseOrderDetailsEntity>();
    ACC_VOUCHER_MODEL voucherDetails = new ACC_VOUCHER_MODEL();
    List<EmployeeModel> employeeList = new List<EmployeeModel>();
    List<CustomerModel> customerList = new List<CustomerModel>();
    string voucherNo;

    decimal amount;
    string KeyPressed = "";
    public string Value { get; set; }
    public string MyDrValue { get; set; }
    public string MyCrValue { get; set; }

    double Qty { get; set; }
    decimal Rate { get; set; }
    public decimal totalAmount { get; set; }

    private ElementReference myref;
    private ElementReference myDr_ref;
    private ElementReference myCr_ref;
    private ElementReference narrationref;
    private bool isDrDisable { get; set; }
    private bool isCrDisable { get; set; }
    decimal totalDebit;
    decimal totalCredit;
    int visibletext;
    string BranchName;
    string voucherDate;
    string narration;
    int bankStatus = 0;
    List<string> templates = new List<string>() { "Maui", "Hawaii", "Niihau", "Kauai", "Kahoolawe" };
    string SelectedString = "Maui";
    string parent;
    string chequeNo;
    string drawnon;
    string voucherChequedate = "";
    string currentDate;
    string selected_date;
    string itemName;
    string supplierName;
    decimal GrandTotal;
    decimal transport_cost;
    decimal labour_cost;
    decimal others_cost;
    string unitName;
    int unitId;

    //-----

    List<VendorEntity>? customers;
    string? selectedCustomerId;
    string? selectedCustomerName;
    string? filter;

    public string searchVendor { get; set; } = "";
    public string searchCustomer { get; set; } = "";
    public string searchitem { get; set; } = "";

    List<string> options1;
    List<string> customer;
    List<string> itemnameList;

    protected override async Task OnInitializedAsync()
    {
        MyProperty = "Dr";
        onDisable(MyProperty);
        accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 1);
        //await GetCountry();
        await GetLedger();
        //await GetBranch();
        itemNameList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product/GetProjectItem");
        unitList = await Http.GetJsonAsync<List<UnitModel>>(Utility.BaseUrl + "api/Setup/GetUnit");
        vendorList = await Http.GetJsonAsync<List<VendorEntity>>(Utility.BaseUrl + "api/Vendor");
        employeeList = await Http.GetJsonAsync<List<EmployeeModel>>(Utility.BaseUrl + "api/Employee");
        customerList = await Http.GetJsonAsync<List<CustomerModel>>(Utility.BaseUrl + "api/Customer");
        currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');
        //currentDate = System.DateTime.Now.Day.ToString().PadLeft(2, '0')+"/"+ (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + System.DateTime.Now.Year ;
        options1 = employeeList.Select(f => f.EMPLOYEE_NAME).Distinct().ToList();
        customer = customerList.Select(f => f.CUSTOMER_NAME).Distinct().ToList();
        itemnameList = itemNameList.Select(f => f.ITEM_NAME).Distinct().ToList();
        StateHasChanged();

    }
    private async Task<IEnumerable<VendorEntity>> SearchLedger(string searchText)
    {
        //return await Task.FromResult(vendorList.Where(x => x.VENDOR_NAME.ToLower().Contains(searchText.ToLower())).ToList());

        return vendorList = vendorList.Where(x => x.VENDOR_NAME.ToLower().Contains(searchText.ToLower())).ToList();
        //return await Task.FromResult(ledgerList);
    }
    public async Task selectedcustomer(string ff)
    {
        //searchVendor = ff;
        searchCustomer = ff;
        vendor_name = null;
        StateHasChanged();
    }
    private async Task GetEmployeeList(ChangeEventArgs change)
    {
        searchVendor = change.Value.ToString();
        options1 = employeeList.Select(f => f.EMPLOYEE_NAME).Distinct().ToList();
    }
    private async Task GetCustomerList(ChangeEventArgs change)
    {
        searchCustomer = change.Value.ToString();
        customer = customerList.Select(f => f.CUSTOMER_NAME).Distinct().ToList();
    }
    private async Task GetItemList(ChangeEventArgs change)
    {
        searchitem = change.Value.ToString();
        itemnameList = itemNameList.Select(f => f.ITEM_NAME).Distinct().ToList();
    }

    public async Task selectedEmployee(string ff)
    {
        //searchVendor = ff;
        searchVendor = ff;
        //
        //vendor_name = null;
        options1 = new List<string>();
        StateHasChanged();
    }
    public async Task SelectedItm(string param_itm)
    {
        itemName = param_itm;
        searchitem = param_itm;
        itemEntity.UNIT_ID = itemNameList.Find(x => x.ITEM_NAME == searchitem).UNIT_ID;
        unitName = itemNameList.Find(x => x.ITEM_NAME == searchitem).UOM;
        itemEntity.UOM = unitName;
        itemEntity.UNIT_ID = itemEntity.UNIT_ID;
        //var result = from s in unitList
        //             where s.UNIT_ID == unitId
        //             select s;


        ////int i=unitList.FindIndex(x => x.UNIT_ID == unitId);
        ////var firstItem = unitList.ElementAt(i);
        ////unitList.Find(x => x.UNIT_NAME.Contains(unitId)));
        //unit = unitList.FindAll(x => x.UNIT_ID == unitId).FirstOrDefault();
        ////no matches, do something else
        //foreach (var itm in result) { unitName = itm.UNIT_NAME; }
        ////unitName = unitList.Find(x => x.UNIT_ID == unitId).UNIT_NAME;


        StateHasChanged();
    }
    async Task HandleInput(ChangeEventArgs e)
    {
        filter = e.Value?.ToString();
        if (filter?.Length > 2)
        {
            customers = await Http.GetJsonAsync<List<VendorEntity>>(Utility.BaseUrl + "api/Vendor/GetVendorDetailsByVendorCode/" + filter);
        }
        else
        {
            customers = null;
            selectedCustomerName = selectedCustomerId = null;
        }
    }

    void SelectCustomer(string id)
    {
        selectedCustomerId = id;
        selectedCustomerName = customers!.First(c => c.VENDOR_ID.Equals(selectedCustomerId)).VENDOR_NAME;
        customers = null;
    }
    async void selectedledger(ChangeEventArgs e)
    {
        SelectedString = e.Value.ToString();
        if (SelectedString == "Bank Accounts") { bankStatus = 1; }
        else { bankStatus = 0; }
        if (MyProperty == "Dr")
        { await myDr_ref.FocusAsync(); }
        else if (MyProperty == "Cr")
        { await myCr_ref.FocusAsync(); }
    }
    public async Task GetBranch()
    {
        branchList = await Http.GetJsonAsync<List<BranchModel>>(Utility.BaseUrl + "api/Setup/GetBranchList");
        if (branchList.Count > 0)
        { BranchName = branchList.FirstOrDefault().BRANCH_NAME; }


    }
    private async Task GetLedger()
    {
        //ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");
    }
    //private async Task GetCountry()
    //{
    //    countryList = await Http.GetJsonAsync<List<CountryModel>>(Utility.BaseUrl + "api/Setup/GetCountry");
    //}
    private void ItemNameClicked(ChangeEventArgs changeEventArgs)
    {
        itemName = changeEventArgs.Value.ToString();
    }
    private void SupplierNameClicked(ChangeEventArgs changeEventArgs)
    {
        supplierName = changeEventArgs.Value.ToString();
    }
    private void rateClicked(ChangeEventArgs changeEventArgs)
    {
        //double sum = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString());
        if (changeEventArgs.Value.ToString() != "") { Rate = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { Rate = 0; }
        totalAmount = Convert.ToDecimal(Convert.ToDecimal(Qty) * Convert.ToDecimal(Rate));
        //GetTotal();
        //ADJ = Convert.ToDouble(changeEventArgs.Value.ToString());
    }
    private void TransportClicked(ChangeEventArgs changeEventArgs)
    {
        //double sum = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString());
        if (changeEventArgs.Value.ToString() != "") { transport_cost = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { transport_cost = 0; }
        GetTotal();
        //ADJ = Convert.ToDouble(changeEventArgs.Value.ToString());
    }
    private void LabourClicked(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs.Value.ToString() != "") { labour_cost = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { labour_cost = 0; }
        GetTotal();
    }
    private void OthersClicked(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs.Value.ToString() != "") { others_cost = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { others_cost = 0; }
        GetTotal();
    }
    private void GetTotal()
    {
        //if(AIT== 0 && VAT==0 && ADJ==0)
        //{ finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate)); }
        //finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));

        //if (Rate !="")
        //{
        //    totalAmount = Convert.ToDecimal(Convert.ToDecimal(Qty)* Convert.ToDecimal(Rate));
        //}

        //if (VAT != 0)
        //{ finaltotal = finaltotal + VAT; }
        //if (ADJ != 0)
        //{ finaltotal = finaltotal + ADJ; }
        //if (SeaFreight != 0)
        //{ finaltotal = finaltotal + SeaFreight; }
        //double inwordValue = Convert.ToDouble(finaltotal);
        // Inwords = NumberToWords.ConvertAmount(inwordValue);
        //else { finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate)); }
        decimal t = voucherItemList.Sum(x => Convert.ToDecimal(x.QUANTITY) * Convert.ToDecimal(x.UNIT_PRICE));
        GrandTotal = t + transport_cost + labour_cost + others_cost;

    }


    //private async Task<IEnumerable<LedgerModel>> KeyPressLedger(string searchText)
    //{
    //    //return await Task.FromResult(ledgerList.Where(x => x.LEDGER_NAME.ToLower().Contains(searchText.ToLower())).ToList());


    //}

    public async Task SavePaymentVoucher()
    {
        //if (IsValidation() != true)
        //{
        //bool exists = voucherItemList.Exists(x => x.ITEM_NAME == "Cr");
        //if (exists != true)
        //{
        //    toastService.ShowWarning("Please Add Credit Info In List");
        //    return;
        //}

        if (currentDate == "" || currentDate == null)
        {
            toastService.ShowWarning("Please Select Date.");
            return;
        }
        else
        {
            //if (!await jsruntime.InvokeAsync<bool>("confirm", $"Do you want to save ?"))
            //    return;


            try
            {

                if (selected_date == "" || selected_date == null)
                { porderModel.PO_DATE = Convert.ToDateTime(currentDate).Day.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(currentDate).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(currentDate).Year; }

                //accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
                //accCompanyVoucherModel.LEDGER_NAME = voucherItemList.FirstOrDefault().particular;


                ////----------Account Master Data
                //string d = currentDate.Substring(0, 2);
                //string m = currentDate.Substring(3, 2);
                //string y = currentDate.Substring(6, 4);
                //DateTime dd = Convert.ToDateTime(y + "-" + m + "-" + d);
                ////+ "-" + Convert.ToDateTime(d).Month + "-" + Convert.ToDateTime(d).Day); ;
                ////DateTime dtt = Convert.ToDateTime(dd);
                //accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 3);
                //accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(dd);
                //accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
                ////accCompanyVoucherModel.LEDGER_NAME = vendorList.Find(x => x.VENDOR_ID == purchaseOrderModel.VENDOR_ID).VENDOR_NAME;
                //accCompanyVoucherModel.COMP_VOUCHER_AMOUNT = Convert.ToDecimal(GrandTotal);
                //accCompanyVoucherModel.COMP_VOUCHER_ADD_AMOUNT = 0;
                //accCompanyVoucherModel.COMP_VOUCHER_LESS_AMOUNT = 0;
                //accCompanyVoucherModel.COMP_VOUCHER_NET_AMOUNT = Convert.ToDecimal(GrandTotal);
                //accCompanyVoucherModel.COMP_VOUCHER_PROCESS_AMOUNT = 0;
                //accCompanyVoucherModel.COMP_VOUCHER_NARRATION = "";
                //accCompanyVoucherModel.COMP_VOUCHER_TYPE = 3;
                //accCompanyVoucherModel.ENTRYBY = "Asaduzzaman";
                //accCompanyVoucherModel.UPDATEBY = "Asaduzzaman";
                ////-------------------------------

                ////-----Acc Voucher Details

                //// Create a List of objects
                //List<ACC_VOUCHER_MODEL> voucherItem = new List<ACC_VOUCHER_MODEL>
                //    {
                //        new ACC_VOUCHER_MODEL {
                //              COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                //              ,VOUCHER_REF_KEY=""
                //              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                //              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                //              ,COMP_VOUCHER_TYPE=3
                //              //,LEDGER_NAME=vendorList.Find(x => x.VENDOR_ID == purchaseOrderModel.VENDOR_ID).VENDOR_NAME
                //              ,VOUCHER_DEBIT_AMOUNT=0
                //              ,VOUCHER_CREDIT_AMOUNT=Convert.ToDecimal(GrandTotal)
                //              ,VOUCHER_ADD_AMOUNT=0
                //              ,VOUCHER_LESS_AMOUNT=0
                //              ,VOUCHER_TOBY="Cr"
                //              ,VOUCHER_FC_DEBIT_AMOUNT=0
                //              ,VOUCHER_FC_CREDIT_AMOUNT = 0
                //        },
                //        new ACC_VOUCHER_MODEL {
                //              COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                //              ,VOUCHER_REF_KEY=""
                //              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                //              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                //              ,COMP_VOUCHER_TYPE=3
                //              ,LEDGER_NAME=SelectedString
                //              ,VOUCHER_DEBIT_AMOUNT=Convert.ToDecimal(GrandTotal)
                //              ,VOUCHER_CREDIT_AMOUNT=0
                //              ,VOUCHER_ADD_AMOUNT=0
                //              ,VOUCHER_LESS_AMOUNT=0
                //              ,VOUCHER_TOBY="Dr"
                //              ,VOUCHER_FC_DEBIT_AMOUNT=0
                //              ,VOUCHER_FC_CREDIT_AMOUNT = 0

                //        }
                //    };
                //accCompanyVoucherModel.accVoucherList = voucherItem;
                //porderModel.acc_com_VoucherModel = accCompanyVoucherModel;
                //porderModel.acc_Voucher_Model = voucherItem;



                porderModel.BUSINESS_ID = 2;
                porderModel.VOUCHER_NO = voucherNo;
                porderModel.CARRYING_BY = searchVendor;
                porderModel.CUSTOMER_NAME = searchCustomer;
                porderModel.CARRING_WAY_COST = transport_cost;
                porderModel.LABOUR_COST = labour_cost;
                porderModel.OTHERS_COST = others_cost;
                porderModel.GRAND_TOTAL = Convert.ToDouble(GrandTotal);




                if (voucherItemList != null)
                {
                    foreach (var item in voucherItemList)
                    {
                        itemdetails = new PurchaseOrderDetailsEntity();
                        //itemdetails.PO_NUMBER_LONG_CODE = voucherNo;
                        itemdetails.ITEM_NAME = item.ITEM_NAME;
                        itemdetails.UNIT_ID = item.UNIT_ID;
                        itemdetails.QUANTITY = item.QUANTITY;
                        itemdetails.UNIT_PRICE = item.UNIT_PRICE;
                        itemdetails.TOTAL_AMOUNT = item.TOTAL_AMOUNT;

                        //voucherDetails.LEDGER_NAME = item.particular;
                        //voucherDetails.VOUCHER_DEBIT_AMOUNT = item.debitAmount;
                        //voucherDetails.VOUCHER_CREDIT_AMOUNT = item.creditAmount;
                        //voucherDetails.VOUCHER_ADD_AMOUNT = item.creditAmount;
                        //voucherDetails.VOUCHER_LESS_AMOUNT = item.creditAmount;
                        //voucherDetails.VOUCHER_TOBY = item.symbol;
                        //voucherDetails.VOUCHER_FC_DEBIT_AMOUNT = 0;
                        //voucherDetails.VOUCHER_FC_CREDIT_AMOUNT = 0;
                        //if (item.ChequeNo != "" && item.ChequeNo != null && item.ChequeNo != "NULL")
                        //{
                        //    voucherDetails.VOUCHER_CHEQUE_NUMBER = item.ChequeNo;
                        //    voucherDetails.VOUCHER_CHEQUE_DATE = item.ChequeDate;
                        //    voucherDetails.VOUCHER_CHEQUE_DRAWN_ON = item.DrawnOn;
                        //}
                        //paymentVoucherDetails.Add(itemdetails);
                        if (porderModel.pOrderDetailsList == null)
                        { porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>(); }
                        porderModel.pOrderDetailsList.Add(itemdetails);
                    }
                    //var voucher = await Http.PostJsonAsync<List<ACC_VOUCHER_MODEL>>(Utility.BaseUrl + "api/Transection/AddPaymentVoucherDetails", paymentVoucherDetails);
                    //bool precheck = await Http.GetJsonAsync<bool>(Utility.BaseUrl + "api/Purchase/CheckExistItem/" + porderModel.VOUCHER_NO);
                    //if (precheck != true)
                    //{
                    var data = await Http.PostJsonAsync<PurchaseOrderModel>(Utility.BaseUrl + "api/Purchase/AddStockOut", porderModel);
                    toastService.ShowSuccess("Save Successfully!!!");
                    voucherItemList = new List<PurchaseOrderDetailsEntity>();
                    porderModel = new PurchaseOrderModel();
                    porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>();
                    voucherNo = "";
                    GrandTotal = 0;
                    currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');

                    //}
                    //else { toastService.ShowSuccess("Item Exist!!"); }


                    //if (data.status == true)
                    //{
                    //    toastService.ShowSuccess("Save Successfully!!!");
                    //    await LoadPage();
                    //}
                    //else { toastService.ShowError("Not Save : " + data.ErrorMessage); }

                }
                else
                {
                    toastService.ShowWarning("No Item For Purchase!");
                }
            }

            catch (Exception ex)
            {
                voucherItemList = new List<PurchaseOrderDetailsEntity>();
                porderModel = new PurchaseOrderModel();
                porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>();
            }
        }


    }

    private async Task LoadPage()
    {
        await GetVoucherNo();
        // voucherItemList = new List<VoucherItem>();
        visibletext = 0;
        MyProperty = "Dr";
        totalDebit = 0;
        totalCredit = 0;
        onDisable(MyProperty);
        StateHasChanged();
    }
    private async Task GetVoucherNo()
    {
        accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 1);
    }
    private void Keypress(KeyboardEventArgs args)
    {
        string value;
        value = args.Key;
        itemName = value;
        //if (value == "c" || value == "C")
        //{ MyProperty = "Cr"; }
        //else if (value == "d" || value == "D")
        //{ MyProperty = "Dr"; }
        //StateHasChanged();
        //onDisable(MyProperty);
    }
    private void onDisable(string property)
    {
        if (property == "Dr")
        {
            this.isDrDisable = false;
            this.isCrDisable = true;
            MyCrValue = "";
        }
        else if (property == "Cr")
        {
            this.isCrDisable = false;
            this.isDrDisable = true;
        }

    }

    private async Task GetSelectedValue(ChangeEventArgs change)
    {
        if (change.Value.ToString() == "Bank Accounts") { bankStatus = 1; }
    }
    //private void Enter(KeyboardEventArgs e)
    //private void Enter()
    //{
    //    //if (e.Key == "Enter")
    //    {
    //        if (!string.IsNullOrWhiteSpace(newTodo))
    //        {
    //            //todos.Add(new TodoItem { Title = newTodo });
    //            //newTodo = string.Empty;
    //        }
    //    }
    //}
    private void UnitClicked(ChangeEventArgs change)
    {
        unitId = Convert.ToInt32(change.Value.ToString());
        unitName = unitList.Find(x => x.UNIT_ID == unitId).UNIT_NAME;
    }
    private async void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            int u = itemEntity.UNIT_ID;//itemdetails.UNIT_ID;

            itemdetails = new PurchaseOrderDetailsEntity();
            itemdetails.ITEM_NAME = searchitem;
            itemdetails.UNIT_ID = u; //unitId;
            if (itemEntity.UNIT_ID != null && itemEntity.UNIT_ID != 0)
            { itemdetails.UOM = unitList.Find(x => x.UNIT_ID == itemEntity.UNIT_ID).UNIT_NAME; }
            else
            {
                itemdetails.UOM = itemEntity.UOM;
            }

            itemdetails.QUANTITY = Convert.ToDouble(Qty);
            itemdetails.UNIT_PRICE = Convert.ToDouble(Rate);
            itemdetails.TOTAL_AMOUNT = Convert.ToString(totalAmount);

            voucherItemList.Add(itemdetails);


            GetTotal();

            itemName = "";
            Qty = 0;
            Rate = 0;
            totalAmount = 0;
            unitId = 0;
            unitName = "";
            searchitem = "";
            itemEntity.UNIT_ID = 0;
            //itemdetails.UNIT_ID =0;


            //paymentvoucher.symbol = MyProperty;
            //paymentvoucher.particular = SelectedString; //SelectedArticle.LEDGER_NAME;
            //if (paymentvoucher.particular == "" || paymentvoucher.particular == null)
            //{
            //    toastService.ShowWarning("Please Add Particular");
            //}
            //else
            //{
            //    //if (MyProperty == "Dr")
            //    //{
            //    //    paymentvoucher.debitAmount = Convert.ToDecimal(MyDrValue);
            //    //}
            //    //if (MyProperty == "Cr")
            //    //{
            //    //    paymentvoucher.creditAmount = Convert.ToDecimal(MyCrValue);
            //    //}
            //    //if (chequeNo != "" && chequeNo != null)
            //    //{
            //    //    paymentvoucher.ChequeNo = chequeNo;
            //    //    paymentvoucher.ChequeDate = Convert.ToDateTime(voucherChequedate);
            //    //    paymentvoucher.DrawnOn = drawnon;

            //    //}
            //    //else
            //    //{
            //    //    paymentvoucher.ChequeNo = "NULL";
            //    //    paymentvoucher.ChequeDate = Convert.ToDateTime("1900-01-01");
            //    //    paymentvoucher.DrawnOn = "NULL";
            //    //}




            //    //totalDebit = voucherItemList.Sum(item => item.debitAmount);
            //    //totalCredit = voucherItemList.Sum(item => item.debitAmount); //voucherItemList.Sum(item => item.creditAmount);


            //    //bool exists = voucherItemList.Exists(x => x.symbol == "Cr");

            //    //if (exists != true)
            //    //{
            //    //    MyProperty = "Cr";
            //    //    //double total = myList.Sum(item => item.Amount);
            //    //    MyCrValue = Convert.ToString(voucherItemList.Sum(item => item.debitAmount));
            //    //    //SelectedArticle.LEDGER_NAME = "";
            //    //    //SelectedString = "";
            //    //    MyDrValue = "";
            //    //    bankStatus = 0;
            //    //    chequeNo = "";
            //    //    drawnon = "";

            //    //    onDisable(MyProperty);
            //    //    await myref.FocusAsync();

            //    //}
            //    //else
            //    //{
            //    //    visibletext = 1;
            //    //    StateHasChanged();
            //    //    MyProperty = "";
            //    //    //SelectedArticle.LEDGER_NAME = "";
            //    //    SelectedString = "";
            //    //    MyDrValue = "";
            //    //    MyCrValue = "";
            //    //    bankStatus = 0;
            //    //    chequeNo = "";
            //    //    drawnon = "";

            //    //    await narrationref.FocusAsync();
            //    //}
            //}
        }
    }
    //public void Enter(KeyboardEventArgs e)
    //{
    //    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //    {
    //        // ...
    //        KeyPressed = "Key Pressed is " + this.Value;

    //        //amount = e.Key;
    //        paymentvoucher = new VoucherItem();
    //        paymentvoucher.symbol = MyProperty;
    //        paymentvoucher.particular = SelectedArticle.LEDGER_NAME;
    //        if (MyProperty == "Dr")
    //        {
    //            paymentvoucher.debitAmount = amount;
    //        }
    //        if (MyProperty == "Cr")
    //        {
    //            paymentvoucher.creditAmount = amount;
    //        }

    //        voucherItemList.Add(paymentvoucher);



    //    }
    //}
    //public class VoucherItem
    //{
    //    public string symbol { get; set; }
    //    public string particular { get; set; }
    //    public decimal debitAmount { get; set; }
    //    public decimal creditAmount { get; set; }
    //    public string ChequeNo { get; set; }
    //    //public DateTime ChequeDate { get; set; }
    //    public Nullable<DateTime> ChequeDate { get; set; }

    //    public string DrawnOn { get; set; }
    //}
    private async void GetDate(ChangeEventArgs change)
    {
        selected_date = change.Value.ToString();
        porderModel.PO_DATE = Convert.ToDateTime(selected_date).Day.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(selected_date).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(selected_date).Year;
    }

    private async void GetChequeDate(ChangeEventArgs change)
    {
        voucherChequedate = change.Value.ToString();

    }
    void CloseClicked() { UriHelper.NavigateTo("DailyPurchaseForProject"); }
    private void SelectItem(string item)
    {
        itemName = item;

    }
    private void SelectSupplierItem(string item)
    {
        supplierName = item;

    }
    public async void DeleteItem(string item)
    {
        var itemToRemove = voucherItemList.Single(r => r.ITEM_NAME == item);
        voucherItemList.Remove(itemToRemove);
        GetTotal();



        StateHasChanged();
    }
}
