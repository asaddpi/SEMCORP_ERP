
@page "/TestPage"
@layout CustomLayout
@inject HttpClient Http
@inject IToastService toastService
@inject IJSRuntime JSRuntime

<div class="testbox">
    <div class="tablearea">
        <table id="example" class="display" style="width:100%">
            <thead>
                <tr>
                    @*<th style="width:40px"></th>
                    <th style="width:40px"></th>*@
                    <td>Country</td>
                </tr>

            </thead>
            <tbody>
                @if (stockStatementList != null)
                {
                    foreach (var item in stockStatementList)
                    {
                        <tr>
                            @*<td style="text-align:center"><a style="color:red" @onclick=@(() => Delete(item.BRAND_ID))><span class="oi oi-trash"></span></a></td>
                            <td style="text-align:center"><a data-toggle="modal" data-target=".bd-example-modal-lg" href="#" @onclick=@(() => EditBrand(item.BRAND_ID))><span class="oi oi-pencil"></span></a></td>*@
                            <td>@item.strItemName</td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
</div>






@code {
    List<BrandModel> brandList = new List<BrandModel>();
    BrandModel brand = new BrandModel();
    List<RStockInformation> stockStatementList = new List<RStockInformation>();
    string submit = "Save";
    protected override async Task OnInitializedAsync()
    {
        await GetBrand();
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
    private async Task GetBrand()
    {
        brandList = await Http.GetJsonAsync<List<BrandModel>>(Utility.BaseUrl + "api/Setup/GetBrandList");
        stockStatementList = await Http.GetJsonAsync<List<RStockInformation>>(Utility.BaseUrl + "api/Purchase/GetStockSummery");
    }
    public async Task SaveBrand()
    {
        if (IsValidation_Brand() != true)
        {
            try
            {
                if (submit == "Save")
                {
                    brand.Operation_Type = 1;
                    var data = await Http.PostJsonAsync<BrandModel>(Utility.BaseUrl + "api/Setup/AddBrand", brand);
                    toastService.ShowSuccess("Insert Successfully!!!");
                }
                else if (submit == "Update")
                {
                    brand.Operation_Type = 2;
                    var data = await Http.PutJsonAsync<BrandModel>(Utility.BaseUrl + "api/Setup/UpdateBrand", brand);
                    toastService.ShowSuccess("Insert Successfully!!!");
                }
                submit = "Save";
                brand = new BrandModel();
            }
            catch (Exception ex)
            {

            }

        }
        await GetBrand();
    }
    private bool IsValidation_Brand()
    {
        bool flag = false;
        if (brand.BRAND_NAME == "" || brand.BRAND_NAME == string.Empty || brand.BRAND_NAME == null)
        {
            toastService.ShowWarning("Brand Name cannot be empty!");
            flag = true;
        }

        return flag;
    }
    private async Task Cancel()
    {
        brand = new BrandModel();
        submit = "Save";
    }
    private async Task Delete(int Id)
    {

        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
            return;

        await Http.DeleteAsync(Utility.BaseUrl + "api/Setup/DeleteBrand/" + Id);
        await GetBrand();
    }
    private async Task EditBrand(int Id)
    {
        submit = "Update";
        brand = new BrandModel();
        brand.BRAND_NAME = brandList.Find(x => x.BRAND_ID == Id).BRAND_NAME;
        brand.BRAND_ID = Id;
        brand.Operation_Type = 2;
    }
}
