@page "/ProjectCostList"
@layout CustomLayout
@inject HttpClient Http
@inject IToastService toastService
@inject IJSRuntime JSRuntime


<style>
    .date_select {
        width: 42%;
        /*display: inline-flex;*/
        padding: 10px;
        /*justify-content: center;*/
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 15px;
    }

        .date_select span {
            display: flex;
            gap: 5px;
            justify-content: center;
            align-items: center;
        }

        .date_select button {
            width: 8%;
            padding: 10px;
            background: #2196F3;
            color: white;
            font-size: 17px;
            border: 1px solid grey;
            border-left: none;
            cursor: pointer;
        }

    .top_button {
        height: 34px;
        width: 34px;
       /* display: flex;*/
        justify-content: center;
        align-items: center;
    }

    .display_total {
        text-align: right;
        margin-right: 43px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-end;
    }

    .table_width {
        width: 139px;
        text-align: left;
        font-size: 16px;
        padding: 8px;
    }

    table tbody tr {
        height: 35px;
        font-size: 13px;
    }

        table tbody tr td {
            padding-left: 5px;
        }
    .new-btn {
        font-size: 20px;
        text-align: right;
        padding-right: 40px;
        display: flex;
        justify-content: flex-end;
    }
</style>

<div class="card" style="width:50%">
    <div class="card-header">
        <h3>Project Cost List</h3>
    </div>
    <div class="date_select">
        <span>
            Project
            <select @onchange="PaymentTypeSelect" class="form-control">
                <option></option>
                @foreach (var item in paymentMediaTypeList)
                {
                <option value="@item.LEDGER_NAME">@item.LEDGER_NAME</option>
                }
            </select>


        </span>
        
            
        
        @*<button type="submit" @onclick="GetPurchaseByDate" class="top_button"><i class="fa fa-search"></i></button>
            <button type="submit" class="top_button"><i class="fa fa-print" @onclick="GetReport"></i></button>*@
    </div>
    <div class="new-btn">
        
        <a href="/ProjectCost" style="margin-top:10px">
            <i class="fa fa-plus"></i>
            <span>New</span>
        </a>
        @*</div>*@


    </div>
    <br />
    @*<div class="date_select">
            <button type="submit" class="top_button"><i class="fa fa-print" @onclick="GetStockSummery"></i></button>
        </div>*@

    <div class="testbox">
        <div class="tablearea">
            <table id="example" class="display" style="width:100%">
                <thead>
                    <tr>
                        @*<th style="width:40px"></th>
                            <th style="width:40px"></th>*@
                        <td>Item</td>
                        <td>Amount</td>

                    </tr>

                </thead>
                <tbody>
                    @if (projectCostList != null)
                    {
                        foreach (var item in projectCostList)
                        {
                    <tr>
                        @*<td style="text-align:center"><a style="color:red" @onclick=@(() => Delete(item.BRAND_ID))><span class="oi oi-trash"></span></a></td>
                            <td style="text-align:center"><a data-toggle="modal" data-target=".bd-example-modal-lg" href="#" @onclick=@(() => EditBrand(item.BRAND_ID))><span class="oi oi-pencil"></span></a></td>*@
                        <td>@item.COST_HEAD</td>
                        <td>@item.AMOUNT</td>


                    </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>
</div>




@code {
    List<StockSummeryReportModel> StockList = new List<StockSummeryReportModel>();
    List<RStockInformation> stockStatementList = new List<RStockInformation>();
    List<ProjectCostReportModel> projectCostList = new List<ProjectCostReportModel>();
    List<LedgerModel> paymentMediaTypeList = new List<LedgerModel>();
    string SelectedPaymentType = "";
    protected override async Task OnInitializedAsync()
    {
        //await GetBrand();
        //projectCostList = await Http.GetJsonAsync<List<ProjectCostReportModel>>(Utility.BaseUrl + "api/Purchase/GetProjectCostReport");
        paymentMediaTypeList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetCustomerProjectList");
        StateHasChanged();
        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");



        //ledgerGroupList = await Http.GetJsonAsync<List<LedgerGroupModel>>(Utility.BaseUrl + "api/Setup/GetLedgerGroup");



        //await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
    public async Task GetLedgerGroup()
    {
        //ledgerGroupList = await Http.GetJsonAsync<List<LedgerGroupModel>>(Utility.BaseUrl + "api/Setup/GetLedgerGroup");
        //primaryList = await Http.GetJsonAsync<List<PrimaryModel>>(Utility.BaseUrl + "api/Setup/GetPrimaryList");

    }
    private async Task GetBrand()
    {
        //StockList = await Http.GetJsonAsync<List<StockSummeryReportModel>>(Utility.BaseUrl + "api/Stock/GetStockSummryForProject");
        //StockList = await Http.GetJsonAsync<List<StockSummeryReportModel>>(Utility.BaseUrl + "api/Stock/SGetStockSummery");
        stockStatementList = new List<RStockInformation>();
        stockStatementList = await Http.GetJsonAsync<List<RStockInformation>>(Utility.BaseUrl + "api/Purchase/GetStockSummery");
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
    private async Task GetStockSummery()
    {
        //stockStatementList = new List<RStockInformation>();
        //stockStatementList = await Http.GetJsonAsync<List<RStockInformation>>(Utility.BaseUrl + "api/Purchase/GetStockSummery");
        //SessionData.From_date = fromdate;
        //SessionData.To_date = todate;
        SessionData.stockStatementListReport = stockStatementList;
        await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetstockStatement", "_blank");
    }
    async void PaymentTypeSelect(ChangeEventArgs e)
    {
        SelectedPaymentType = e.Value.ToString();
        projectCostList = await Http.GetJsonAsync<List<ProjectCostReportModel>>(Utility.BaseUrl + "api/Purchase/GetProjectCostReport/"+ SelectedPaymentType);
        
        StateHasChanged();

    }
}

