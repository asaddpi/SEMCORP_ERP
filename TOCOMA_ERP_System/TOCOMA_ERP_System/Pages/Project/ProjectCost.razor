@page "/ProjectCost"

@layout CustomLayout
@*@using Blazored.Typeahead*@
@inject HttpClient Http
@inject IToastService toastService
@inject IJSRuntime jsruntime
@inject NavigationManager UriHelper
<style>
    tbody tr td {
        /*border: none;*/
    }

    text {
        border: none;
        background-color: transparent;
        resize: none;
        outline: none;
    }

    table {
        border-collapse: collapse;
        margin: auto;
        /*background-color: #A4A4A4;*/
        /*border: 2px solid black;*/
        padding: 0;
    }

        table td {
            position: relative;
            text-align: center;
            /*border: 2px solid green;*/
            padding: 0;
            margin: 0;
        }
</style>
<div class="container">
    @*<EditForm Model="@ledger">*@
    <div class="card">
        <div class="card-header">Project Cost Entry</div>
        <div class="testbox">
            <div class="form">
                <div class="row">
                    <div class="col-25">
                        <label for="fname">Voucher No:</label>
                    </div>
                    <div class="col-75">
                        <input type="text" @bind-value="@accCompanyVoucherModel.COMP_REF_NO">
                    </div>
                </div>
                <div class="row">
                    <div class="col-25">
                        <label>Date:</label>
                    </div>
                    <div class="col-75">
                        <input type="date" id="today" value="@currentDate" format-value="dd-MM-yyyy" style="width:200px" @onchange="GetDate">
                    </div>
                </div>
                <div class="row">
                    <div class="col-25">
                        <label for="fname">Customer Name:</label>
                    </div>
                    <div class="col-75">
                        <select @onchange="CustomerSelect" class="form-control">
                            <option></option>
                            @foreach (var item in customerList)
                            {
                                <option value="@item.PROJECT_CODE">@item.CUSTOMER_NAME</option>
                            }
                        </select>
                        @*<input type="search" @bind="searchCustomer" @oninput="GetCustomerList" class="form-control" />
        <div class="autocom">
            @if (customer != null)
            {
                @foreach (var item in customer)
                {
                    if (item.ToUpper().Contains(searchCustomer.ToUpper()) && searchCustomer.Length > 1)
                    {
                        if (searchCustomer != "")
                        {
                            <section @onclick=@(() => selectedcustomer(item))>@item</section>
                        }
                        else
                        { <section></section>}
                    }
                }
            }

        </div>*@
                    </div>
                </div>

                <br />
                <div class="form-row">
                    <div class="form-group col-md-4">
                        <label for="inputCity">Particular</label>
                        <select @onchange="selectedledger" class="form-control">
                            <option></option>
                            @foreach (var item in ledgerList)
                            {
                                <option value="@item.LEDGER_NAME">@item.LEDGER_NAME</option>
                            }
                        </select>
                    </div>
                    <div class="form-group col-md-2">
                        <label for="inputState">Amount</label>
                        @*<input @bind-value="MyDrValue" @bind-value:event="oninput" @onkeyup="DoTheThing" @ref="myDr_ref" disabled="@isDrDisable" />*@
                        <input @bind-value="MyDrValue" />
                    </div>
                    <div class="form-group col-md-2">
                        <label for="inputZip">Payment By</label>
                        <select @onchange="PaymentTypeSelect" class="form-control">
                            <option></option>
                            @foreach (var item in paymentMediaTypeList)
                            {
                                <option value="@item.LEDGER_NAME">@item.LEDGER_NAME</option>
                            }
                        </select>
                    </div>

                </div>
                <div class="form-row">
                    <div class="form-group col-md-8">
                        <label for="inputCity">Narration</label>
                        <input type="text" @ref="narrationref" @bind-value="@narration" />
                    </div>
                    
                    

                </div>
                <br />
                
            </div>


        </div>
        <div class="btn-block">
            <button type="submit" style="width:120px;margin-right:10px" @onclick="@SavePayment">Save</button>
            <button type="button" style="width:90px" class="btn btn-danger" @onclick="CloseClicked">Close</button>
        </div>
    </div>
    @*</EditForm>*@
</div>


@*--------Midal-----------*@
<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-body">
                <table>
                    <tbody>
                        <tr><td>Asaduzzaman</td></tr>
                        <tr><td>Asaduzzaman</td></tr>
                        <tr><td>Asaduzzaman</td></tr>
                        <tr><td>Asaduzzaman</td></tr>
                        <tr><td>Asaduzzaman</td></tr>
                        <tr><td>Asaduzzaman</td></tr>
                        <tr><td>Asaduzzaman</td></tr>
                        @*@foreach (var item in itemList)
                            {
                                <tr>
                                    <td>@item</td>
                                </tr>
                            }*@

                    </tbody>
                </table>
            </div>

        </div>
    </div>
</div>
@code {
    LedgerModel ledger = new LedgerModel();
    List<LedgerModel> ledgerList = new List<LedgerModel>();
    List<LedgerModel> paymentMediaTypeList = new List<LedgerModel>();
    List<BranchModel> branchList = new List<BranchModel>();
    string MyProperty;
    List<string> itemList = new List<string>();
    List<CountryModel> countryList = new List<CountryModel>();
    private LedgerModel SelectedArticle;
    private string newTodo;
    List<VoucherItem> voucherItemList = new List<VoucherItem>();
    VoucherItem paymentvoucher = new VoucherItem();
    ACC_COMPANY_VOUCHER_MODEL accCompanyVoucherModel = new ACC_COMPANY_VOUCHER_MODEL();
    List<ACC_VOUCHER_MODEL> paymentVoucherDetails = new List<ACC_VOUCHER_MODEL>();
    ACC_VOUCHER_MODEL voucherDetails = new ACC_VOUCHER_MODEL();
    List<CustomerModel> customerList = new List<CustomerModel>();
    List<string> itemnameList;
    List<string> customer;
    public string searchCustomer { get; set; } = "";
    decimal amount;
    string KeyPressed = "";
    public string Value { get; set; }
    public string MyDrValue { get; set; }
    public string MyCrValue { get; set; }
    private ElementReference myref;
    private ElementReference myDr_ref;
    private ElementReference myCr_ref;
    private ElementReference narrationref;
    private bool isDrDisable { get; set; }
    private bool isCrDisable { get; set; }
    decimal totalDebit;
    decimal totalCredit;
    int visibletext;
    string BranchName;
    string voucherDate;
    string narration;
    int bankStatus = 0;
    List<string> templates = new List<string>() { "Maui", "Hawaii", "Niihau", "Kauai", "Kahoolawe" };
    string SelectedString = "Maui";
    string SelectedCustomer = "Maui";
    string SelectedLedger = "Maui";
    string SelectedPaymentType = "";
    string parent;
    string chequeNo;
    string drawnon;
    string voucherChequedate = "";
    string currentDate;
    string selected_date;



    protected override async Task OnInitializedAsync()
    {
        MyProperty = "Dr";
        onDisable(MyProperty);
        accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 1);
        customerList = await Http.GetJsonAsync<List<CustomerModel>>(Utility.BaseUrl + "api/Customer/GetCustomerProjectList");
        customer = customerList.Select(f => f.CUSTOMER_NAME).Distinct().ToList();
        //await GetCountry();
        await GetLedger();
        await GetBranch();
        currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');
        StateHasChanged();

    }
    async void selectedledger(ChangeEventArgs e)
    {
        SelectedString = e.Value.ToString();
        //if (SelectedString == "Brack Bank") { bankStatus = 1; }
        //else { bankStatus = 0; }
        //if (MyProperty == "Dr")
        //{ await myDr_ref.FocusAsync(); }
        //else if (MyProperty == "Cr")
        //{ await myCr_ref.FocusAsync(); }
    }
    async void PaymentTypeSelect(ChangeEventArgs e)
    {
        SelectedPaymentType = e.Value.ToString();
        //if (SelectedString == "Brack Bank") { bankStatus = 1; }
        //else { bankStatus = 0; }
        //if (MyProperty == "Dr")
        //{ await myDr_ref.FocusAsync(); }
        //else if (MyProperty == "Cr")
        //{ await myCr_ref.FocusAsync(); }
    }
    async void CustomerSelect(ChangeEventArgs e)
    {
        SelectedCustomer = e.Value.ToString();
        //if (SelectedString == "Brack Bank") { bankStatus = 1; }
        //else { bankStatus = 0; }
        //if (MyProperty == "Dr")
        //{ await myDr_ref.FocusAsync(); }
        //else if (MyProperty == "Cr")
        //{ await myCr_ref.FocusAsync(); }
    }
    public async Task GetBranch()
    {
        branchList = await Http.GetJsonAsync<List<BranchModel>>(Utility.BaseUrl + "api/Setup/GetBranchList");
        if (branchList.Count > 0)
        { BranchName = branchList.FirstOrDefault().BRANCH_NAME; }


    }
    private async Task GetLedger()
    {
        ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");
        paymentMediaTypeList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetPaymentMediaTypeList");
    }
    //private async Task GetCountry()
    //{
    //    countryList = await Http.GetJsonAsync<List<CountryModel>>(Utility.BaseUrl + "api/Setup/GetCountry");
    //}


    private async Task<IEnumerable<LedgerModel>> SearchLedger(string searchText)
    {


        return await Task.FromResult(ledgerList.Where(x => x.LEDGER_NAME.ToLower().Contains(searchText.ToLower())).ToList());

        //return await Task.FromResult(ledgerList);
    }
    private async Task<IEnumerable<LedgerModel>> KeyPressLedger(string searchText)
    {
        return await Task.FromResult(ledgerList.Where(x => x.LEDGER_NAME.ToLower().Contains(searchText.ToLower())).ToList());


    }
    public async Task SavePayment()
    {

        ////----------Account Master Data
        string d = "";
        string m = "";
        string y = "";
        try
        {
            if (selected_date == "" || selected_date == null)
            {
                string date = Convert.ToDateTime(currentDate).Day.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(currentDate).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(currentDate).Year;
                d = date.Substring(0, 2);
                m = date.Substring(3, 2);
                y = date.Substring(6, 4);
            }
            else
            {
                d = currentDate.Substring(0, 2);
                m = currentDate.Substring(3, 2);
                y = currentDate.Substring(6, 4);
            }
            DateTime dd = Convert.ToDateTime(y + "-" + m + "-" + d);
            //+ "-" + Convert.ToDateTime(d).Month + "-" + Convert.ToDateTime(d).Day); ;
            //DateTime dtt = Convert.ToDateTime(dd);
            accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 3);
            accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(dd);
            accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
            accCompanyVoucherModel.LEDGER_NAME = SelectedString; //vendorList.Find(x => x.VENDOR_ID == purchaseOrderModel.VENDOR_ID).VENDOR_NAME;
            accCompanyVoucherModel.COMP_VOUCHER_AMOUNT = Convert.ToDecimal(MyDrValue);
            accCompanyVoucherModel.COMP_VOUCHER_ADD_AMOUNT = 0;
            accCompanyVoucherModel.COMP_VOUCHER_LESS_AMOUNT = 0;
            accCompanyVoucherModel.COMP_VOUCHER_NET_AMOUNT = Convert.ToDecimal(MyDrValue);
            accCompanyVoucherModel.COMP_VOUCHER_PROCESS_AMOUNT = 0;
            accCompanyVoucherModel.COMP_VOUCHER_NARRATION = "";
            accCompanyVoucherModel.COMP_VOUCHER_TYPE = 3;
            accCompanyVoucherModel.ENTRYBY = "Asaduzzaman";
            accCompanyVoucherModel.UPDATEBY = "Asaduzzaman";
            accCompanyVoucherModel.COMPANY_ID = SelectedCustomer;
            ////-------------------------------

            ////-----Acc Voucher Details

            //// Create a List of objects
            List<ACC_VOUCHER_MODEL> voucherItem = new List<ACC_VOUCHER_MODEL>
        {
                        new ACC_VOUCHER_MODEL {
                              COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                              ,VOUCHER_REF_KEY=""
                              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                              ,COMP_VOUCHER_TYPE=3
                              ,LEDGER_NAME=SelectedString//vendorList.Find(x => x.VENDOR_ID == purchaseOrderModel.VENDOR_ID).VENDOR_NAME
                              ,VOUCHER_DEBIT_AMOUNT=Convert.ToDecimal(MyDrValue)
                                      ,VOUCHER_CREDIT_AMOUNT=0
                                      ,VOUCHER_ADD_AMOUNT=0
                                      ,VOUCHER_LESS_AMOUNT=0
                                      ,VOUCHER_TOBY="Dr"
                                      ,VOUCHER_FC_DEBIT_AMOUNT=0
                                      ,VOUCHER_FC_CREDIT_AMOUNT = 0
                                },
                        new ACC_VOUCHER_MODEL {
                            COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                              ,VOUCHER_REF_KEY=""
                              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                              ,COMP_VOUCHER_TYPE=3
                              ,LEDGER_NAME=SelectedPaymentType
                              ,VOUCHER_DEBIT_AMOUNT=0
                              ,VOUCHER_CREDIT_AMOUNT=Convert.ToDecimal(MyDrValue)
                              ,VOUCHER_ADD_AMOUNT=0
                              ,VOUCHER_LESS_AMOUNT=0
                              ,VOUCHER_TOBY="Cr"
                              ,VOUCHER_FC_DEBIT_AMOUNT=0
                              ,VOUCHER_FC_CREDIT_AMOUNT = 0

                        }
                            };
            accCompanyVoucherModel.accVoucherList = voucherItem;
            var data = await Http.PostJsonAsync<ACC_COMPANY_VOUCHER_MODEL>(Utility.BaseUrl + "api/Transection/AddPaymentVoucher", accCompanyVoucherModel);
            //porderModel.acc_com_VoucherModel = accCompanyVoucherModel;
            //porderModel.acc_Voucher_Model = voucherItem;

        }
        catch (Exception ex)
        {

        }


    }

    public async Task SavePaymentVoucher()
    {
        //if (IsValidation() != true)
        //{
        bool exists = voucherItemList.Exists(x => x.symbol == "Cr");
        if (exists != true)
        {
            toastService.ShowWarning("Please Add Credit Info In List");
            return;
        }
        else if (accCompanyVoucherModel.COMP_REF_NO == "")
        {
            toastService.ShowWarning("Please Add Voucher No.");
            return;
        }
        else
        {
            if (!await jsruntime.InvokeAsync<bool>("confirm", $"Do you want to save ?"))
                return;


            try
            {

                if (selected_date == "" || selected_date == null)
                { accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(currentDate); }
                accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
                accCompanyVoucherModel.LEDGER_NAME = voucherItemList.FirstOrDefault().particular;
                accCompanyVoucherModel.COMP_VOUCHER_AMOUNT = totalDebit;
                accCompanyVoucherModel.COMP_VOUCHER_ADD_AMOUNT = totalDebit;
                accCompanyVoucherModel.COMP_VOUCHER_LESS_AMOUNT = totalDebit;
                accCompanyVoucherModel.COMP_VOUCHER_NET_AMOUNT = totalDebit;
                accCompanyVoucherModel.COMP_VOUCHER_PROCESS_AMOUNT = totalDebit;
                accCompanyVoucherModel.COMP_VOUCHER_NARRATION = narration;
                accCompanyVoucherModel.COMP_VOUCHER_TYPE = 1;
                accCompanyVoucherModel.ENTRYBY = "Asaduzzaman";
                accCompanyVoucherModel.UPDATEBY = "Asaduzzaman";




                //var data = await Http.PostJsonAsync<ACC_COMPANY_VOUCHER_MODEL>(Utility.BaseUrl + "api/Transection/AddPaymentVoucher", accCompanyVoucherModel);
                foreach (var item in voucherItemList)
                {
                    voucherDetails = new ACC_VOUCHER_MODEL();
                    voucherDetails.COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO;
                    voucherDetails.VOUCHER_REF_KEY = "";
                    voucherDetails.BRANCH_ID = accCompanyVoucherModel.BRANCH_ID;
                    voucherDetails.COMP_VOUCHER_DATE = accCompanyVoucherModel.COMP_VOUCHER_DATE;
                    voucherDetails.COMP_VOUCHER_TYPE = 1;
                    voucherDetails.LEDGER_NAME = item.particular;
                    voucherDetails.VOUCHER_DEBIT_AMOUNT = item.debitAmount;
                    voucherDetails.VOUCHER_CREDIT_AMOUNT = item.creditAmount;
                    voucherDetails.VOUCHER_ADD_AMOUNT = item.creditAmount;
                    voucherDetails.VOUCHER_LESS_AMOUNT = item.creditAmount;
                    voucherDetails.VOUCHER_TOBY = item.symbol;
                    voucherDetails.VOUCHER_FC_DEBIT_AMOUNT = 0;
                    voucherDetails.VOUCHER_FC_CREDIT_AMOUNT = 0;
                    if (item.ChequeNo != "" && item.ChequeNo != null && item.ChequeNo != "NULL")
                    {
                        voucherDetails.VOUCHER_CHEQUE_NUMBER = item.ChequeNo;
                        voucherDetails.VOUCHER_CHEQUE_DATE = item.ChequeDate;
                        voucherDetails.VOUCHER_CHEQUE_DRAWN_ON = item.DrawnOn;
                    }
                    paymentVoucherDetails.Add(voucherDetails);
                    accCompanyVoucherModel.accVoucherList.Add(voucherDetails);
                }
                //var voucher = await Http.PostJsonAsync<List<ACC_VOUCHER_MODEL>>(Utility.BaseUrl + "api/Transection/AddPaymentVoucherDetails", paymentVoucherDetails);
                var data = await Http.PostJsonAsync<ACC_COMPANY_VOUCHER_MODEL>(Utility.BaseUrl + "api/Transection/AddPaymentVoucher", accCompanyVoucherModel);
                if (data.status == true)
                {
                    toastService.ShowSuccess("Save Successfully!!!");
                    await LoadPage();
                }
                else { toastService.ShowError("Not Save : " + data.ErrorMessage); }

            }
            catch (Exception ex)
            {

            }
        }


    }
    private async Task GetCustomerList(ChangeEventArgs change)
    {
        searchCustomer = change.Value.ToString();
        customer = customerList.Select(f => f.CUSTOMER_NAME).Distinct().ToList();
    }
    //public async Task selectedcustomer(string ff)
    //{
    //    searchCustomer = ff;
    //    StateHasChanged();
    //}
    private async Task LoadPage()
    {
        await GetVoucherNo();
        voucherItemList = new List<VoucherItem>();
        visibletext = 0;
        MyProperty = "Dr";
        totalDebit = 0;
        totalCredit = 0;
        onDisable(MyProperty);
        StateHasChanged();
    }
    private async Task GetVoucherNo()
    {
        accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 1);
    }
    private void Keypress(KeyboardEventArgs args)
    {
        string value;
        value = args.Key;
        if (value == "c" || value == "C")
        { MyProperty = "Cr"; }
        else if (value == "d" || value == "D")
        { MyProperty = "Dr"; }
        StateHasChanged();
        onDisable(MyProperty);
    }
    private void onDisable(string property)
    {
        if (property == "Dr")
        {
            this.isDrDisable = false;
            this.isCrDisable = true;
            MyCrValue = "";
        }
        else if (property == "Cr")
        {
            this.isCrDisable = false;
            this.isDrDisable = true;
        }

    }

    private async Task GetSelectedValue(ChangeEventArgs change)
    {
        if (change.Value.ToString() == "Bank Accounts") { bankStatus = 1; }
    }
    //private void Enter(KeyboardEventArgs e)
    //private void Enter()
    //{
    //    //if (e.Key == "Enter")
    //    {
    //        if (!string.IsNullOrWhiteSpace(newTodo))
    //        {
    //            //todos.Add(new TodoItem { Title = newTodo });
    //            //newTodo = string.Empty;
    //        }
    //    }
    //}
    private async void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {

            paymentvoucher = new VoucherItem();
            paymentvoucher.symbol = MyProperty;
            paymentvoucher.particular = SelectedString; //SelectedArticle.LEDGER_NAME;
            if (paymentvoucher.particular == "" || paymentvoucher.particular == null)
            {
                toastService.ShowWarning("Please Add Particular");
            }
            else
            {
                if (MyProperty == "Dr")
                {
                    paymentvoucher.debitAmount = Convert.ToDecimal(MyDrValue);
                }
                if (MyProperty == "Cr")
                {
                    paymentvoucher.creditAmount = Convert.ToDecimal(MyCrValue);
                }
                if (chequeNo != "" && chequeNo != null)
                {
                    paymentvoucher.ChequeNo = chequeNo;
                    paymentvoucher.ChequeDate = Convert.ToDateTime(voucherChequedate);
                    paymentvoucher.DrawnOn = drawnon;

                }
                else
                {
                    paymentvoucher.ChequeNo = "NULL";
                    paymentvoucher.ChequeDate = Convert.ToDateTime("1900-01-01");
                    paymentvoucher.DrawnOn = "NULL";
                }


                voucherItemList.Add(paymentvoucher);

                totalDebit = voucherItemList.Sum(item => item.debitAmount);
                totalCredit = voucherItemList.Sum(item => item.debitAmount); //voucherItemList.Sum(item => item.creditAmount);


                bool exists = voucherItemList.Exists(x => x.symbol == "Cr");

                if (exists != true)
                {
                    MyProperty = "Cr";
                    //double total = myList.Sum(item => item.Amount);
                    MyCrValue = Convert.ToString(voucherItemList.Sum(item => item.debitAmount));
                    //SelectedArticle.LEDGER_NAME = "";
                    //SelectedString = "";
                    MyDrValue = "";
                    bankStatus = 0;
                    chequeNo = "";
                    drawnon = "";

                    onDisable(MyProperty);
                    await myref.FocusAsync();

                }
                else
                {
                    visibletext = 1;
                    StateHasChanged();
                    MyProperty = "";
                    //SelectedArticle.LEDGER_NAME = "";
                    SelectedString = "";
                    MyDrValue = "";
                    MyCrValue = "";
                    bankStatus = 0;
                    chequeNo = "";
                    drawnon = "";

                    await narrationref.FocusAsync();
                }
            }
        }
    }

    private async void GetDate(ChangeEventArgs change)
    {
        selected_date = change.Value.ToString();
        accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(selected_date);
    }
    private async void GetChequeDate(ChangeEventArgs change)
    {
        voucherChequedate = change.Value.ToString();

    }
    void CloseClicked() { UriHelper.NavigateTo("PaymentVoucherList"); }

}