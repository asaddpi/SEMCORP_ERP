@page "/Website/NewsAndEvents"
@layout WebsiteAdminLayout
@inject HttpClient Http
@inject IToastService toastService
@inject IWebHostEnvironment env
@using System.IO
@using System.Net.Http.Headers;
@inject IJSRuntime JSRuntime


<div class="card text-left" style="height:100%">
    <div class="card-header">
        <h4>News & Events</h4>
    </div>
    <div class="card-body">
        <EditForm Model="@item" style="margin-left:10px;margin-right:10px">

            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Type</label>
                <div class="col-sm-10">
                    <select  class="form-control">
                        <option>--Type--</option>
                        <option>News</option>
                        <option>Events</option>

                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Title</label>
                <div class="col-sm-10">
                    <InputText @bind-Value="@item.REF_PROJECT_TYPE_NAME" type="text" class="form-control" placeholder="News or Event Title" />
                </div>
            </div>

            <br />
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Description</label>
                <div class="col-sm-10">
                    <BlazoredTextEditor @ref="@shortDescription">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
            </div>
            <br />
            <br />
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Image</label>
                <div class="col-sm-10">
                    <InputFile OnChange="@SelectItemImage" multiple />
                    @foreach (var itmImage in itemimageUrls)
                    {
                        <img src="@itmImage" />
                    }
                </div>
            </div>
            <br />
            <hr />



        </EditForm>
        <br />
        <br />
        <div class="form-group row">
            <label for="colFormLabel" class="col-sm-2 col-form-label"></label>
            <div class="col-sm-10">
                <button class="btn btn-danger" style="margin-right:20px;width:100px">Cancel</button>
                <button class="btn btn-success" style="width:100px" @onclick="SaveProduct">@submit</button>
            </div>
        </div>

    </div>
    @*<div class="card-footer text-muted fixed-bottom" style="background-color: lightgray;text-align:center">
            <button class="btn btn-danger" style="margin-right:20px;width:100px">Cancel</button>
            <button class="btn btn-success" style="width:100px" @onclick="SaveProduct">@submit</button>
        </div>*@
</div>
<br />

<div class="testbox">
    <div class="tablearea">
        <table id="example" class="display" style="width:100%">
            <thead>
                <tr>
                    <th style="width:40px"></th>
                    <th style="width:40px"></th>
                    <td style="width:80%">Project Type</td>
                    <td></td>
                </tr>

            </thead>
            <tbody>
                @if (itemList != null)
                {
                    foreach (var item in itemList)
                    {
                        <tr>
                            <td style="text-align:center"><a style="color:red" @onclick=@(() => Delete(item.REF_PROJECT_TYPE_ID))><span class="oi oi-trash"></span></a></td>
                            <td style="text-align:center"><a data-toggle="modal" data-target=".bd-example-modal-lg" href="#" @onclick=@(() => EditBrand(item.REF_PROJECT_TYPE_ID))><span class="oi oi-pencil"></span></a></td>
                            <td>@item.REF_PROJECT_TYPE_NAME</td>
                            <td>
                                <img src="@item.REF_PROJECT_TYPE_IMAGE" style="width:100px;height:100px" />
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
</div>

@code {
    BlazoredTextEditor shortDescription;
    BlazoredTextEditor longDescription;
    string itemname = "";
    List<string> itemimageUrls = new List<string>();
    List<string> itemtdsUrls = new List<string>();
    List<string> itemimage = new List<string>();
    List<string> itemTDS = new List<string>();
    List<string> itemSDS = new List<string>();
    List<string> itemFlyer = new List<string>();
    List<string> itemCertificate = new List<string>();
    List<string> ApplicationimageUrls = new List<string>();
    List<ItemEntity> productList = new List<ItemEntity>();
    List<ItemCategory> categoryList = new List<ItemCategory>();
    IReadOnlyList<IBrowserFile> selectedFiles;
    IReadOnlyList<IBrowserFile> selectedItemImage;
    IReadOnlyList<IBrowserFile> selectedTDS;
    IReadOnlyList<IBrowserFile> selectedSDS;
    IReadOnlyList<IBrowserFile> selectedFlayer;
    IReadOnlyList<IBrowserFile> selectedCertificate;
    ReferenceProjectTypeModel item = new ReferenceProjectTypeModel();
    ItemEntity relatedItem = new ItemEntity();

    List<ReferenceProjectTypeModel> itemList = new List<ReferenceProjectTypeModel>();


    List<ImageFile> filesBase64 = new List<ImageFile>();
    string categoryName;
    string code;
    string path_withfile = "";
    string saveimageurl = "";

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 5000;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    // ImageFile.cs


    Stream fileStream = null;
    ElementReference elementReference;
    string fileName = string.Empty;
    string size = string.Empty;
    string type = string.Empty;
    string submit = "Save";

    public class ImageFile
    {
        public string base64data { get; set; }
        public string contentType { get; set; }
        public string fileName { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        await GetBrand();
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");

    }
    private async Task GetBrand()
    {
        itemList = await Http.GetJsonAsync<List<ReferenceProjectTypeModel>>(Utility.BaseUrl + "api/ReferenceProject/GetReferenceProjectType");
    }

    private async Task SelectItemImage(InputFileChangeEventArgs e)
    {
        selectedItemImage = e.GetMultipleFiles();

        foreach (var imageFile in selectedItemImage)
        {
            //var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var resizedImage = await imageFile.RequestImageFileAsync(imageFile.ContentType, 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            //var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            itemimageUrls.Add(imgData);

            //

            //string base64String = "";
            //await using MemoryStream fs = new MemoryStream();
            //await imageFile.OpenReadStream(maxAllowedSize: 104857645125).CopyToAsync(fs);
            //byte[] somBytes = GetBytes(fs);
            //base64String = Convert.ToBase64String(somBytes, 0, somBytes.Length);
            //System.Diagnostics.Debug.Print("Imatge 64: " + base64String + Environment.NewLine);
            //itemimageUrls.Add(base64String);
        }

        this.StateHasChanged();
    }




    private async Task SelectApplicationImage(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();

        foreach (var imageFile in selectedFiles)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            ApplicationimageUrls.Add(imgData);

        }
        this.StateHasChanged();
    }
    public static byte[] GetBytes(Stream stream)
    {
        var bytes = new byte[stream.Length];
        stream.Seek(0, SeekOrigin.Begin);
        stream.ReadAsync(bytes, 0, bytes.Length);
        stream.Dispose();
        return bytes;
    }
    public async Task SaveProduct()
    {
        //string url = "https://localhost:44381/";
        //EmployeeModel empModel = new EmployeeModel();
        //empModel.EMPLOYEE_NAME = itemimageUrls.FirstOrDefault();
        ///var response = await Http.PostAsync($"{url}/Partners/SaveImage", content);
        //var response = await Http.PostJsonAsync<EmployeeModel>($"{url}/Partners/SaveImage", empModel);
        if (IsValidation() != true)
        {

            bool IsExistProduct = await Http.GetJsonAsync<bool>(Utility.BaseUrl + "api/ReferenceProjectType/GetIsItemExist/" + item.REF_PROJECT_TYPE_NAME);
            if (IsExistProduct != true)
            {
                try
                {

                    if (selectedItemImage != null)
                    {
                        foreach (var file in selectedItemImage)
                        {
                            string p = "";
                            path_withfile = $"{env.WebRootPath}\\images\\WebsiteImage\\ProjectType\\{code + "_" + file.Name}";
                            p = env.WebRootPath;
                            saveimageurl = path_withfile.Replace(p, "");
                            var path2 = $"{env.WebRootPath}\\images\\WebsiteImage\\ProjectType\\{code + "_" + file.Name}";
                            await using FileStream fs = new(path2, FileMode.Create);
                            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                            fs.Close();
                        }
                    }
                    item.REF_PROJECT_TYPE_IMAGE = saveimageurl;
                    item.OPERATION_TYPE = 1;


                    var data = await Http.PostJsonAsync<ReferenceProjectTypeModel>(Utility.BaseUrl + "api/ReferenceProjectType", item);


                    toastService.ShowSuccess(" Save Successfully!!!");
                    ClearData();
                    await GetBrand();
                }
                catch (Exception ex)
                {
                    toastService.ShowError(ex.Message);
                }
            }
        }
    }



    async Task Upload1()
    {
        //var url = "http://localhost/api/v1/yourendpointhere";
        var filePath = @"C:\inetpub\wwwroot\tocoma_erp_system\wwwroot\images\Products\0042_WhatsApp Image 2022-07-03 at 10.20.37 AM.jpeg";
        var url = "http://demo.tocoma.co/webroot/Content/images/aboutus";
        foreach (var file in selectedItemImage)
        {
            //string path = Path.Combine(file.Name);
            //var filePath = Path.Combine(file.Name);
            //var filePath = Path.GetFullPath("wwwroot\\Images\\") + file.FileInfo.Name;
            //var filePath = $"{env.WebRootPath}\\{file.Name}";
            HttpClient httpClient = new HttpClient();
            MultipartFormDataContent form = new MultipartFormDataContent();

            FileStream fs = File.OpenRead(filePath);
            var streamContent = new StreamContent(fs);

            var imageContent = new ByteArrayContent(streamContent.ReadAsByteArrayAsync().Result);
            imageContent.Headers.ContentType = MediaTypeHeaderValue.Parse("multipart/form-data");

            form.Add(imageContent, "image", Path.GetFileName(filePath));
            var response = httpClient.PostAsync(url, form).Result;


            var content = new MultipartFormDataContent();

            form.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            form.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", file.Name);
            //var response = await Http.PostAsync($"{url}/Partners/SaveImage", content);
            var response1 = await Http.PostAsync($"{url}", form);
        }


    }


    async Task UploadFileAsync()
    {

        string url = "http://demo.tocoma.co";
        foreach (var file in selectedItemImage)
        {

            var root = "\\demo.tocoma.co";
            var folder = @"\webroot\Content\images\aboutus";

            string path = Path.Combine(root, folder, file.Name);


            await using FileStream fs = new(path, FileMode.Create); //This line throws the error
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);



            //var path2 = $"{url}\\webroot\\Content\\images\\aboutus\\{code + "_" + file.Name}";
            var path2 = $"{url}/webroot/Content/images/aboutus/{code + "_" + file.Name}";
            await using FileStream fs1 = new(path2, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs1);
            // await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            fs1.Close();
        }




        var content = new MultipartFormDataContent();

        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        content.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", fileName);
        //var response = await Http.PostAsync($"{url}/Partners/SaveImage", content);
        var response = await Http.PostAsync($"{url}/webroot/Content/images/aboutus", content);
    }


    private bool IsValidation()
    {
        bool flag = false;
        if (item.REF_PROJECT_TYPE_NAME == "" || item.REF_PROJECT_TYPE_NAME == string.Empty || item.REF_PROJECT_TYPE_NAME == null)
        {
            toastService.ShowWarning("Type Name cannot be empty!");
            flag = true;
        }


        return flag;
    }
    private void ClearData()
    {
        item.REF_PROJECT_TYPE_NAME = "";
        itemimageUrls = new List<string>();
        item = new ReferenceProjectTypeModel();

        StateHasChanged();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //selectedFiles = e.GetMultipleFiles();
        isLoading = true;
        loadedFiles.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                loadedFiles.Add(file);
                selectedFiles = e.GetMultipleFiles();

                var trustedFileNameForFileStorage = Path.GetRandomFileName();

                //var path = Path.Combine(env.ContentRootPath,env.EnvironmentName);

                var path = Path.Combine(env.ContentRootPath + "\\wwwroot\\images\\File\\TDS", file.Name);

                //var path = $"{env.WebRootPath}\\File\\TDS\\{file.Name}";
                //var path = @"C:\Users\Administrator\Downloads\"+file.Name;
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                itemTDS.Add(file.Name);
                selectedTDS = selectedFiles;
                selectedFiles = null;
            }
            catch (Exception ex)
            {
                //Logger.LogError("File: {Filename} Error: {Error}",
                //    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
    private async Task Delete(int Id)
    {

        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
            return;

        await Http.DeleteAsync(Utility.BaseUrl + "api/ReferenceProjectType/DeleteRefProjectType/" + Id);
        await GetBrand();
    }
    private async Task EditBrand(int Id)
    {
        submit = "Update";
        item = new ReferenceProjectTypeModel();
        item.REF_PROJECT_TYPE_NAME = itemList.Find(x => x.REF_PROJECT_TYPE_ID == Id).REF_PROJECT_TYPE_NAME;
        item.REF_PROJECT_TYPE_ID = Id;
        item.OPERATION_TYPE = 2;
    }

}

