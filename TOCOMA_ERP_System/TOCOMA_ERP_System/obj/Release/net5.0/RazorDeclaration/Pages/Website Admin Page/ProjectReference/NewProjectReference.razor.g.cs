// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Pages.Website_Admin_Page.ProjectReference
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models.WebsiteModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Website Admin Page\ProjectReference\NewProjectReference.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Website Admin Page\ProjectReference\NewProjectReference.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Website Admin Page\ProjectReference\NewProjectReference.razor"
using System.Net.Http.Headers;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(WebsiteAdminLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/Website/NewProjectReference")]
    public partial class NewProjectReference : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 231 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Website Admin Page\ProjectReference\NewProjectReference.razor"
       
    clsReferenceProject referenceProject = new clsReferenceProject();
    List<ReferenceProjectTypeModel> projectTypeList = new List<ReferenceProjectTypeModel>();
    //------------
    BlazoredTextEditor shortDescription;
    BlazoredTextEditor longDescription;
    string itemname = "";
    List<string> itemimageUrls = new List<string>();
    List<string> itemtdsUrls = new List<string>();
    List<string> itemimage = new List<string>();
    List<string> itemTDS = new List<string>();
    List<string> itemSDS = new List<string>();
    List<string> itemFlyer = new List<string>();
    List<string> itemCertificate = new List<string>();
    List<string> ApplicationimageUrls = new List<string>();
    List<ItemEntity> productList = new List<ItemEntity>();
    List<ItemCategory> categoryList = new List<ItemCategory>();
    IReadOnlyList<IBrowserFile> selectedFiles;
    IReadOnlyList<IBrowserFile> selectedItemImage;
    IReadOnlyList<IBrowserFile> selectedTDS;
    IReadOnlyList<IBrowserFile> selectedSDS;
    IReadOnlyList<IBrowserFile> selectedFlayer;
    IReadOnlyList<IBrowserFile> selectedCertificate;
    ItemEntity item = new ItemEntity();
    ItemEntity relatedItem = new ItemEntity();

    List<ItemEntity> itemList = new List<ItemEntity>();
    List<CountryModel> CountryList = new List<CountryModel>();
    List<UnitModel> unitList = new List<UnitModel>();
    List<BrandModel> brandList = new List<BrandModel>();
    List<ColorModel> colorList = new List<ColorModel>();
    List<ItemApplicationAreaModel> itemApplicationList = new List<ItemApplicationAreaModel>();
    ItemApplicationAreaModel relatedApp = new ItemApplicationAreaModel();
    List<ItemApplicationAreaModel> SelectedRelatedApplicationList = new List<ItemApplicationAreaModel>();
    List<ItemEntity> relatedItemList = new List<ItemEntity>();
    List<ItemSewstivenessModel> itemSewstiveness = new List<ItemSewstivenessModel>();
    List<ItemForm_Appearance> itemForm_Appearances = new List<ItemForm_Appearance>();
    List<ImageFile> filesBase64 = new List<ImageFile>();
    string categoryName;
    string code;
    string path_withfile = "";
    string saveimageurl = "";

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 5000;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    // ImageFile.cs


    Stream fileStream = null;
    ElementReference elementReference;
    string fileName = string.Empty;
    string size = string.Empty;
    string type = string.Empty;

    public class ImageFile
    {
        public string base64data { get; set; }
        public string contentType { get; set; }
        public string fileName { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        await GetItemCategory();
        await GetItemList();
        await GetUnit();
        await GetCountry();
        await GetBrand();
        await GetColor();
        await GetAreaOfApplication();
        await GetItemSewstiveness();
        await GetItemForm_Appearance();

    }

    private async Task GetItemForm_Appearance()
    {
        itemForm_Appearances = await Http.GetJsonAsync<List<ItemForm_Appearance>>(Utility.BaseUrl + "api/Setup/GetItemForm_Appearance");
    }
    private async Task GetItemSewstiveness()
    {
        itemSewstiveness = await Http.GetJsonAsync<List<ItemSewstivenessModel>>(Utility.BaseUrl + "api/Setup/GetItemSewstiveness");
    }
    private async Task GetItemCategory()
    {
        projectTypeList = await Http.GetJsonAsync<List<ReferenceProjectTypeModel>>(Utility.BaseUrl + "api/ReferenceProject/GetReferenceProjectType");
    }
    private async Task GetUnit()
    {
        unitList = await Http.GetJsonAsync<List<UnitModel>>(Utility.BaseUrl + "api/Setup/GetUnit");
    }
    private async Task GetColor()
    {
        colorList = await Http.GetJsonAsync<List<ColorModel>>(Utility.BaseUrl + "api/Setup/GetColorList");
    }
    private async Task GetCountry()
    {
        CountryList = await Http.GetJsonAsync<List<CountryModel>>(Utility.BaseUrl + "api/Setup/GetCountry");
    }
    private async Task GetBrand()
    {
        brandList = await Http.GetJsonAsync<List<BrandModel>>(Utility.BaseUrl + "api/Setup/GetBrandList");
    }
    private async Task GetItemList()
    {
        productList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product");
    }
    private async Task GetAreaOfApplication()
    {
        itemApplicationList = await Http.GetJsonAsync<List<ItemApplicationAreaModel>>(Utility.BaseUrl + "api/Setup/GetItemApplicationArea");
    }
    private async Task SelectItemImage1111(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            //Stream stream = file.OpenReadStream();
            //var path = $"{env.WebRootPath}\\images\\File\\TDS\\{file.Name}";
            //FileStream fs = File.Create(path);
            //await stream.CopyToAsync(fs);
            //stream.Close();
            //fs.Close();
            itemimage.Add(file.Name);
            //itemTDS.Add(path);
            selectedItemImage = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();


    }
    private async Task SelectItemImage(InputFileChangeEventArgs e)
    {
        selectedItemImage = e.GetMultipleFiles();
        foreach (var imageFile in selectedItemImage)
        {
            var resizedImage = await imageFile.RequestImageFileAsync(imageFile.ContentType, 10000, 10000);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            itemimageUrls.Add(imgData);
        }
        this.StateHasChanged();
    }
    async Task SelectItemImage111(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            //itemimageUrls.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name });
            filesBase64.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name }); // convert to a base64 string!!
                                                                                                                                               //itemimageUrls.Add(filesBase64);
            itemimageUrls.Add(Convert.ToBase64String(buf));
            selectedItemImage = files;
        }
        //message = "Click UPLOAD to continue";
    }



    private async Task SelectApplicationImage(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();

        foreach (var imageFile in selectedFiles)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            ApplicationimageUrls.Add(imgData);

        }
        this.StateHasChanged();
    }
    public static byte[] GetBytes(Stream stream)
    {
        var bytes = new byte[stream.Length];
        stream.Seek(0, SeekOrigin.Begin);
        stream.ReadAsync(bytes, 0, bytes.Length);
        stream.Dispose();
        return bytes;
    }
    public async Task SaveProduct()
    {
        //string url = "https://localhost:44381/";
        //EmployeeModel empModel = new EmployeeModel();
        //empModel.EMPLOYEE_NAME = itemimageUrls.FirstOrDefault();
        ///var response = await Http.PostAsync($"{url}/Partners/SaveImage", content);
        //var response = await Http.PostJsonAsync<EmployeeModel>($"{url}/Partners/SaveImage", empModel);
        if (IsValidation() != true)
        {

            //bool IsExistProduct = await Http.GetJsonAsync<bool>(Utility.BaseUrl + "api/Product/GetIsItemExist/" + item.ITEM_NAME);
            //if (IsExistProduct != true)
            //{
            try
            {


                if (selectedItemImage != null)
                {
                    foreach (var file in selectedItemImage)
                    {

                        string p = "";
                        path_withfile = $"{env.WebRootPath}\\images\\ReferenceProject\\{code + "_" + file.Name}";
                        p = env.WebRootPath;
                        saveimageurl = path_withfile.Replace(p, "");

                        var path2 = $"{env.WebRootPath}\\images\\ReferenceProject\\{code + "_" + file.Name}";
                        await using FileStream fs = new(path2, FileMode.Create);
                        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                        fs.Close();


                    }
                }
                item.ITEM_IMAGE = saveimageurl;
                if (shortDescription != null)
                {
                    referenceProject.PROJECT_REQUIREMENTS= await this.shortDescription.GetHTML();
                }
                if (longDescription != null)
                { referenceProject.TOCOMA_SOLUTIONS= await this.longDescription.GetHTML(); }


                var data = await Http.PostJsonAsync<clsReferenceProject>(Utility.BaseUrl + "api/ReferenceProject/AddReferenceProject", referenceProject);


                toastService.ShowSuccess("Item Added Successfully!!!");
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message);
            }
            //}

            await GetItemList();


        }
    }

    //async Task OpenFileAsync()
    //{
    //    var file = (await fileReader.CreateReference(elementReference).EnumerateFilesAsync()).FirstOrDefault();
    //    foreach (var file in selectedItemImage)
    //    {
    //        if (file == null) return;
    //        var fileInfo = await file.ReadFileInfoAsync();
    //        fileName = fileInfo.Name;
    //        size = $"{fileInfo.Size}b";
    //        type = fileInfo.Type;

    //        using (var memoryStream = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
    //        {
    //            fileStream = new MemoryStream(memoryStream.ToArray());
    //        }
    //    }



    //}

    async Task Upload1()
    {
        //var url = "http://localhost/api/v1/yourendpointhere";
        var filePath = @"C:\inetpub\wwwroot\tocoma_erp_system\wwwroot\images\Products\0042_WhatsApp Image 2022-07-03 at 10.20.37 AM.jpeg";
        var url = "http://demo.tocoma.co/webroot/Content/images/aboutus";
        foreach (var file in selectedItemImage)
        {
            //string path = Path.Combine(file.Name);
            //var filePath = Path.Combine(file.Name);
            //var filePath = Path.GetFullPath("wwwroot\\Images\\") + file.FileInfo.Name;
            //var filePath = $"{env.WebRootPath}\\{file.Name}";
            HttpClient httpClient = new HttpClient();
            MultipartFormDataContent form = new MultipartFormDataContent();

            FileStream fs = File.OpenRead(filePath);
            var streamContent = new StreamContent(fs);

            var imageContent = new ByteArrayContent(streamContent.ReadAsByteArrayAsync().Result);
            imageContent.Headers.ContentType = MediaTypeHeaderValue.Parse("multipart/form-data");

            form.Add(imageContent, "image", Path.GetFileName(filePath));
            var response = httpClient.PostAsync(url, form).Result;


            var content = new MultipartFormDataContent();

            form.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            form.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", file.Name);
            //var response = await Http.PostAsync($"{url}/Partners/SaveImage", content);
            var response1 = await Http.PostAsync($"{url}", form);
        }


    }


    async Task UploadFileAsync()
    {

        string url = "http://demo.tocoma.co";
        foreach (var file in selectedItemImage)
        {

            var root = "\\demo.tocoma.co";
            var folder = @"\webroot\Content\images\aboutus";

            string path = Path.Combine(root, folder, file.Name);


            await using FileStream fs = new(path, FileMode.Create); //This line throws the error
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);



            //var path2 = $"{url}\\webroot\\Content\\images\\aboutus\\{code + "_" + file.Name}";
            var path2 = $"{url}/webroot/Content/images/aboutus/{code + "_" + file.Name}";
            await using FileStream fs1 = new(path2, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs1);
            // await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            fs1.Close();
        }




        var content = new MultipartFormDataContent();

        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        content.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", fileName);
        //var response = await Http.PostAsync($"{url}/Partners/SaveImage", content);
        var response = await Http.PostAsync($"{url}/webroot/Content/images/aboutus", content);
    }
    //private async Task GetProductUnicImageId()
    //{
    //    var code = await Http.GetJsonAsync<UnicCodeModel>(Utility.BaseUrl + "api/ProductInfo/GetProductInfoImageUnicId");
    //    ProductInfo_Image_Code = Convert.ToInt64(code.Product_ImageUnicCode);
    //}
    private void CancelTds(string file)
    {
        int index = itemTDS.IndexOf(file);
        itemTDS.RemoveAt(index);
    }
    private void CancelSds(string file)
    {
        int index = itemSDS.IndexOf(file);
        itemSDS.RemoveAt(index);
    }
    private void CancelFlayer(string file)
    {
        int index = itemFlyer.IndexOf(file);
        itemFlyer.RemoveAt(index);
    }
    private bool IsValidation()
    {
        bool flag = false;
        if (referenceProject.PROJECT_NAME == "" || referenceProject.PROJECT_NAME == string.Empty || referenceProject.PROJECT_NAME == null)
        {
            toastService.ShowWarning("Project Name cannot be empty!");
            flag = true;
        }
        //else if (item.CATEGORY_ID == 0)
        //{
        //    toastService.ShowError("Please Select Category!");
        //    flag = true;
        //}

        return flag;
    }
    private void ClearData()
    {


        item.ITEM_CODE = "";
        item.ITEM_NAME = "";
        //item.DESCRIPTION = "";
        item.PACK_SIZE = "";
        item.ITEM_PURCHASE_PRICE = 0;
        item.ITEM_SALE_PRICE = 0;
        item.VENDOR_ID = 0;
        item.UNIT_ID = 0;
        item.COLOR_ID = 0;
        item.BRAND_ID = 0;


    }
    private async Task RelatedApplicationClicked(ChangeEventArgs change)
    {
        relatedApp = new ItemApplicationAreaModel();
        relatedApp.APPLICATION_AREA = change.Value.ToString().Trim();
        relatedApp.APPLICATION_AREA_ID = itemApplicationList.Find(x => x.APPLICATION_AREA == change.Value.ToString().Trim()).APPLICATION_AREA_ID;

        SelectedRelatedApplicationList.Add(relatedApp);

    }
    private async Task Related_Item_Clicked(ChangeEventArgs change)
    {
        relatedItem = new ItemEntity();
        relatedItem.ITEM_NAME = change.Value.ToString();
        relatedItem.ITEM_ID = productList.Find(x => x.ITEM_NAME.ToString().Trim() == change.Value.ToString().Trim()).ITEM_ID;


        relatedItemList.Add(relatedItem);

    }
    public async void DeleteRelatedItem(string item)
    {
        var itemToRemove = relatedItemList.Single(r => r.ITEM_NAME == item);
        relatedItemList.Remove(itemToRemove);

        StateHasChanged();
    }

    private async void SelectItemTDS(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            //Stream stream = file.OpenReadStream();
            var path = $"{env.WebRootPath}\\images\\File\\TDS\\{file.Name}";
            //FileStream fs = File.Create(path);
            //await stream.CopyToAsync(fs);
            //stream.Close();
            //fs.Close();
            itemTDS.Add(file.Name);
            //itemTDS.Add(path);
            selectedTDS = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();
    }
    private async void SelectItemSDS(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            //Stream stream = file.OpenReadStream();
            //var path = $"{env.WebRootPath}\\images\\File\\SDS\\{file.Name}";
            //FileStream fs = File.Create(path);
            //await stream.CopyToAsync(fs);
            //stream.Close();
            //fs.Close();
            itemSDS.Add(file.Name);
            selectedSDS = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();
    }
    private async void SelectItemFlyer(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            //Stream stream = file.OpenReadStream();
            //var path = $"{env.WebRootPath}\\images\\File\\FLAYER\\{file.Name}";

            //FileStream fs = File.Create(path);
            //await stream.CopyToAsync(fs);
            //stream.Close();
            //fs.Close();
            itemFlyer.Add(file.Name);
            selectedFlayer = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();
    }

    private async void SelectItemCertification(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            itemCertificate.Add(file.Name);
            selectedCertificate = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //selectedFiles = e.GetMultipleFiles();
        isLoading = true;
        loadedFiles.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                loadedFiles.Add(file);
                selectedFiles = e.GetMultipleFiles();

                var trustedFileNameForFileStorage = Path.GetRandomFileName();

                //var path = Path.Combine(env.ContentRootPath,env.EnvironmentName);

                var path = Path.Combine(env.ContentRootPath + "\\wwwroot\\images\\File\\TDS", file.Name);

                //var path = $"{env.WebRootPath}\\File\\TDS\\{file.Name}";
                //var path = @"C:\Users\Administrator\Downloads\"+file.Name;
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                itemTDS.Add(file.Name);
                selectedTDS = selectedFiles;
                selectedFiles = null;
            }
            catch (Exception ex)
            {
                //Logger.LogError("File: {Filename} Error: {Error}",
                //    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment env { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
