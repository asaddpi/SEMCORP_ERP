// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Pages.Login
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models.WebsiteModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Login\Login.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Login\Login.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(LoginLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Login : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 263 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Login\Login.razor"
 
    UserModel usermodel = new UserModel();
    UserModel loginUser = new UserModel();
    string message;
    ClaimsPrincipal claimsPrincipal;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //usermodel = new UserModel();

        //claimsPrincipal = (await authenticationStateTask).User;

        //if (claimsPrincipal.Identity.IsAuthenticated)
        //{
        //    UriHelper.NavigateTo("/Home");
        //}




        //var item = await localStorageService.GetItemAsync<string>("session_employeeLoginId");
        //if (await localStorageService.GetItemAsync<string>("session_employeeLoginId") != null)
        //{ UriHelper.NavigateTo("/Home"); }
        //else {
        //    loginUser = new UserModel();
        //    UriHelper.NavigateTo("/");
        //}





        //{
        //    usermodel.LOGIN_ID = "philip.cramer@gmail.com";
        //    usermodel.PASSWORD = "philip.cramer";
        //}
        //loginUser = new UserModel();
        //return base.OnInitializedAsync();
        //var authState = await authenticationStateTask;
        //var user = authState.User;

        //if (user.Identity.IsAuthenticated)
        //{
        //    Console.WriteLine($"{user.Identity.Name} is authenticated.");
        //}

    }
    //protected override void OnAfterRender(bool firstRender)
    //{
    //    base.OnAfterRender(firstRender);
    //    _navigationManager.NavigateTo("/login", false);
    //}
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    var authenticationState = await authenticationStateTask;
    //    try
    //    {
    //        if (authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
    //        {
    //            var returnUrl = UriHelper.ToBaseRelativePath(UriHelper.Uri);

    //            if (string.IsNullOrWhiteSpace(returnUrl))
    //                UriHelper.NavigateTo("/", true);
    //            else
    //                UriHelper.NavigateTo($"/Identity/Account/Login?returnUrl=~/{returnUrl}", true);
    //        }
    //    }
    //    catch (Exception e)
    //    {


    //    }

    //}
    private async Task<bool> ValidateUser(string userloginId)
    {
        ((CustomAuthenticationStateProvider)_authenticationStateProvider).MarkUserAsAuthenticated(userloginId);

        if (userloginId == "Admin")
        {
            UriHelper.NavigateTo("/AdminHome");
        }
        else { UriHelper.NavigateTo("/Home"); }


        //await sessionStorage.SetItemAsync("emailAddress", userloginId);
        await localStorageService.SetItemAsync<string>("emailAddress", userloginId);
        return await Task.FromResult(true);
    }
    private async void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            await UserLogin();
        }
    }
    private async Task CreateUser()
    {
        try
        {
            if (IsValidation() != true)
            {
                bool isUserExist = await Http.GetJsonAsync<bool>(Utility.BaseUrl + "api/Authentication/GetExistingUser/" + usermodel.LOGIN_ID);
                if (isUserExist != true)
                {
                    bool status = await Http.PostJsonAsync<bool>(Utility.BaseUrl + "api/Authentication/CreateUser", usermodel);
                    if (status == true)
                    {
                        //message = "Request Submitted ! You will be notify by mail within short time.";
                        toastService.ShowSuccess("Request Submitted ! You will be notify by mail within short time.");
                        ClearData();

                    }
                    else { toastService.ShowError("Not Save!!"); }
                    //if(SentMail()==true)
                    //{
                    //    bool status = await Http.PostJsonAsync<bool>(Utility.BaseUrl + "api/Authentication/CreateUser", usermodel);
                    //    if (status == true)
                    //    {
                    //        message = "Request Submitted ! You will be notify by mail within short time.";
                    //        ClearData();

                    //    }
                    //    else { toastService.ShowError("Not Save!!"); }
                    //}
                }
                else
                {
                    toastService.ShowWarning("This user already exist!!");
                }
            }

        }
        catch (Exception ex)
        {

        }
    }
    private bool IsValidation()
    {
        bool flag = false;
        if (usermodel.FULL_NAME == "" || usermodel.FULL_NAME == string.Empty || usermodel.FULL_NAME == null)
        {
            toastService.ShowWarning("Name cannot be empty!");
            flag = true;
        }
        else if (usermodel.EMAIL == "" || usermodel.EMAIL == string.Empty || usermodel.EMAIL == null)
        {
            toastService.ShowWarning("Email is Empty");
            flag = true;
        }
        else if (usermodel.MOBILE == "" || usermodel.MOBILE == string.Empty || usermodel.MOBILE == null)
        {
            toastService.ShowWarning("Mobile No. is Empty");
            flag = true;
        }
        else if (usermodel.LOGIN_ID == "" || usermodel.LOGIN_ID == string.Empty || usermodel.LOGIN_ID == null)
        {
            toastService.ShowWarning("User Name Can not be empty");
            flag = true;
        }
        else if (usermodel.PASSWORD == "" || usermodel.PASSWORD == string.Empty || usermodel.PASSWORD == null)
        {
            toastService.ShowWarning("Password Can not be empty");
            flag = true;
        }

        return flag;
    }
    private void ClearData()
    {
        usermodel.FULL_NAME = string.Empty;
        usermodel.EMAIL = string.Empty;
        usermodel.DEPARTMENT_ID = 0;
        usermodel.DEPARTMENT_NAME = "";
        usermodel.MOBILE = string.Empty;
        usermodel.LOGIN_ID = "";
        usermodel.PASSWORD = "";
    }
    private async Task UserLogin()
    {
        try
        {
            if (usermodel.LOGIN_ID == null || usermodel.LOGIN_ID == "" || usermodel.PASSWORD == null || usermodel.PASSWORD == "")
            {
                await js.InvokeVoidAsync("alert", " User Name or Password Is Empty");
                return;
            }
            else
            {
                loginUser = await Http.PostJsonAsync<UserModel>(Utility.BaseUrl + "api/Authentication/UserLogin", usermodel);
                if (loginUser.PASSWORD != usermodel.PASSWORD)
                {
                    await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
                    return;
                }
                await sessionStorage.SetItemAsync("session_employeeName", loginUser.EMPLOYEE_NAME);
                await sessionStorage.SetItemAsync("session_employeeId", loginUser.EMPLOYEE_ID);
                await sessionStorage.SetItemAsync("session_employeeDesignation", loginUser.DESIGNATION);
                await sessionStorage.SetItemAsync("session_employeeDepartment", loginUser.DEPARTMENT_NAME);
                await sessionStorage.SetItemAsync("session_employeeDepartmentId", loginUser.DEPARTMENT_ID);
                await sessionStorage.SetItemAsync("emailAddress", loginUser.LOGIN_ID);
                await localStorageService.SetItemAsync("emailAddress", loginUser.LOGIN_ID);
                await sessionStorage.SetItemAsync("session_employeeLoginId", loginUser.LOGIN_ID);
                await sessionStorage.SetItemAsync("session_userRoleId", loginUser.USER_ROLE_ID);
                await sessionStorage.SetItemAsync("session_userId", loginUser.USER_ID);
                await sessionStorage.SetItemAsync("employeeImage", loginUser.EMPLOYEE_IMAGE);
                await localStorageService.SetItemAsync("employeeImage", loginUser.EMPLOYEE_IMAGE);
                await ValidateUser(loginUser.LOGIN_ID);


                var authState = await authenticationStateTask;
                //authState.User = loginUser.USER_ID;
                var user = authState.User;

                if (user.Identity.IsAuthenticated)
                {
                    // Console.WriteLine($"{user.Identity.Name} is authenticated.");
                    //UriHelper.NavigateTo("/Home");
                }


            }
        }
        catch (Exception ex)
        {

        }

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.LocalStorage.ILocalStorageService localStorageService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager _navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider _authenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navmanager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager UriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
