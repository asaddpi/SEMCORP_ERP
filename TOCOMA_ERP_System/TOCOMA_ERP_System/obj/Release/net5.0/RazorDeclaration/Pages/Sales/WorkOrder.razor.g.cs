// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Pages.Sales
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models.WebsiteModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Sales\WorkOrder.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/WorkOrder/{quotationNo}")]
    public partial class WorkOrder : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 400 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Sales\WorkOrder.razor"
       
    List<CustomerModel> customerList = new List<CustomerModel>();
    SalesOrderModel salesOrder = new SalesOrderModel();
    CustomerModel customer = new CustomerModel();
    List<EmployeeModel> employeeList = new List<EmployeeModel>();
    SalesOrderItemDetailsModel salesItemDetails = new SalesOrderItemDetailsModel();
    List<SalesOrderItemDetailsModel> salesItemDetailsList = new List<SalesOrderItemDetailsModel>();
    ItemEntity item = new ItemEntity();
    List<UnitModel> unitList = new List<UnitModel>();
    List<PurchaseTermsConditionsModel> termsConditionList = new List<PurchaseTermsConditionsModel>();
    List<PurchaseTermsConditionsModel> selectedtermsConditionList = new List<PurchaseTermsConditionsModel>();
    PurchaseTermsConditionsModel termsconditions = new PurchaseTermsConditionsModel();
    int editfieldsetareastatus = 0;
    string workOrderDate = "";
    string orderReceiveDate = "";
    string deliveryDate = "";
    string selectedunit;
    private string value { get; set; }
    string noOfPack;
    string terms_And_Conditions_No;
    decimal discount_amount_In_Parcent;
    decimal discount_amount_In_Taka;
    decimal advance_amount_In_Parcent;
    decimal advance_amount_In_Taka;
    decimal netAmount = 0;
    decimal totalNetAmount = 0;
    decimal deliveryAndOthers = 0;
    [Parameter]
    public string quotationNo { get; set; }
    int termsconditionId;
    protected bool IsDisabled { get; set; }

    //---------------------

    private List<PurchaseRequisitionEntity> Customers { get; set; }
    PurchaseRequisitionEntity purchaseRequisition = new PurchaseRequisitionEntity();
    SalesQuotationModel salesQuotation = new SalesQuotationModel();
    SalesItemDetailsModel salesItem = new SalesItemDetailsModel();
    SalesItemDetailsModel salesItemData = new SalesItemDetailsModel();
    List<SalesItemDetailsModel> salesItemList = new List<SalesItemDetailsModel>();
    List<SalesItemDetailsModel> salesItemModelList = new List<SalesItemDetailsModel>();

    List<SalesItemDetailsModel> itemList = new List<SalesItemDetailsModel>();
    List<PurchaseRequisitionDetailsEntity> requisitionDetailsEntities = new List<PurchaseRequisitionDetailsEntity>();
    PurchaseRequisitionDetailsEntity details = new PurchaseRequisitionDetailsEntity();
    PurchaseRequisitionOthersModel reqOthers = new PurchaseRequisitionOthersModel();
    List<PurchaseRequisitionOthersModel> reqOthersList = new List<PurchaseRequisitionOthersModel>();
    List<DepartmentEntity> departmentList = new List<DepartmentEntity>();
    List<ItemEntity> productList = new List<ItemEntity>();
    private ItemEntity SelectedArticle;
    List<OrderItemEntity> requestItemList = new List<OrderItemEntity>();
    List<OthersRequisitionItemsModel> othersItemList = new List<OthersRequisitionItemsModel>();
    OthersRequisitionItemsModel othersItem = new OthersRequisitionItemsModel();
    List<CustomerTypeModel> customerType = new List<CustomerTypeModel>();
    ACC_VOUCHER_ITEM_MODEL accVoucherItem = new ACC_VOUCHER_ITEM_MODEL();
    List<ACC_VOUCHER_ITEM_MODEL> accVoucherItemList = new List<ACC_VOUCHER_ITEM_MODEL>();
    ACC_COMPANY_VOUCHER_MODEL accCompanyVoucherModel = new ACC_COMPANY_VOUCHER_MODEL();
    List<LedgerModel> ledgerList = new List<LedgerModel>();
    List<PurchaseTermsConditionsModel> AlltermsConditionList = new List<PurchaseTermsConditionsModel>();
    List<PurchaseTermsConditionsModel> selectedTermsCondition = new List<PurchaseTermsConditionsModel>();
    List<CustomerProjectModel> projectList = new List<CustomerProjectModel>();
    string searchitem = "";
    OrderItemEntity orderitem;
    OrderItemEntity order_itm = null;
    BlazoredTextEditor itemDescription;
    string q = "";
    string r = "";
    string ait = "5.00";
    string vat = "7.5";
    string itemname;
    double requisitionTotal = 0;
    decimal salesSubTotal = 0;
    string unitName = "";
    string packSize = "";

    double othersSubTotal = 0;
    //DateTime request_date = System.DateTime.Now;
    string quotation_date;
    string validupto_date;
    int tablerow;
    string selected_department;
    int selected_department_Id;
    string cheque_Date;
    bool checked_cheque;
    decimal GrandTotal;
    decimal Total = 0;
    decimal LC_AMOUNT;
    decimal LC_COMMISSION;
    decimal INSURANCE;
    string Inwords;
    string othersItemName;
    string othersitemQuantity;
    string OthersitemRate;
    string reqNo;
    protected bool REQ_IS_DISABLE { get; set; }
    string salesOrderNo;
    string companyShortForm = "";
    int customerId = 0;
    string SelectedString = "";
    IReadOnlyList<IBrowserFile> selectedFiles;
    IReadOnlyList<IBrowserFile> selectedworkorder;
    List<string> itemTDS = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        tablerow = 1;
        //itemname = itemname + "_" + tablerow;
        await DepartmentList();
        await GetItemList();
        await GetCustomer();
        await GetCustomerType();
        await GetReqNo();
        await GetEmployee();
        await GetLedger();
        unitList = await Http.GetJsonAsync<List<UnitModel>>(Utility.BaseUrl + "api/Setup/GetUnitList");
        termsConditionList = await Http.GetJsonAsync<List<PurchaseTermsConditionsModel>>(Utility.BaseUrl + "api/Setup/GetSalesTermsConditionsForSalesOrder");
        await GetSalesItemDetails();
        AlltermsConditionList = termsConditionList;

        salesQuotation = await Http.GetJsonAsync<SalesQuotationModel>(Utility.BaseUrl + "api/Sales/GetQuotationByQutNo/" + quotationNo);
        if (salesQuotation.TERMS_AND_CONDITION != null)
        { selectedTermsCondition = await Http.GetJsonAsync<List<PurchaseTermsConditionsModel>>(Utility.BaseUrl + "api/Sales/GetTermsAndConditions/" + salesQuotation.TERMS_AND_CONDITION); }
        int customerid = salesQuotation.CUSTOMER_ID;
        projectList = await Http.GetJsonAsync<List<CustomerProjectModel>>(Utility.BaseUrl + "api/Customer/GetCustomerProjectList/" + customerid);
        TotalCalculation();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("JsInteropDatepicker");
    }
    private async Task GetLedger()
    {
        ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");
    }
    private async Task GetItemList()
    {
        productList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product");
    }
    private async Task GetCustomer()
    {
        customerList = await Http.GetJsonAsync<List<CustomerModel>>(Utility.BaseUrl + "api/Customer");

    }
    private async Task GetCustomerType()
    {
        customerType = await Http.GetJsonAsync<List<CustomerTypeModel>>(Utility.BaseUrl + "api/Customer/GetCustomerType");
    }
    private async Task GetEmployee()
    {
        employeeList = await Http.GetJsonAsync<List<EmployeeModel>>(Utility.BaseUrl + "api/Employee");
    }
    private async Task DepartmentList()
    {
        departmentList = await Http.GetJsonAsync<List<DepartmentEntity>>(Utility.BaseUrl + "api/Department");

    }
    public async Task GetReqNo()
    {
        //var reqNo = await Http.GetJsonAsync<RequisitionNo>(Utility.BaseUrl + "api/Purchase/GetReqNo");
        reqNo = await Http.GetStringAsync(Utility.BaseUrl + "api/Purchase/GetReqNo");
        purchaseRequisition.REQUISITION_NO = Convert.ToString(reqNo);

        REQ_IS_DISABLE = true;
        StateHasChanged();
    }
    private async Task GetSalesItemDetails()
    {
        salesItemList = await Http.GetJsonAsync<List<SalesItemDetailsModel>>(Utility.BaseUrl + "api/Sales/GetQuotationDetailsByQutNo/" + quotationNo);
        if (salesItemList.Count > 0)
        {
            foreach (var item in salesItemList)
            {
                salesItemData = new SalesItemDetailsModel();
                decimal total = item.UNIT_PRICE * Convert.ToDecimal(item.ORDER_QUANTITY);
                decimal AIT = (total * 5) / 100;
                decimal ait_in_Parcent = Convert.ToDecimal(String.Format("{0:0.00}", AIT));
                decimal unitPriceAndAit = total + ait_in_Parcent;
                decimal p = (unitPriceAndAit * Convert.ToDecimal(7.5)) / 100;
                decimal VAT_with_Price_and_AIT = Convert.ToDecimal(String.Format("{0:0.00}", p));
                //decimal tUnitPrice = total + ait_in_Parcent + p;
                decimal tUnitPrice = total + item.AIT + item.VAT;
                decimal totalUnitPrice = Convert.ToDecimal(String.Format("{0:0.00}", tUnitPrice));

                salesItemData.AMOUNT = Convert.ToDouble(total);
                salesItemData.AIT = item.AIT;//ait_in_Parcent;
                salesItemData.VAT = item.VAT; //VAT_with_Price_and_AIT;
                salesItemData.TOTAL_PRICE = totalUnitPrice;
                salesItemData.UOM = item.UOM;
                salesItemData.UNIT_PRICE = item.UNIT_PRICE;
                salesItemData.ORDER_QUANTITY = item.ORDER_QUANTITY;
                salesItemData.SERVICE_CODE = item.SERVICE_CODE;
                salesItemData.SERVICE_NAME = item.SERVICE_NAME;
                salesItemData.ITEM_DESCRIPTION = item.ITEM_DESCRIPTION;
                salesItemData.ITEM_ID = item.ITEM_ID;
                salesItemData.NUMBER_OF_PACK = item.NUMBER_OF_PACK;
                salesItemData.PACK_SIZE = item.PACK_SIZE;





                salesItemModelList.Add(salesItemData);
            }

        }
    }
    private async void SelectItem(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            itemTDS.Add(file.Name);
            selectedworkorder = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();
    }
    private void CancelTds(string file)
    {
        int index = itemTDS.IndexOf(file);
        itemTDS.RemoveAt(index);
    }
    private async Task SelectedCustomer(ChangeEventArgs args)
    {

        int customerid = Convert.ToInt32(args.Value);
        projectList = new List<CustomerProjectModel>();
        projectList = await Http.GetJsonAsync<List<CustomerProjectModel>>(Utility.BaseUrl + "api/Customer/GetCustomerProjectList/" + customerid);
    }
    private void TotalCalculation()
    {
        //if (requisitionTotal != 0 || requisitionTotal != null)
        //{ GrandTotal = Convert.ToDecimal(requisitionTotal); }
        //if(LC_AMOUNT!=0||LC_AMOUNT!=null)
        //{ GrandTotal= }
        salesSubTotal = salesItemModelList.Sum(x => Convert.ToDecimal(x.TOTAL_PRICE));
        Total = Convert.ToDecimal(salesSubTotal) + LC_AMOUNT + LC_COMMISSION + INSURANCE + Convert.ToDecimal(othersSubTotal);
        netAmount = Total;
        totalNetAmount = Total;
        GrandTotal = Total;
        if (discount_amount_In_Parcent != 0)
        {
            netAmount = Total - discount_amount_In_Parcent;
            totalNetAmount = netAmount;
            GrandTotal = netAmount;
        }
        if (discount_amount_In_Taka != 0)
        {
            netAmount = Total - discount_amount_In_Taka;
            totalNetAmount = netAmount;
            GrandTotal = netAmount;
        }
        if (advance_amount_In_Parcent != 0)
        {
            //decimal sum = advance_amount_In_Parcent + discount_amount_In_Parcent + discount_amount_In_Taka;
            totalNetAmount = Total - (advance_amount_In_Parcent + discount_amount_In_Parcent + discount_amount_In_Taka);
            GrandTotal = totalNetAmount;
        }
        if (advance_amount_In_Taka != 0)
        {
            totalNetAmount = Total - (advance_amount_In_Taka + discount_amount_In_Parcent + discount_amount_In_Taka);
            GrandTotal = totalNetAmount;
        }
        if (deliveryAndOthers != 0)
        {
            GrandTotal = totalNetAmount + deliveryAndOthers;
        }


        //GrandTotal = (Convert.ToDecimal(salesSubTotal) + LC_AMOUNT + LC_COMMISSION + INSURANCE + Convert.ToDecimal(othersSubTotal))- discount_amount_In_Parcent;
        //GrandTotal = (Convert.ToDecimal(salesSubTotal) + LC_AMOUNT + LC_COMMISSION + INSURANCE + Convert.ToDecimal(othersSubTotal)) - discount_amount_In_Taka;
        double inwordValue = Convert.ToDouble(GrandTotal);
        Inwords = NumberToWords.ConvertAmount(inwordValue);
    }

    public async Task SaveSalesOrder()
    {

        if (IsValidation() != true)
        {
            try
            {
                //---Sales Order

                salesOrder.DELIVERY_DATE = deliveryDate;
                salesOrder.PO_WO_DATE = workOrderDate;
                salesOrder.SALES_ORDER_RECEIVED_DATE = orderReceiveDate;
                //salesOrder.DELIVERY_DATE = _deliveryDate; //Convert.ToDateTime(Convert.ToDateTime(deliveryDate).Year+"-"+ Convert.ToDateTime(deliveryDate).Month+"-"+ Convert.ToDateTime(deliveryDate).Day);
                salesOrder.GRAND_TOTAL = Convert.ToDouble(GrandTotal);
                salesOrder.TERMS_AND_CONDITION = salesQuotation.TERMS_AND_CONDITION;
                salesOrder.REG_BY = await sessionStorage.GetItemAsync<string>("session_employeeLoginId");
                salesOrder.QUOTATION_NO = quotationNo;
                salesOrder.CUSTOMER_ID = salesQuotation.CUSTOMER_ID;
                salesOrder.DELIVERY_NOTE_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Sales/GetDeliveryNo");
                await GetSalesOrderNo();

                //----------Account Master Data
                //string d = deliveryDate.Substring(0, 2);
                //string m = deliveryDate.Substring(3, 2);
                //string y = deliveryDate.Substring(6, 4);
                //DateTime dd = Convert.ToDateTime(y + "-" + m + "-" + d);
                //+ "-" + Convert.ToDateTime(d).Month + "-" + Convert.ToDateTime(d).Day); ;
                //DateTime dtt = Convert.ToDateTime(dd);
                accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 3);
                //accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(dd);
                //accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
                accCompanyVoucherModel.LEDGER_NAME = customerList.Find(x => x.CUSTOMER_ID == salesOrder.CUSTOMER_ID).CUSTOMER_NAME;
                accCompanyVoucherModel.COMP_VOUCHER_AMOUNT = Convert.ToDecimal(GrandTotal);
                accCompanyVoucherModel.COMP_VOUCHER_ADD_AMOUNT = 0;
                accCompanyVoucherModel.COMP_VOUCHER_LESS_AMOUNT = 0;
                accCompanyVoucherModel.COMP_VOUCHER_NET_AMOUNT = Convert.ToDecimal(GrandTotal);
                accCompanyVoucherModel.COMP_VOUCHER_PROCESS_AMOUNT = 0;
                accCompanyVoucherModel.COMP_VOUCHER_NARRATION = "";
                accCompanyVoucherModel.COMP_VOUCHER_TYPE = 3;
                accCompanyVoucherModel.ENTRYBY = await sessionStorage.GetItemAsync<string>("session_employeeName");
                accCompanyVoucherModel.UPDATEBY = await sessionStorage.GetItemAsync<string>("session_employeeName");

                string wono = salesOrder.PO_WO_NUMBER.Replace("/", "-");
                salesOrder.PO_WO_NUMBER = wono;
                //-------------------------------

                //-----Acc Voucher Details

                // Create a List of objects
                List<ACC_VOUCHER_MODEL> voucherItem = new List<ACC_VOUCHER_MODEL>
    {
                        new ACC_VOUCHER_MODEL {
                            COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                              ,VOUCHER_REF_KEY=""
                              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                              ,COMP_VOUCHER_TYPE=3
                              ,LEDGER_NAME=customerList.Find(x => x.CUSTOMER_ID == salesOrder.CUSTOMER_ID).CUSTOMER_NAME
                              ,VOUCHER_DEBIT_AMOUNT=Convert.ToDecimal(GrandTotal)
                              ,VOUCHER_CREDIT_AMOUNT=0
                              ,VOUCHER_ADD_AMOUNT=0
                              ,VOUCHER_LESS_AMOUNT=0
                              ,VOUCHER_TOBY="Dr"
                              ,VOUCHER_FC_DEBIT_AMOUNT=0
                              ,VOUCHER_FC_CREDIT_AMOUNT = 0
                        },
                        new ACC_VOUCHER_MODEL {
                              COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                              ,VOUCHER_REF_KEY=""
                              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                              ,COMP_VOUCHER_TYPE=3
                              ,LEDGER_NAME=SelectedString
                              ,VOUCHER_DEBIT_AMOUNT=0
                              ,VOUCHER_CREDIT_AMOUNT=Convert.ToDecimal(GrandTotal)
                              ,VOUCHER_ADD_AMOUNT=0
                              ,VOUCHER_LESS_AMOUNT=0
                              ,VOUCHER_TOBY="Cr"
                              ,VOUCHER_FC_DEBIT_AMOUNT=0
                              ,VOUCHER_FC_CREDIT_AMOUNT = 0

                        }
                    };
                accCompanyVoucherModel.accVoucherList = voucherItem;
                salesOrder.acc_com_VoucherModel = accCompanyVoucherModel;
                salesOrder.acc_Voucher_Model = voucherItem;

                //----Sales Details

                foreach (var item in salesItemModelList)
                {
                    accVoucherItem = new ACC_VOUCHER_ITEM_MODEL();
                    accVoucherItem.BRANCH_ID = accCompanyVoucherModel.BRANCH_ID;
                    accVoucherItem.COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO;
                    accVoucherItem.COMP_VOUCHER_TYPE = accCompanyVoucherModel.COMP_VOUCHER_TYPE;
                    accVoucherItem.COMP_VOUCHER_DATE = accCompanyVoucherModel.COMP_VOUCHER_DATE;
                    //accVoucherItem.STOCKITEM_NAME = productList.Find(x => x.ITEM_ID == item.ITEM_ID).ITEM_NAME;
                    accVoucherItem.BILL_QUANTITY = Convert.ToDecimal(item.SALES_QUANTITY);
                    accVoucherItem.BILL_RATE = Convert.ToDecimal(item.UNIT_PRICE);
                    //accVoucherItem.GODOWNS_NAME = salesOrder.;
                    accVoucherItem.BILL_UOM = item.UOM;
                    accVoucherItemList.Add(accVoucherItem);
                }
                salesOrder.acc_VoucherItemList = accVoucherItemList;
                foreach (var item in salesItemModelList)
                {
                    salesItem = new SalesItemDetailsModel();
                    //salesItem.SALES_ID = id;
                    salesItem.PO_WO_NUMBER = salesOrder.PO_WO_NUMBER;
                    salesItem.SALES_ORDER_NO = salesOrder.SALES_ORDER_NO;
                    salesItem.ITEM_ID = item.ITEM_ID;
                    salesItem.ITEM_DESCRIPTION = item.ITEM_DESCRIPTION;
                    salesItem.SALES_QUANTITY = item.ORDER_QUANTITY;
                    salesItem.SERVICE_CODE = item.SERVICE_CODE;
                    salesItem.SERVICE_NAME = item.SERVICE_NAME;
                    salesItem.UOM = item.UOM;
                    salesItem.PACK_SIZE = item.PACK_SIZE;
                    salesItem.UNIT_PRICE = item.UNIT_PRICE;
                    salesItem.AIT = item.AIT;
                    salesItem.VAT = item.VAT;
                    salesItem.TOTAL_PRICE = Convert.ToDecimal(item.ORDER_QUANTITY) * item.UNIT_PRICE;

                    itemList.Add(salesItem);
                }
                salesOrder.sOrderDetailsList = itemList;
                var data = await Http.PostJsonAsync<SalesOrderModel>(Utility.BaseUrl + "api/Sales/AddSalesOrder/", salesOrder);

                //toastService.ShowSuccess("Save Successfully!!!");
                navManager.NavigateTo("SalesOrderList");
            }
            catch (Exception ex)
            {
                toastService.ShowError("Not Save ! " + ex.Message);
            }

        }
    }
    public async void EditItem(string item)
    {
        itemname = salesItemModelList.Single(r => r.SERVICE_NAME == item).SERVICE_NAME;
        q = Convert.ToString(salesItemModelList.Single(r => r.SERVICE_NAME == item).ORDER_QUANTITY);
        r = Convert.ToString(salesItemModelList.Single(r => r.SERVICE_NAME == item).UNIT_PRICE);
        unitName = Convert.ToString(salesItemModelList.Single(r => r.SERVICE_NAME == item).UOM);
        packSize = Convert.ToString(salesItemModelList.Single(r => r.SERVICE_NAME == item).PACK_SIZE);
        noOfPack = Convert.ToString(salesItemModelList.Single(r => r.SERVICE_NAME == item).NUMBER_OF_PACK);
        //ait = Convert.ToString(salesItemList.Single(r => r.ITEM_NAME == item).AIT);
        //vat = Convert.ToString(salesItemList.Single(r => r.ITEM_NAME == item).VAT);
        //if(salesItemModelList.Single(r => r.SERVICE_NAME == item).ITEM_DESCRIPTION)!=null
        //        { }
        string desc = salesItemModelList.Single(r => r.SERVICE_NAME == item).ITEM_DESCRIPTION;
        if (desc != "<p><br></p>" && desc != null)
        { itemDescription.LoadHTMLContent(salesItemModelList.Single(r => r.SERVICE_NAME == item).ITEM_DESCRIPTION); }

        //var itemToRemove = salesItemList.Single(r => r.ITEM_NAME == item);
        //salesItemList.Remove(itemToRemove);
        if (requestItemList.Count > 0)
        {
            salesSubTotal = 0;
            foreach (var _oitem in requestItemList)
            {
                salesSubTotal += Convert.ToDecimal(_oitem.Total);
            }
        }
        else { salesSubTotal = 0; }
        TotalCalculation();
        StateHasChanged();
    }
    public async void DeleteItem(string item)
    {
        var itemToRemove = salesItemModelList.Single(r => r.ITEM_NAME == item);
        salesItemModelList.Remove(itemToRemove);
        if (salesItemList.Count > 0)
        {
            salesSubTotal = 0;
            foreach (var _oitem in salesItemList)
            {
                salesSubTotal += _oitem.TOTAL_PRICE;
            }
        }
        else { salesSubTotal = 0; }

        TotalCalculation();
        StateHasChanged();
    }
    private bool IsValidation_Table_Item()
    {
        bool flag = false;
        if (itemname == "" || itemname == string.Empty || itemname == null)
        {
            toastService.ShowWarning("Please Select Item!");
            flag = true;
        }
        else if (q == "" || q == string.Empty || q == null)
        {
            toastService.ShowWarning("Quantity Field is Empty!");
            flag = true;
        }
        else if (r == "" || r == string.Empty || r == null)
        {
            toastService.ShowWarning("Rate Field is Empty!");
            flag = true;
        }
        return flag;
    }
    private bool IsValidation()
    {
        bool flag = false;
        if (salesOrder.CUSTOMER_PROJECT_ID == 0)
        {
            toastService.ShowWarning("Please Select Customer Project !");
            flag = true;
        }


        return flag;
    }
    protected async Task AddItem()
    {
        if (IsValidation_Table_Item() != true)
        {

            string pId = "";
            if (salesItemModelList != null)
            {
                pId = salesItemModelList.Find(x => x.SERVICE_NAME.ToString().Trim() == itemname.ToString().Trim()).SERVICE_CODE;
            }
            bool rowexists = salesItemList.Exists(x => x.SERVICE_CODE == pId);
            if (rowexists != true)
            {
                bool alreadyExists = productList.Any(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim());
                order_itm = new OrderItemEntity();
                salesItem = new SalesItemDetailsModel();
                salesItem.ITEM_ID = productList.Find(x => x.ITEM_NAME == itemname).ITEM_ID;
                salesItem.ITEM_NAME = itemname;
                salesItem.PACK_SIZE = packSize;
                salesItem.UOM = unitName;
                salesItem.NUMBER_OF_PACK = noOfPack;
                salesItem.ORDER_QUANTITY = Convert.ToDouble(q);
                salesItem.UNIT_PRICE = Convert.ToDecimal(r);
                salesItem.UOM = productList.Find(x => x.ITEM_NAME == itemname).UOM;
                salesItem.PACK_SIZE = productList.Find(x => x.ITEM_NAME == itemname).PACK_SIZE;
                if (ait != null && ait != "")
                { salesItem.AIT = Convert.ToDecimal(ait); }
                if (vat != null && vat != "")
                { salesItem.VAT = Convert.ToDecimal(vat); }
                //salesItem.ITEM_DESCRIPTION = await this.itemDescription.GetHTML();

                //if (alreadyExists == true)
                //{
                //    order_itm.ITEM_ID = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).ITEM_ID;
                //    order_itm.PACK_SIZE = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).PACK_SIZE;
                //    order_itm.UOM = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).UOM;
                //}
                //else
                //{
                //    order_itm.ITEM_ID = await Http.GetJsonAsync<int>(Utility.BaseUrl + "api/Purchase/GetItemId/" + itemname);
                //}

                salesItem.TOTAL_PRICE = Convert.ToDecimal(salesItem.ORDER_QUANTITY) * Convert.ToDecimal(salesItem.UNIT_PRICE);
                salesSubTotal += salesItem.TOTAL_PRICE;
                salesItemModelList.Add(salesItem);
            }
            else
            {

                //string des = await this.itemDescription.GetHTML();
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.SERVICE_CODE = pId);
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.ITEM_NAME = itemname);
                //salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.ITEM_DESCRIPTION = des);
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.UOM = unitName);
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.PACK_SIZE = packSize);
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.NUMBER_OF_PACK = noOfPack);
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.UNIT_PRICE = Convert.ToDecimal(r));
                //salesItemList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.UOM = item.UNIT_ID);
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.ORDER_QUANTITY = Convert.ToDouble(q));
                //salesItemList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.TOTAL_PRICE = totalUnitPrice);
                //salesItemList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.AIT = ait_in_Parcent);
                //salesItemList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.VAT = VAT_with_Price_and_AIT);
                decimal total = Convert.ToDecimal(r) * Convert.ToDecimal(q);
                decimal _ait = (total * Convert.ToDecimal(ait)) / 100;
                decimal _aitAndTotal = total + _ait;
                decimal _vat = (_aitAndTotal * Convert.ToDecimal(vat)) / 100;
                decimal _totalPrice = total + _ait + _vat;
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.AIT = _ait);
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.VAT = _vat);
                salesItemModelList.Where(w => w.SERVICE_CODE == pId).ToList().ForEach(s => s.TOTAL_PRICE = _totalPrice);





                //voucherItemList = voucherItemList.Where(w => w.symbol == MyProperty).Select(s => { s.symbol=MyProperty; return s; }).ToList();
                //voucherItemList = voucherItemList.Where(w => w.particular == SelectedArticle.LEDGER_NAME).Select(s => { s.particular= SelectedArticle.LEDGER_NAME; return s; }).ToList();
            }


            //q = "";
            //r = "";
            //itemname = "";
            TotalCalculation();
            salesItem = new SalesItemDetailsModel();
            itemname = "";
            q = "";
            r = "";
            ait = "5.00";
            vat = "7.5";
            unitName = "";
            packSize = "";
            noOfPack = "";

        }


    }

    public async Task GetSalesOrderNo()
    {
        string prefix = "";
        prefix = companyShortForm;

        salesOrderNo = await Http.GetStringAsync(Utility.BaseUrl + "api/Sales/GetSalesOrderNo");
        salesOrder.SALES_ORDER_NO = salesOrderNo;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
