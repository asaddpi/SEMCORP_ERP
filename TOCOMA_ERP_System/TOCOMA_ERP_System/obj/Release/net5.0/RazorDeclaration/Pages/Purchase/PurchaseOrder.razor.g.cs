// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Pages.Purchase
{
    #line hidden
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models.WebsiteModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Purchase\PurchaseOrder.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Purchase\PurchaseOrder.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Purchase\PurchaseOrder.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Purchase\PurchaseOrder.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Purchase\PurchaseOrder.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/PurchaseOrder/{requisition_no}")]
    public partial class PurchaseOrder : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1102 "D:\Project\Company All Project\SEMCORP\Solution\TOCOMA_ERP_System\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Purchase\PurchaseOrder.razor"
       
    [Parameter]
    public string requisition_no { get; set; }
    //private ReportService _ReportService = new ReportService();
    DataSet DS_OUTPUT_DATA = new DataSet();
    List<ItemEntity> productList = new List<ItemEntity>();
    PurchaseOrderEntity purchaseOrder = new PurchaseOrderEntity();
    Acc_TransectionModel transectionModel = new Acc_TransectionModel();
    List<Acc_LedgerModel> ledgerModelList = new List<Acc_LedgerModel>();
    Acc_LedgerModel ledgerEntry1 = new Acc_LedgerModel();
    Acc_LedgerModel ledgerEntry2 = new Acc_LedgerModel();

    PurchaseOrderModel purchaseOrderModel = new PurchaseOrderModel();
    List<VendorEntity> vendorList = new List<VendorEntity>();
    List<VendorEntity> selectedVendorList = new List<VendorEntity>();

    PRE pp = new PRE();
    List<OrderItemEntity> requestItemList = new List<OrderItemEntity>();
    OrderItemEntity orderItem = new OrderItemEntity();
    //DateTime po_date = System.DateTime.Now;
    string po_date;
    //DateTime quotation_ref_date = System.DateTime.Now;
    string quotation_ref_date = "";
    DateTime ETD_1st_Date = System.DateTime.Now;
    DateTime ETD_2nd_Date = System.DateTime.Now;
    DateTime ETD_3rd_Date = System.DateTime.Now;
    DateTime ETD_4th_Date = System.DateTime.Now;

    DateTime ETA_1st_Date = System.DateTime.Now;
    DateTime ETA_2nd_Date = System.DateTime.Now;
    DateTime ETA_3rd_Date = System.DateTime.Now;
    DateTime ETA_4th_Date = System.DateTime.Now;

    DateTime EA_1st_Date = System.DateTime.Now;
    DateTime EA_2nd_Date = System.DateTime.Now;
    DateTime EA_3rd_Date = System.DateTime.Now;
    DateTime EA_4th_Date = System.DateTime.Now;

    DateTime Received_Date = System.DateTime.Now;

    PurchaseOrderDetailsEntity details = new PurchaseOrderDetailsEntity();
    List<PurchaseOrderDetailsEntity> purchaseDetailsList = new List<PurchaseOrderDetailsEntity>();
    protected bool ETD_1st_Date_IsDisabled { get; set; }
    protected bool ETD_2nd_Date_IsDisabled { get; set; }
    protected bool ETD_3rd_Date_IsDisabled { get; set; }
    protected bool ETD_4th_Date_IsDisabled { get; set; }

    protected bool ETA_1st_Date_IsDisabled { get; set; }
    protected bool ETA_2nd_Date_IsDisabled { get; set; }
    protected bool ETA_3rd_Date_IsDisabled { get; set; }
    protected bool ETA_4th_Date_IsDisabled { get; set; }

    protected bool EA_1st_Date_IsDisabled { get; set; }
    protected bool EA_2nd_Date_IsDisabled { get; set; }
    protected bool EA_3rd_Date_IsDisabled { get; set; }
    protected bool EA_4th_Date_IsDisabled { get; set; }
    protected bool Received_Date_IsDisabled { get; set; }
    string billno = "";
    double total = 0;
    double finaltotal = 0;
    double ITEMtotal = 0;
    double AIT;
    double VAT;
    double ADJ;
    double SeaFreight;
    double GRAND_TOTAL = 0;
    string packaging_instruction_No;
    string terms_And_Conditions_No;
    int ItemId;
    string pocode1 = "PO";
    string pocode2 = "L";
    string pocode3;
    string pocode4;
    string pocode5 = "TL";
    string CODE;
    string SelectedString = "";
    List<PDeliveryTimeModel> pdeliverytimelist = new List<PDeliveryTimeModel>();
    List<ShippingAddressModel> shippingAddressList = new List<ShippingAddressModel>();
    List<WarehouseModel> wareHouseList = new List<WarehouseModel>();
    ShippingAddressModel shippingAddressModel = new ShippingAddressModel();
    DeliveryModeModel deliveryModeModel = new DeliveryModeModel();
    List<DeliveryModeModel> deliveryModeList = new List<DeliveryModeModel>();
    PaymentTermModel paymentTerm = new PaymentTermModel();
    List<PaymentTermModel> paymentTermList = new List<PaymentTermModel>();
    List<PaymentTermModel> pTermList = new List<PaymentTermModel>();
    List<CountryModel> countryList = new List<CountryModel>();
    CountryModel country = new CountryModel();
    CurrencyModel currency = new CurrencyModel();
    List<PackagingInstructionModel> packagingInsList = new List<PackagingInstructionModel>();
    PackagingInstructionModel packagingIns = new PackagingInstructionModel();
    PurchaseTermsConditionsModel termsconditions = new PurchaseTermsConditionsModel();
    List<PurchaseTermsConditionsModel> termsConditionList = new List<PurchaseTermsConditionsModel>();
    PurchaseRequisitionViewEntity reqView = new PurchaseRequisitionViewEntity();
    List<CurrencyModel> currencyModel = new List<CurrencyModel>();
    List<LedgerModel> ledgerList = new List<LedgerModel>();
    ACC_COMPANY_VOUCHER_MODEL accCompanyVoucherModel = new ACC_COMPANY_VOUCHER_MODEL();
    List<BranchModel> branchList = new List<BranchModel>();
    ACC_VOUCHER_MODEL voucherDetails = new ACC_VOUCHER_MODEL();
    ACC_VOUCHER_ITEM_MODEL accVoucherItem = new ACC_VOUCHER_ITEM_MODEL();
    List<ACC_VOUCHER_ITEM_MODEL> accVoucherItemList = new List<ACC_VOUCHER_ITEM_MODEL>();

    string deliveryTime;
    string comodity;
    string _localcolor;
    string _intcolor;
    int IL_OPTION;
    string Inwords;
    string purchaseOrderNo;
    string BranchName;

    //protected bool IsDisabled { get; set; }




    //[Parameter]
    //public string Format { get; set; } = "dd/mm/yyyy";




    protected override async Task OnInitializedAsync()
    {
        date_disabled();
        ////IsDisabled = true;
        requestItemList = await Http.GetJsonAsync<List<OrderItemEntity>>(Utility.BaseUrl + "api/Purchase/GetRequisitionItemDetailsByReqNo/" + requisition_no);
        reqView = await Http.GetJsonAsync<PurchaseRequisitionViewEntity>(Utility.BaseUrl + "api/Purchase/GetPurchaseReqInfo/" + requisition_no);
        //Console.Write(requestItemList.Sum(x => Convert.ToDouble(x.Quantity)*Convert.ToDouble(x.Rate)));
        vendorList = await Http.GetJsonAsync<List<VendorEntity>>(Utility.BaseUrl + "api/Vendor");
        pdeliverytimelist = await Http.GetJsonAsync<List<PDeliveryTimeModel>>(Utility.BaseUrl + "api/Setup/GetDeliveryTime");
        shippingAddressList = await Http.GetJsonAsync<List<ShippingAddressModel>>(Utility.BaseUrl + "api/Setup/GetShippingAddress");
        wareHouseList = await Http.GetJsonAsync<List<WarehouseModel>>(Utility.BaseUrl + "api/Setup/GetWareHouseList");
        deliveryModeList = await Http.GetJsonAsync<List<DeliveryModeModel>>(Utility.BaseUrl + "api/Setup/GetDeliveryMode");
        pTermList = await Http.GetJsonAsync<List<PaymentTermModel>>(Utility.BaseUrl + "api/Setup/GetPaymentTerm");
        countryList = await Http.GetJsonAsync<List<CountryModel>>(Utility.BaseUrl + "api/Setup/GetCountry");
        packagingInsList = await Http.GetJsonAsync<List<PackagingInstructionModel>>(Utility.BaseUrl + "api/Setup/GetPackagingInstruction");
        termsConditionList = await Http.GetJsonAsync<List<PurchaseTermsConditionsModel>>(Utility.BaseUrl + "api/Setup/GetTermsConditions");
        currencyModel = await Http.GetJsonAsync<List<CurrencyModel>>(Utility.BaseUrl + "api/Setup/GetCurrency");
        productList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product");
        GetTotal();
        _localcolor = "transparent;color:black;border:2px groove blue";
        _intcolor = "transparent;color:black";
        IL_OPTION = 1;
        purchaseOrderModel.CURRENCY_NAME = "BDT";
        await GetPaymentTerm();
        selectedVendorList = vendorList.FindAll(x => x.VENDOR_TYPE_STATUS == "Local");
        purchaseOrderModel.REQUISITION_NO = requisition_no;
        //await GetCode();
        await GetLedger();
        await GetBranch();
    }
    public async Task GetBranch()
    {
        branchList = await Http.GetJsonAsync<List<BranchModel>>(Utility.BaseUrl + "api/Setup/GetBranchList");
        if (branchList.Count > 0)
        { BranchName = branchList.FirstOrDefault().BRANCH_NAME; }


    }
    private async Task GetLedger()
    {
        ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");
    }
    private async Task GetCode()
    {
        CODE = await Http.GetStringAsync(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderNo");
        //await GetPreCode();
    }
    private async Task GetPreCode()
    {
        //pocode3 = "PO" + pocode2 + pocode4 + "-" + CODE + "-TL";
        pocode3 = "PO" + pocode2 + "-" + CODE + pocode4 + "-TL";
    }
    private async Task GetPaymentTerm()
    {

        //paymentTermList = pTermList;
        paymentTermList = await Http.GetJsonAsync<List<PaymentTermModel>>(Utility.BaseUrl + "api/Setup/GetPaymentTerm");
        if (IL_OPTION == 1)
        {
            //paymentTermList.RemoveAt(1);
            paymentTermList.RemoveAll(s => s.PAYMENT_TERM_ID == 2);
            StateHasChanged();
            //paymentTermList = pTermList.FindAll(x => x.PAYMENT_TERM != "TT In Advance");
        }
        else if (IL_OPTION == 2)
        {
            //paymentTermList.RemoveAt(0);
            paymentTermList.RemoveAll(s => s.PAYMENT_TERM_ID == 1);
            StateHasChanged();
            //paymentTermList = pTermList.FindAll(x => x.PAYMENT_TERM != "In Advance");
        }
    }
    protected void date_disabled()
    {
        ETD_1st_Date_IsDisabled = true;
        ETD_2nd_Date_IsDisabled = true;
        ETD_3rd_Date_IsDisabled = true;
        ETD_4th_Date_IsDisabled = true;

        ETA_1st_Date_IsDisabled = true;
        ETA_2nd_Date_IsDisabled = true;
        ETA_3rd_Date_IsDisabled = true;
        ETA_4th_Date_IsDisabled = true;

        EA_1st_Date_IsDisabled = true;
        EA_2nd_Date_IsDisabled = true;
        EA_3rd_Date_IsDisabled = true;
        EA_4th_Date_IsDisabled = true;
        Received_Date_IsDisabled = true;
    }
    void selectedledger(ChangeEventArgs e)
    {
        SelectedString = e.Value.ToString();

    }
    async void ETD_1st_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { ETD_1st_Date_IsDisabled = false; }
        else
        { ETD_1st_Date_IsDisabled = true; }
    }
    async void ETD_2nd_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { ETD_2nd_Date_IsDisabled = false; }
        else
        { ETD_2nd_Date_IsDisabled = true; }
    }
    async void ETD_3rd_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { ETD_3rd_Date_IsDisabled = false; }
        else
        { ETD_3rd_Date_IsDisabled = true; }
    }
    async void ETD_4th_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { ETD_4th_Date_IsDisabled = false; }
        else
        { ETD_4th_Date_IsDisabled = true; }
    }
    async void ETA_1st_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { ETA_1st_Date_IsDisabled = false; }
        else
        { ETA_1st_Date_IsDisabled = true; }
    }
    async void ETA_2nd_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { ETA_2nd_Date_IsDisabled = false; }
        else
        { ETA_2nd_Date_IsDisabled = true; }
    }
    async void ETA_3rd_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { ETA_3rd_Date_IsDisabled = false; }
        else
        { ETA_3rd_Date_IsDisabled = true; }
    }
    async void ETA_4th_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { ETA_4th_Date_IsDisabled = false; }
        else
        { ETA_4th_Date_IsDisabled = true; }
    }
    async void EA_1st_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { EA_1st_Date_IsDisabled = false; }
        else
        { EA_1st_Date_IsDisabled = true; }
    }
    async void EA_2nd_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { EA_2nd_Date_IsDisabled = false; }
        else
        { EA_2nd_Date_IsDisabled = true; }
    }
    async void EA_3rd_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { EA_3rd_Date_IsDisabled = false; }
        else
        { EA_3rd_Date_IsDisabled = true; }
    }
    async void EA_4th_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { EA_4th_Date_IsDisabled = false; }
        else
        { EA_4th_Date_IsDisabled = true; }
    }
    async void Received_Date_CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { Received_Date_IsDisabled = false; }
        else
        { Received_Date_IsDisabled = true; }
    }

    private void AIT_Clicked(ChangeEventArgs changeEventArgs)
    {
        //double sum= requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //if (changeEventArgs.Value.ToString() != "") { finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString()); }
        //else { finaltotal = finaltotal + 0; }

        if (changeEventArgs.Value.ToString() != "") { AIT = Convert.ToDouble(changeEventArgs.Value.ToString()); }
        else { AIT = 0; }
        //AIT = Convert.ToDouble(changeEventArgs.Value.ToString());
        GetTotal();
    }
    private void VAT_Clicked(ChangeEventArgs changeEventArgs)
    {
        //double sum = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString());
        //VAT= Convert.ToDouble(changeEventArgs.Value.ToString());
        if (changeEventArgs.Value.ToString() != "") { VAT = Convert.ToDouble(changeEventArgs.Value.ToString()); }
        else { VAT = 0; }
        GetTotal();
    }
    private void ADJ_Clicked(ChangeEventArgs changeEventArgs)
    {
        //double sum = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString());
        if (changeEventArgs.Value.ToString() != "") { ADJ = Convert.ToDouble(changeEventArgs.Value.ToString()); }
        else { ADJ = 0; }
        GetTotal();
        //ADJ = Convert.ToDouble(changeEventArgs.Value.ToString());
    }
    private void Sea_Freight_Clicked(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs.Value.ToString() != "")
        {
            SeaFreight = Convert.ToDouble(changeEventArgs.Value.ToString());
        }
        else { SeaFreight = 0; }
        purchaseOrderModel.CARRING_WAY_COST = Convert.ToDecimal(SeaFreight);
        GetTotal();
    }
    private void GetTotal()
    {
        //if(AIT== 0 && VAT==0 && ADJ==0)
        //{ finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate)); }
        finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));

        if (AIT != 0)
        { finaltotal = finaltotal + AIT; }
        if (VAT != 0)
        { finaltotal = finaltotal + VAT; }
        if (ADJ != 0)
        { finaltotal = finaltotal + ADJ; }
        if (SeaFreight != 0)
        { finaltotal = finaltotal + SeaFreight; }
        double inwordValue = Convert.ToDouble(finaltotal);
        Inwords = NumberToWords.ConvertAmount(inwordValue);
        //else { finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate)); }
        //GRAND_TOTAL = finaltotal;
    }
    public class ListtoDataTable
    {
        public DataTable ToDataTable<T>(List<T> items)
        {
            DataTable dataTable = new DataTable(typeof(T).Name);
            //Get all the properties by using reflection
            PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
            foreach (PropertyInfo prop in Props)
            {
                //Setting column names as Property names
                dataTable.Columns.Add(prop.Name);
            }
            foreach (T item in items)
            {
                var values = new object[Props.Length];
                for (int i = 0; i < Props.Length; i++)
                {

                    values[i] = Props[i].GetValue(item, null);
                }
                dataTable.Rows.Add(values);
            }

            return dataTable;
        }
    }


    private async Task CreatePurchaseOrder()
    {

        pp.REQUISITION_NO = "1234";
        pp.REQUESTED_BY = "Asad";
        //var datea=await Http.PostJsonAsync<PurchaseOrderEntity>("https://localhost:44350/Report/CreateReport", purchaseOrder);
        //await _http.PostJsonAsync<UnitEntity>("api/units", unit);
        await Http.PostJsonAsync("https://localhost:44350/Report/CreateReport", purchaseOrder);
        //await Http.PostJsonAsync<PRE>(Utility.BaseUrl + "api/Purchase/GenerateReport/", pp);


        //int report_no = 1;
        //SALES_FROM_TO = "";
        //SALES_FROM_TO = DT_SALES_FROM.Text + "  to  " + DT_SALES_TO.Text;
        //string SEARCH_CONDITION = "";
        //SEARCH_CONDITION = GetSearchConditionForSales();
        //SearchReport1CustomerList(report_no, SEARCH_CONDITION);
        //CreateOutputReport(DS_OUTPUT_DATA);

        //PrintInformationOutputItem outputItem = new PrintInformationOutputItem();
        //try
        //{
        //    productList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product");
        //    DataTable DS = new DataTable();
        //    ListtoDataTable lsttodt = new ListtoDataTable();
        //    DataTable dt = lsttodt.ToDataTable(productList);
        //    DataTable dt1 = new DataTable();
        //    dt1.Columns.Add(new DataColumn("1", typeof(string)));
        //    //dt1.Rows[0].ItemArray[0] = 1;
        //    DS_OUTPUT_DATA.Tables.Add(dt);
        //    DS_OUTPUT_DATA.Tables.Add(dt1);
        //    //foreach (var items in productList)
        //    //{

        //    //    DS.Columns.Add(items.ITEM_CODE);
        //    //    DS.Columns.Add(items.ITEM_NAME);
        //    //    DS.Columns.Add(Convert.ToString(items.ITEM_RATE));



        //    //    //DS_OUTPUT_DATA.Tables.Add(items.ITEM_CODE);
        //    //    //DS_OUTPUT_DATA.Tables.Add(items.ITEM_NAME);
        //    //    //DS_OUTPUT_DATA.Tables.Add(Convert.ToString(items.ITEM_RATE));
        //    //    //DS_OUTPUT_DATA.Tables.Add(Convert.ToString("1"));

        //    //}
        //    //DS_OUTPUT_DATA = DS;

        //    outputItem.dataSet = DS_OUTPUT_DATA;
        //    if (DS_OUTPUT_DATA != null && DS_OUTPUT_DATA.Tables[0].Rows.Count > 0)
        //    { _ReportService.output(OutputReportSupport.GetReportConfig(outputItem), outputItem.dataSet); }
        //    else { }
        //}
        //catch (Exception ex)
        //{ }
        //_ReportService.output(OutputReportSupport.GetReportConfig(outputItem), outputItem.dataSet);
        //webCellReport1.FileName = "Purchase_Report";
        //webCellReport1.Report.Start();
        //webCellReport1.Report.File();
        //webCellReport1.Page.Start("Purchase", "1");

        //webCellReport1.Page.End();
        //webCellReport1.Report.End();
        //MemoryStream memoryStream = new MemoryStream();
        //webCellReport1.Report.SaveAs(memoryStream);
        //contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //fileName = "authors.xlsx";
        //Response.Clear();
        //Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //Response.AddHeader("content-disposition", "attachment; filename=" + "ABC" + ".xlsx");
        //Response.BinaryWrite(memoryStream.ToArray());
        //memoryStream.Close();
        //Response.End();


    }
    private async void CheckboxClicked(string vendor_Id, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            purchaseOrderModel.VENDOR_ID = Convert.ToInt32(vendor_Id);
        }
    }
    public async Task SavePurchaseOrder()
    {

        if (IsValidation() != true)
        {
            try
            {
                //purchaseRequisition.REQUEST_DATE = request_date;
                //purchaseRequisition.REQUIRED_DATE = require_date;
                //purchaseRequisition.REQUISITION_TOTAL = requisitionTotal;
                //purchaseRequisition.STATUS = "Open";
                //purchaseRequisition.REG_BY = "Asad";
                //po_date = "2022/05/10";
                //string iDate = "05/05/2005";
                //DateTime oDate = Convert.ToDateTime(po_date);
                purchaseOrderModel.PO_DATE = po_date; //Convert.ToDateTime(po_date, "mm/dd/yyyy"); //Convert.ToString(po_date,"");

                purchaseOrderModel.QUOTATION_REFERANCE_DATE = quotation_ref_date;
                purchaseOrderModel.REG_BY = "Asad";
                purchaseOrderModel.CONSIGNEE_ID = 1;
                if (ETD_1st_Date_IsDisabled != true)
                { purchaseOrderModel.ETD_1st_Date = Convert.ToString(ETD_1st_Date); }
                else { purchaseOrderModel.ETD_1st_Date = null; }
                if (ETD_2nd_Date_IsDisabled != true)
                { purchaseOrderModel.ETD_2nd_Date = Convert.ToString(ETD_2nd_Date); }
                else { purchaseOrderModel.ETD_2nd_Date = null; }
                if (ETD_3rd_Date_IsDisabled != true)
                { purchaseOrderModel.ETD_3rd_Date = Convert.ToString(ETD_3rd_Date); }
                else { purchaseOrderModel.ETD_3rd_Date = null; }
                if (ETD_4th_Date_IsDisabled != true)
                { purchaseOrderModel.ETD_4th_Date = Convert.ToString(ETD_4th_Date); }
                else { purchaseOrderModel.ETD_4th_Date = null; }

                if (ETA_1st_Date_IsDisabled != true)
                { purchaseOrderModel.ETA_1st_Date = Convert.ToString(ETA_1st_Date); }
                else { purchaseOrderModel.ETA_1st_Date = null; }
                if (ETA_2nd_Date_IsDisabled != true)
                { purchaseOrderModel.ETA_2nd_Date = Convert.ToString(ETA_2nd_Date); }
                else { purchaseOrderModel.ETA_2nd_Date = null; }
                if (ETA_3rd_Date_IsDisabled != true)
                { purchaseOrderModel.ETA_3rd_Date = Convert.ToString(ETA_3rd_Date); }
                else { purchaseOrderModel.ETA_3rd_Date = null; }
                if (ETA_4th_Date_IsDisabled != true)
                { purchaseOrderModel.ETA_4th_Date = Convert.ToString(ETA_4th_Date); }
                else { purchaseOrderModel.ETA_4th_Date = null; }

                if (EA_1st_Date_IsDisabled != true)
                { purchaseOrderModel.EA_WH_1st_Date = Convert.ToString(EA_1st_Date); }
                else { purchaseOrderModel.EA_WH_1st_Date = null; }
                if (EA_2nd_Date_IsDisabled != true)
                { purchaseOrderModel.EA_WH_2nd_Date = Convert.ToString(EA_2nd_Date); }
                else { purchaseOrderModel.EA_WH_2nd_Date = null; }
                if (EA_3rd_Date_IsDisabled != true)
                { purchaseOrderModel.EA_WH_3rd_Date = Convert.ToString(EA_3rd_Date); }
                else { purchaseOrderModel.EA_WH_3rd_Date = null; }
                if (EA_4th_Date_IsDisabled != true)
                { purchaseOrderModel.EA_WH_4th_Date = Convert.ToString(EA_4th_Date); }
                else { purchaseOrderModel.EA_WH_4th_Date = null; }

                if (Received_Date_IsDisabled != true)
                { purchaseOrderModel.RECEIVED_DATE = (Received_Date); }
                else { purchaseOrderModel.RECEIVED_DATE = null; }
                purchaseOrderModel.GRAND_TOTAL = finaltotal;



                purchaseOrderModel.REG_BY = "ASAD";
                purchaseOrderModel.TRUNSECTION_TYPE = "Purchase";

                //string code = purchaseOrderModel.PO_NUMBER_LONG_CODE.Replace("/", "-");
                purchaseOrderModel.PO_NUMBER_LONG_CODE = await Http.GetStringAsync(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderNo");
                purchaseOrderModel.PACKAGING_INSTRUCTION = packaging_instruction_No;
                purchaseOrderModel.OTHER_TERMS_AND_CONDITION = terms_And_Conditions_No;
                if (IL_OPTION == 1)
                {
                    purchaseOrderModel.CARRING_WAY_NAME = "Transport";
                }

                //billno = await Http.GetStringAsync(Utility.BaseUrl + "api/Accounce/GetTransectionUnicCode");
                purchaseOrderModel.BILL_NO = billno;

                //----------Account Master Data
                string d = po_date.Substring(0, 2);
                string m = po_date.Substring(3, 2);
                string y = po_date.Substring(6, 4);
                DateTime dd = Convert.ToDateTime(y + "-" + m + "-" + d);
                //+ "-" + Convert.ToDateTime(d).Month + "-" + Convert.ToDateTime(d).Day); ;
                //DateTime dtt = Convert.ToDateTime(dd);
                accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 3);
                accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(dd);
                accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
                accCompanyVoucherModel.LEDGER_NAME = vendorList.Find(x => x.VENDOR_ID== purchaseOrderModel.VENDOR_ID).VENDOR_NAME;
                accCompanyVoucherModel.COMP_VOUCHER_AMOUNT = Convert.ToDecimal(finaltotal);
                accCompanyVoucherModel.COMP_VOUCHER_ADD_AMOUNT = 0;
                accCompanyVoucherModel.COMP_VOUCHER_LESS_AMOUNT = 0;
                accCompanyVoucherModel.COMP_VOUCHER_NET_AMOUNT = Convert.ToDecimal(finaltotal);
                accCompanyVoucherModel.COMP_VOUCHER_PROCESS_AMOUNT = 0;
                accCompanyVoucherModel.COMP_VOUCHER_NARRATION = "";
                accCompanyVoucherModel.COMP_VOUCHER_TYPE = 3;
                accCompanyVoucherModel.ENTRYBY = "Asaduzzaman";
                accCompanyVoucherModel.UPDATEBY = "Asaduzzaman";
                //-------------------------------

                //-----Acc Voucher Details

                // Create a List of objects
                List<ACC_VOUCHER_MODEL> voucherItem = new List<ACC_VOUCHER_MODEL>
                    {
                        new ACC_VOUCHER_MODEL {
                              COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                              ,VOUCHER_REF_KEY=""
                              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                              ,COMP_VOUCHER_TYPE=3
                              ,LEDGER_NAME=vendorList.Find(x => x.VENDOR_ID == purchaseOrderModel.VENDOR_ID).VENDOR_NAME
                              ,VOUCHER_DEBIT_AMOUNT=0
                              ,VOUCHER_CREDIT_AMOUNT=Convert.ToDecimal(finaltotal)
                              ,VOUCHER_ADD_AMOUNT=0
                              ,VOUCHER_LESS_AMOUNT=0
                              ,VOUCHER_TOBY="Cr"
                              ,VOUCHER_FC_DEBIT_AMOUNT=0
                              ,VOUCHER_FC_CREDIT_AMOUNT = 0
                        },
                        new ACC_VOUCHER_MODEL {
                              COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                              ,VOUCHER_REF_KEY=""
                              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                              ,COMP_VOUCHER_TYPE=3
                              ,LEDGER_NAME=SelectedString
                              ,VOUCHER_DEBIT_AMOUNT=Convert.ToDecimal(finaltotal)
                              ,VOUCHER_CREDIT_AMOUNT=0
                              ,VOUCHER_ADD_AMOUNT=0
                              ,VOUCHER_LESS_AMOUNT=0
                              ,VOUCHER_TOBY="Dr"
                              ,VOUCHER_FC_DEBIT_AMOUNT=0
                              ,VOUCHER_FC_CREDIT_AMOUNT = 0

                        }
                    };
                accCompanyVoucherModel.accVoucherList= voucherItem;
                purchaseOrderModel.acc_com_VoucherModel = accCompanyVoucherModel;
                purchaseOrderModel.acc_Voucher_Model = voucherItem;
                //foreach (var item in voucherItem)
                //{
                //    voucherDetails = new ACC_VOUCHER_MODEL();
                //    voucherDetails.COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO;
                //    voucherDetails.VOUCHER_REF_KEY = "";
                //    voucherDetails.BRANCH_ID = accCompanyVoucherModel.BRANCH_ID;
                //    voucherDetails.COMP_VOUCHER_DATE = accCompanyVoucherModel.COMP_VOUCHER_DATE;
                //    voucherDetails.COMP_VOUCHER_TYPE = 3;
                //    voucherDetails.LEDGER_NAME = vendorList.Find(x => x.VENDOR_ID == purchaseOrderModel.VENDOR_ID).VENDOR_NAME;
                //    voucherDetails.VOUCHER_DEBIT_AMOUNT = item.debitAmount;
                //    voucherDetails.VOUCHER_CREDIT_AMOUNT = item.creditAmount;
                //    voucherDetails.VOUCHER_ADD_AMOUNT = item.creditAmount;
                //    voucherDetails.VOUCHER_LESS_AMOUNT = item.creditAmount;
                //    voucherDetails.VOUCHER_TOBY = item.symbol;
                //    voucherDetails.VOUCHER_FC_DEBIT_AMOUNT = 0;
                //    voucherDetails.VOUCHER_FC_CREDIT_AMOUNT = 0;
                //    if (item.ChequeNo != "" && item.ChequeNo != null && item.ChequeNo != "NULL")
                //    {
                //        voucherDetails.VOUCHER_CHEQUE_NUMBER = item.ChequeNo;
                //        voucherDetails.VOUCHER_CHEQUE_DATE = item.ChequeDate;
                //        voucherDetails.VOUCHER_CHEQUE_DRAWN_ON = item.DrawnOn;
                //    }
                //    //paymentVoucherDetails.Add(voucherDetails);
                //    accCompanyVoucherModel.accVoucherList.Add(voucherDetails);
                //}

                //---------

                //purchaseOrderModel.PO_NUMBER_LONG_CODE = await Http.GetStringAsync(Utility.BaseUrl + "api/Purchase/GetPONo");
                foreach (var item  in requestItemList)
                {
                    accVoucherItem = new ACC_VOUCHER_ITEM_MODEL();
                    accVoucherItem.BRANCH_ID = accCompanyVoucherModel.BRANCH_ID;
                    accVoucherItem.COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO;
                    accVoucherItem.COMP_VOUCHER_TYPE = accCompanyVoucherModel.COMP_VOUCHER_TYPE;
                    accVoucherItem.COMP_VOUCHER_DATE = accCompanyVoucherModel.COMP_VOUCHER_DATE;
                    accVoucherItem.STOCKITEM_NAME = productList.Find(x => x.ITEM_ID == item.ITEM_ID).ITEM_NAME;
                    accVoucherItem.BILL_QUANTITY = Convert.ToDecimal(item.Quantity);
                    accVoucherItem.BILL_RATE = Convert.ToDecimal(item.Rate);
                    accVoucherItem.GODOWNS_NAME = purchaseOrderModel.SHIPPING_ADDRESS;
                    accVoucherItem.BILL_UOM = item.UOM;
                    accVoucherItemList.Add(accVoucherItem);


                }
                purchaseOrderModel.acc_VoucherItemList = accVoucherItemList;

                var id = await Http.GetJsonAsync<int>(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderId/" + purchaseOrderModel.PO_NUMBER_LONG_CODE);
                foreach (var item in requestItemList)
                {
                    details = new PurchaseOrderDetailsEntity();
                    details.PO_ID = id;
                    details.PO_NUMBER_LONG_CODE = purchaseOrderModel.PO_NUMBER_LONG_CODE;
                    details.ITEM_ID = item.ITEM_ID;
                    details.QUANTITY = item.Quantity;
                    details.UNIT_PRICE = item.Rate;
                    details.PACK_SIZE = item.PACK_SIZE;
                    details.UOM = item.UOM;


                    purchaseDetailsList.Add(details);
                }
                purchaseOrderModel.pOrderDetailsList = purchaseDetailsList;
                var data = await Http.PostJsonAsync<PurchaseOrderModel>(Utility.BaseUrl + "api/Purchase/AddPurchaseOrder", purchaseOrderModel);
                //var requisition_details = await Http.PostJsonAsync<List<PurchaseOrderDetailsEntity>>(Utility.BaseUrl + "api/Purchase/AddPurchaseOrderDetails", purchaseDetailsList);
                //var porder = await Http.PostJsonAsync<ACC_COMPANY_VOUCHER_MODEL>(Utility.BaseUrl + "api/Transection/AddPaymentVoucher", accCompanyVoucherModel);
                transectionModel.BILL_NO = billno;
                //var accounceTransection = await Http.PostJsonAsync<Acc_TransectionModel>(Utility.BaseUrl + "api/Accounce/AddTransection", transectionModel);
                //var transectionId = await Http.GetJsonAsync<int>(Utility.BaseUrl + "api/Accounce/GetTransectionId");



                //ledgerEntry1.TRANSACTION_ID = transectionId;
                ledgerEntry1.ACCOUNT_ID = 18;
                ledgerEntry1.ENTRY_TYPE = "D";
                ledgerEntry1.AMOUNT = finaltotal;
                ledgerEntry1.EMPLOYEE_ID = 1;
                //----------
                //ledgerEntry2.TRANSACTION_ID = transectionId;
                ledgerEntry2.ACCOUNT_ID = 6;
                ledgerEntry2.ENTRY_TYPE = "C";
                ledgerEntry2.AMOUNT = finaltotal;
                ledgerEntry2.EMPLOYEE_ID = 1;


                ledgerModelList.Add(ledgerEntry1);
                ledgerModelList.Add(ledgerEntry2);
                //var accounceLedger = await Http.PostJsonAsync<List<Acc_LedgerModel>>(Utility.BaseUrl + "api/Accounce/AddLedger", ledgerModelList);
                toastService.ShowSuccess("Order Place Successfully!!!");
            }
            catch (Exception ex)
            {
                toastService.ShowError("Not Save ! " + ex.Message);
            }

        }
    }

    private bool IsValidation()
    {
        bool flag = false;
        //if (purchaseOrderModel.PO_NUMBER_LONG_CODE == "" || purchaseOrderModel.PO_NUMBER_LONG_CODE == string.Empty || purchaseOrderModel.PO_NUMBER_LONG_CODE == null)
        //{
        //    toastService.ShowWarning("Requisition No cannot be empty!");
        //    flag = true;
        //}

        return flag;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("JsInteropDatepicker");

    }
    private async void DeliveryTimeClicked(ChangeEventArgs change)
    {
        if (change.Value.ToString() == "1")
        {

            deliveryTime = "1";
            purchaseOrderModel.TERMS_OF_DELIVERY = "Urgent";
        }
        else
        {
            deliveryTime = "2";
        }
        StateHasChanged();
    }
    private async void ComoditySizeClicked(ChangeEventArgs change)
    {
        if (change.Value.ToString() == "1")
        {

            comodity = "1";
            purchaseOrderModel.CONTAINER_SIZE = "LCL";
        }
        else
        {
            comodity = "2";
        }
        StateHasChanged();
    }
    private async void DeliveryModeClicked(ChangeEventArgs eventArgs)
    {
        purchaseOrder.DELIVERY_MODE = eventArgs.Value.ToString();
    }
    private async void PaymentTermClicked(ChangeEventArgs changeEvent)
    {
        purchaseOrder.PAYMENT_TERM = changeEvent.Value.ToString();
    }
    public async Task SaveShippingAddress()
    {

        if (IsValidation_Unit() != true)
        {
            try
            {
                var data = await Http.PostJsonAsync<ShippingAddressModel>(Utility.BaseUrl + "api/Setup/AddShippingAddress", shippingAddressModel);
                toastService.ShowSuccess("Insert Successfully!!!");
            }
            catch (Exception ex)
            {

            }

        }
        shippingAddressList = await Http.GetJsonAsync<List<ShippingAddressModel>>(Utility.BaseUrl + "api/Setup/GetShippingAddress");
    }
    private bool IsValidation_Unit()
    {
        bool flag = false;
        if (shippingAddressModel.SHIPPING_ADDRESS == "" || shippingAddressModel.SHIPPING_ADDRESS == string.Empty || shippingAddressModel.SHIPPING_ADDRESS == null)
        {
            toastService.ShowWarning("Shipping Address Cannot be empty!");
            flag = true;
        }

        return flag;
    }
    //------
    public async Task SaveDeliveryMode()
    {

        if (IsValidation_DeliveryMode() != true)
        {
            try
            {
                var data = await Http.PostJsonAsync<DeliveryModeModel>(Utility.BaseUrl + "api/Setup/AddDeliveryMode", deliveryModeModel);
                toastService.ShowSuccess("Insert Successfully!!!");
            }
            catch (Exception ex)
            {

            }

        }
        deliveryModeList = await Http.GetJsonAsync<List<DeliveryModeModel>>(Utility.BaseUrl + "api/Setup/GetDeliveryMode");
    }
    private bool IsValidation_DeliveryMode()
    {
        bool flag = false;
        if (deliveryModeModel.DELIVERY_MODE == "" || deliveryModeModel.DELIVERY_MODE == string.Empty || deliveryModeModel.DELIVERY_MODE == null)
        {
            toastService.ShowWarning("Delivery Mode Cannot be empty!");
            flag = true;
        }

        return flag;
    }
    //----
    public async Task SavePaymentTerm()
    {

        if (IsValidation_PaymentTerm() != true)
        {
            try
            {
                var data = await Http.PostJsonAsync<DeliveryModeModel>(Utility.BaseUrl + "api/Setup/AddPaymentTerm", paymentTerm);
                toastService.ShowSuccess("Insert Successfully!!!");
            }
            catch (Exception ex)
            {

            }

        }
        paymentTermList = await Http.GetJsonAsync<List<PaymentTermModel>>(Utility.BaseUrl + "api/Setup/GetPaymentTerm");
    }
    private bool IsValidation_PaymentTerm()
    {
        bool flag = false;
        if (paymentTerm.PAYMENT_TERM == "" || paymentTerm.PAYMENT_TERM == string.Empty || paymentTerm.PAYMENT_TERM == null)
        {
            toastService.ShowWarning("Payment Term Cannot be empty!");
            flag = true;
        }

        return flag;
    }

    private async void FCL_1_Clicked(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            purchaseOrderModel.CONTAINER_SIZE = "FCL(1 X 20 Ft)";
        }
    }
    private async void FCL_2_Clicked(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            purchaseOrderModel.CONTAINER_SIZE = "FCL(1 X 40 Ft)";
        }
    }
    //----
    public async Task SaveCountry()
    {

        if (IsValidation_Country() != true)
        {
            try
            {
                var data = await Http.PostJsonAsync<CountryModel>(Utility.BaseUrl + "api/Setup/AddCountry", country);
                toastService.ShowSuccess("Insert Successfully!!!");
            }
            catch (Exception ex)
            {

            }

        }
        countryList = await Http.GetJsonAsync<List<CountryModel>>(Utility.BaseUrl + "api/Setup/GetCountry");
    }
    public async Task SaveCurrency()
    {

        if (IsValidation_Currency() != true)
        {
            try
            {
                var data = await Http.PostJsonAsync<CurrencyModel>(Utility.BaseUrl + "api/Setup/SaveCurrency", currency);
                toastService.ShowSuccess("Insert Successfully!!!");
            }
            catch (Exception ex)
            {

            }

        }
        currencyModel = await Http.GetJsonAsync<List<CurrencyModel>>(Utility.BaseUrl + "api/Setup/GetCurrency");
    }
    private bool IsValidation_Country()
    {
        bool flag = false;
        if (country.COUNTRY_NAME == "" || country.COUNTRY_NAME == string.Empty || country.COUNTRY_NAME == null)
        {
            toastService.ShowWarning("Country Field Cannot be empty!");
            flag = true;
        }

        return flag;
    }
    private bool IsValidation_Currency()
    {
        bool flag = false;
        if (currency.CURRENCY_NAME == "" || currency.CURRENCY_NAME == string.Empty || currency.CURRENCY_NAME == null)
        {
            toastService.ShowWarning("Currency Field Cannot be empty!");
            flag = true;
        }

        return flag;
    }
    //-

    public async Task SavePackagingInstruction()
    {

        if (IsValidation_Ins() != true)
        {
            try
            {
                var data = await Http.PostJsonAsync<PackagingInstructionModel>(Utility.BaseUrl + "api/Setup/AddPackagingInstruction", packagingIns);
                toastService.ShowSuccess("Insert Successfully!!!");
            }
            catch (Exception ex)
            {

            }

        }
        packagingInsList = await Http.GetJsonAsync<List<PackagingInstructionModel>>(Utility.BaseUrl + "api/Setup/GetPackagingInstruction");
    }
    private bool IsValidation_Ins()
    {
        bool flag = false;
        if (packagingIns.PACKAGING_INSTRUCTION == "" || packagingIns.PACKAGING_INSTRUCTION == string.Empty || packagingIns.PACKAGING_INSTRUCTION == null)
        {
            toastService.ShowWarning("Instruction Field Cannot be empty!");
            flag = true;
        }

        return flag;
    }
    //-

    public async Task SaveTermsConditions()
    {

        if (IsValidation_TermsConditions() != true)
        {
            try
            {
                var data = await Http.PostJsonAsync<PurchaseTermsConditionsModel>(Utility.BaseUrl + "api/Setup/AddTermsConditions", termsconditions);
                toastService.ShowSuccess("Insert Successfully!!!");
            }
            catch (Exception ex)
            {

            }

        }
        termsConditionList = await Http.GetJsonAsync<List<PurchaseTermsConditionsModel>>(Utility.BaseUrl + "api/Setup/GetTermsConditions");
    }
    private bool IsValidation_TermsConditions()
    {
        bool flag = false;
        if (termsconditions.TERMS_AND_CONDITIONS == "" || termsconditions.TERMS_AND_CONDITIONS == string.Empty || termsconditions.TERMS_AND_CONDITIONS == null)
        {
            toastService.ShowWarning("Terms & Condition Field Cannot be empty!");
            flag = true;
        }

        return flag;
    }
    private async void Local_Tab_Click()
    {
        _localcolor = "transparent;color:black;border:2px groove blue";
        _intcolor = "transparent;color:black";
        IL_OPTION = 1;
        selectedVendorList = vendorList.FindAll(x => x.VENDOR_TYPE_STATUS == "Local");
        pocode2 = "L";
        //pocode3 = "PO" + pocode2 + "-" + pocode4 + "-" + CODE + "-TL";
        await GetPreCode();
        await GetPaymentTerm();
    }
    private async void Int_Tab_Click()
    {
        _localcolor = "transparent;color:black";
        _intcolor = "transparent;color:black;border:2px groove blue";
        IL_OPTION = 2;
        selectedVendorList = vendorList.FindAll(x => x.VENDOR_TYPE_STATUS == "International");
        pocode2 = "IN";
        //pocode3 = "PO" + pocode2 + "-" + pocode4 + "-" + CODE + "-TL";
        await GetPreCode();
        await GetPaymentTerm();


        //list.Where(w => w.Name == "height").ToList().ForEach(s => s.Value = 30);
    }
    private async void Short_Form_Clicked(ChangeEventArgs args)
    {
        pocode4 = args.Value.ToString();
        //pocode3 = "PO" + pocode2 + "-" + "-" + CODE + pocode4 + "-TL";
        await GetPreCode();
    }
    public List<string> checkedPackIds { get; set; } = new List<string>();
    void PackagingCheckboxClicked(string packagingInsid, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!checkedPackIds.Contains(packagingInsid))
            {
                checkedPackIds.Add(packagingInsid);
            }
        }
        else
        {
            if (checkedPackIds.Contains(packagingInsid))
            {
                checkedPackIds.Remove(packagingInsid);
            }
        }
        packaging_instruction_No = String.Join(",", checkedPackIds);
    }
    public List<string> checkedOtherTermsIds { get; set; } = new List<string>();
    void OtherTermsClicked(string termsConditionids, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!checkedOtherTermsIds.Contains(termsConditionids))
            {
                checkedOtherTermsIds.Add(termsConditionids);
            }
        }
        else
        {
            if (checkedOtherTermsIds.Contains(termsConditionids))
            {
                checkedOtherTermsIds.Remove(termsConditionids);
            }
        }
        terms_And_Conditions_No = String.Join(",", checkedOtherTermsIds);
    }
    public async Task EditItem(int Id)
    {
        orderItem.ITEM_ID = requestItemList.Find(x => x.ITEM_ID == Id).ITEM_ID;
        orderItem.PACK_SIZE = requestItemList.Find(x => x.ITEM_ID == Id).PACK_SIZE;
        orderItem.UOM = requestItemList.Find(x => x.ITEM_ID == Id).UOM;
        orderItem.Quantity = requestItemList.Find(x => x.ITEM_ID == Id).Quantity;
        orderItem.Rate = requestItemList.Find(x => x.ITEM_ID == Id).Rate;
    }
    public async Task UpdateItem()
    {

        requestItemList.Where(w => w.ITEM_ID == orderItem.ITEM_ID).ToList().ForEach(s => s.ITEM_ID = Convert.ToInt32(orderItem.ITEM_ID));
        requestItemList.Where(w => w.ITEM_ID == orderItem.ITEM_ID).ToList().ForEach(s => s.PACK_SIZE = orderItem.PACK_SIZE);
        requestItemList.Where(w => w.ITEM_ID == orderItem.ITEM_ID).ToList().ForEach(s => s.UOM = orderItem.UOM);
        requestItemList.Where(w => w.ITEM_ID == orderItem.ITEM_ID).ToList().ForEach(s => s.Quantity = orderItem.Quantity);
        requestItemList.Where(w => w.ITEM_ID == orderItem.ITEM_ID).ToList().ForEach(s => s.Rate = orderItem.Rate);
        GetTotal();
        StateHasChanged();
    }
    private async Task GetCurrencyName(ChangeEventArgs changeEvent)
    {
        string val = changeEvent.Value.ToString();
        purchaseOrderModel.CURRENCY_NAME = val;
        StateHasChanged();
    }
    //private void CreateOutputReport(DataSet reprotOutputData)
    //{
    //    PrintInformationOutputItem outputItem = new PrintInformationOutputItem();
    //    try
    //    {
    //        outputItem.dataSet = DS_OUTPUT_DATA;
    //        if (DS_OUTPUT_DATA != null && DS_OUTPUT_DATA.Tables[0].Rows.Count > 0)
    //        { _ReportService.output(OutputReportSupport.GetReportConfig(outputItem), outputItem.dataSet); }
    //        else { MessageBox.Show("", "Info"); }
    //    }
    //    catch (Exception ex)
    //    {  }

    //}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
