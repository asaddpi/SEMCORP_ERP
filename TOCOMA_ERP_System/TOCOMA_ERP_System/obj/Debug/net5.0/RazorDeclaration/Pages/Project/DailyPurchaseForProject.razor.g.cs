// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Pages.Project
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models.WebsiteModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/DailyPurchaseForProject/{voucherNo}")]
    public partial class DailyPurchaseForProject : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 275 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Project\DailyPurchaseForProject.razor"
       
    List<PurchaseOrderViewModel> purchaseviewList = new List<PurchaseOrderViewModel>();
    List<PurchaseOrderViewModel> purchaseviewList_forPagination = new List<PurchaseOrderViewModel>();
    List<ItemEntity> productList = new List<ItemEntity>();
    OrderItemEntity orderItem = new OrderItemEntity();
    List<ItemEntity> itemNameList = new List<ItemEntity>();
    PurchaseOrderModel porderModel = new PurchaseOrderModel();
    PurchaseOrderDetailsEntity podetailsEntity = new PurchaseOrderDetailsEntity();
    List<PurchaseOrderDetailsEntity> podetailsList = new List<PurchaseOrderDetailsEntity>();
    PurchaseOrderViewModel porderView = new PurchaseOrderViewModel();
    [Parameter]
    public string voucherNo { get; set; }
    public int pageSize { get; set; }
    public int TotalPage { get; set; }
    public int Currentpage { get; set; }
    public int StartNumber { get; set; }
    public int EndNumber { get; set; }
    public int display_row_no { get; set; }
    public string searchitem { get; set; } = "";
    List<string> itemnameList;
    string currentDate;
    string selected_date;
    string fdate;
    int poId;
    int podetailsId;
    string from_date;
    string to_date;
    string itemTotal;
    string GrandTotal;

    protected override async Task OnInitializedAsync()
    {
        await GetList();
        productList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product/GetProjectItem");


        itemnameList = productList.Select(f => f.ITEM_NAME).Distinct().ToList();



        display_row_no = 10;
        Pagination();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("JsInteropDatepicker");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private async Task GetList()
    {
        purchaseviewList = await Http.GetJsonAsync<List<PurchaseOrderViewModel>>(Utility.BaseUrl + "api/Purchase/GetPurchaseListForProject/"+ voucherNo);
        purchaseviewList_forPagination = await Http.GetJsonAsync<List<PurchaseOrderViewModel>>(Utility.BaseUrl + "api/Purchase/GetPurchaseListForProject/"+voucherNo);
        porderView = await Http.GetJsonAsync<PurchaseOrderViewModel>(Utility.BaseUrl + "api/Purchase/GetPurchaseItemSumForProject");
        GetSum();

    }
    private void GetSum()
    {
        double total = purchaseviewList.Sum(x => Convert.ToDouble(x.UNIT_TOTAL));
        itemTotal = "0";
        double gtotal = total + porderView.CARRING_WAY_COST + porderView.LABOUR_COST + porderView.OTHERS_COST;
        itemTotal = String.Format("{0:#,###,###.##}", total);
        GrandTotal = String.Format("{0:#,###,###.##}", gtotal);
    }
    private async Task GetPurchaseByDate()
    {
        if (from_date != null && to_date != null)
        {
            string fdate = from_date.Replace("/", "-");
            string tdate = to_date.Replace("/", "-");
            string url = "api/Purchase/GetPurchaseListForProjectByDate/" + fdate + "/" + tdate;
            purchaseviewList = await Http.GetJsonAsync<List<PurchaseOrderViewModel>>(Utility.BaseUrl + "api/Purchase/GetPurchaseListForProjectByDate/" + fdate + "/" + tdate);
            purchaseviewList_forPagination = await Http.GetJsonAsync<List<PurchaseOrderViewModel>>(Utility.BaseUrl + "api/Purchase/GetPurchaseListForProjectByDate/" + fdate + "/" + tdate);
            porderView = new PurchaseOrderViewModel();
            porderView = await Http.GetJsonAsync<PurchaseOrderViewModel>(Utility.BaseUrl + "api/Purchase/GetPurchaseItemSumForProject_By_Date/" + fdate + "/" + tdate);
            GetSum();
            Pagination();
        }
        else { toastService.ShowWarning("Please Select Date"); }

    }

    public async Task UpdatePO()
    {
        try
        {
            porderModel.PO_DATE = currentDate;
            porderModel.PO_ID = purchaseviewList.Find(x => x.PO_DETAILS_ID == podetailsId).PO_ID;
            //---Details table
            podetailsEntity = new PurchaseOrderDetailsEntity();
            podetailsEntity.ITEM_NAME = searchitem;
            podetailsEntity.ITEM_ID = purchaseviewList.Find(x => x.PO_DETAILS_ID == podetailsId).ITEM_ID;
            podetailsEntity.PO_DETAILS_ID = podetailsId;
            podetailsEntity.QUANTITY = orderItem.Quantity;
            podetailsEntity.UNIT_PRICE = orderItem.Rate;
            podetailsEntity.UNIT_TOTAL = orderItem.Total;
            podetailsList.Add(podetailsEntity);
            porderModel.pOrderDetailsList = podetailsList;


            var data = await Http.PutJsonAsync<PurchaseOrderModel>(Utility.BaseUrl + "api/Purchase/UpdatePurchaseForProject", porderModel);
            await GetList();
            toastService.ShowSuccess("Update Successfully!!!");
        }
        catch (Exception ex)
        {
            toastService.ShowError("Some error !");
        }

    }
    private async void GetDate(ChangeEventArgs change)
    {
        selected_date = change.Value.ToString();
        fdate = Convert.ToDateTime(selected_date).Day.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(selected_date).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(selected_date).Year;
    }
    public async Task EditItem(int Id)
    {
        podetailsId = Id;

        currentDate = purchaseviewList.Find(x => x.PO_DETAILS_ID == Id).PO_DATE;
        searchitem = purchaseviewList.Find(x => x.PO_DETAILS_ID == Id).ITEM_NAME;
        orderItem.Quantity = Convert.ToDouble(purchaseviewList.Find(x => x.PO_DETAILS_ID == Id).QUANTITY);
        orderItem.UOM = purchaseviewList.Find(x => x.PO_DETAILS_ID == Id).UOM;
        orderItem.Rate = purchaseviewList.Find(x => x.PO_DETAILS_ID == Id).UNIT_PRICE;
        orderItem.Total = purchaseviewList.Find(x => x.PO_DETAILS_ID == Id).UNIT_TOTAL;






        //currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');
        //currentDate=Convert.ToDateTime(dt).Day.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(dt).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(dt).Year;
        //currentDate=Convert.ToDateTime(dt).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(dt).Day.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(dt).Year;

        //orderItem.PACK_SIZE = requestItemList.Find(x => x.ITEM_ID == Id).PACK_SIZE;
        //orderItem.UOM = requestItemList.Find(x => x.ITEM_ID == Id).UOM;
        //orderItem.Quantity = requestItemList.Find(x => x.ITEM_ID == Id).Quantity;
        //orderItem.Rate = requestItemList.Find(x => x.ITEM_ID == Id).Rate;
    }
    //private async Task Delete(int Id)
    //{

    //    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
    //        return;

    //    await Http.DeleteAsync(Utility.BaseUrl + "api/Purchase/DeletePurchaseItem/" + Id);
    //    await GetBrand();
    //}
    public async Task SelectedItm(string param_itm)
    {
        //itemName = param_itm;
        searchitem = param_itm;
        //unitId = itemNameList.Find(x => x.ITEM_NAME == searchitem).UNIT_ID;
        //unitName = itemNameList.Find(x => x.ITEM_NAME == searchitem).UOM;
        //itemEntity.UNIT_ID = unitId;



        StateHasChanged();
    }
    private void Pagination()
    {
        pageSize = display_row_no;
        if (purchaseviewList_forPagination.Count > 0)
        {
            purchaseviewList = purchaseviewList_forPagination.Take(pageSize).ToList();
            TotalPage = (int)Math.Ceiling(purchaseviewList_forPagination.Count() / (decimal)pageSize);
            StartNumber = purchaseviewList.FirstOrDefault().SL;
            EndNumber = purchaseviewList[purchaseviewList.Count - 1].SL;
        }

    }
    public async Task GetPagination(ChangeEventArgs change)
    {
        if (change.Value != "")
        {
            int n = Convert.ToInt32(change.Value);

            display_row_no = n;
            pageSize = display_row_no;
            if (purchaseviewList_forPagination.Count > 0)
            {
                purchaseviewList = purchaseviewList_forPagination.Take(pageSize).ToList();
                TotalPage = (int)Math.Ceiling(purchaseviewList_forPagination.Count() / (decimal)pageSize);
                StartNumber = purchaseviewList.FirstOrDefault().SL;
                EndNumber = purchaseviewList[purchaseviewList.Count - 1].SL;
            }
        }

    }
    private void UpdateList(int pageNumber)
    {
        purchaseviewList = purchaseviewList_forPagination.Skip(pageNumber * pageSize).Take(pageSize).ToList();
        Currentpage = pageNumber;
        if (purchaseviewList.Count > 0)
        {
            StartNumber = purchaseviewList.FirstOrDefault().SL;
            EndNumber = purchaseviewList[purchaseviewList.Count - 1].SL;
        }

    }
    private void NavigatTo(string direction)
    {
        if (direction == "prev" && Currentpage != 0)
            Currentpage -= 1;
        if (direction == "next" && Currentpage != TotalPage - 1)
            Currentpage += 1;

        UpdateList(Currentpage);
    }
    private async void GetReport()
    {
        //stockStatementList = new List<RStockInformation>();
        //stockStatementList = await Http.GetJsonAsync<List<RStockInformation>>(Utility.BaseUrl + "api/Purchase/GetStockStatement/" + fromdate + "/" + todate);
        SessionData.From_date = from_date;
        SessionData.To_date = to_date;
        SessionData.purchaseRecortList = purchaseviewList;
        await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetPurchaseStatement", "_blank");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
