// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Pages.Sales
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models.WebsiteModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Sales\SalesOrder.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/SalesOrder/{quotationNo}")]
    public partial class SalesOrder : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 660 "D:\SEMCORP\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Sales\SalesOrder.razor"
       
    List<CustomerModel> customerList = new List<CustomerModel>();
    SalesOrderModel salesOrder = new SalesOrderModel();
    CustomerModel customer = new CustomerModel();
    List<EmployeeModel> employeeList = new List<EmployeeModel>();
    SalesOrderItemDetailsModel salesItemDetails = new SalesOrderItemDetailsModel();
    List<SalesOrderItemDetailsModel> salesItemDetailsList = new List<SalesOrderItemDetailsModel>();
    ItemEntity item = new ItemEntity();
    List<UnitModel> unitList = new List<UnitModel>();
    List<PurchaseTermsConditionsModel> termsConditionList = new List<PurchaseTermsConditionsModel>();
    List<PurchaseTermsConditionsModel> selectedtermsConditionList = new List<PurchaseTermsConditionsModel>();
    PurchaseTermsConditionsModel termsconditions = new PurchaseTermsConditionsModel();
    int editfieldsetareastatus = 0;
    string workOrderDate = "";
    string orderReceiveDate = "";
    string deliveryDate = "";
    string selectedunit;
    private string value { get; set; }
    string noOfPack;
    string terms_And_Conditions_No;
    decimal discount_amount_In_Parcent;
    decimal discount_amount_In_Taka;
    decimal advance_amount_In_Parcent;
    decimal advance_amount_In_Taka;
    decimal netAmount = 0;
    decimal totalNetAmount = 0;
    decimal deliveryAndOthers = 0;
    [Parameter]
    public string quotationNo { get; set; }
    int termsconditionId;


    //---------------------

    private List<PurchaseRequisitionEntity> Customers { get; set; }
    PurchaseRequisitionEntity purchaseRequisition = new PurchaseRequisitionEntity();
    SalesQuotationModel salesQuotation = new SalesQuotationModel();
    SalesItemDetailsModel salesItem = new SalesItemDetailsModel();
    SalesItemDetailsModel salesItemData = new SalesItemDetailsModel();
    List<SalesItemDetailsModel> salesItemList = new List<SalesItemDetailsModel>();
    List<SalesItemDetailsModel> salesItemModelList = new List<SalesItemDetailsModel>();

    List<SalesItemDetailsModel> itemList = new List<SalesItemDetailsModel>();
    List<PurchaseRequisitionDetailsEntity> requisitionDetailsEntities = new List<PurchaseRequisitionDetailsEntity>();
    PurchaseRequisitionDetailsEntity details = new PurchaseRequisitionDetailsEntity();
    PurchaseRequisitionOthersModel reqOthers = new PurchaseRequisitionOthersModel();
    List<PurchaseRequisitionOthersModel> reqOthersList = new List<PurchaseRequisitionOthersModel>();
    List<DepartmentEntity> departmentList = new List<DepartmentEntity>();
    List<ItemEntity> productList = new List<ItemEntity>();
    private ItemEntity SelectedArticle;
    List<OrderItemEntity> requestItemList = new List<OrderItemEntity>();
    List<OthersRequisitionItemsModel> othersItemList = new List<OthersRequisitionItemsModel>();
    OthersRequisitionItemsModel othersItem = new OthersRequisitionItemsModel();
    List<CustomerTypeModel> customerType = new List<CustomerTypeModel>();
    ACC_VOUCHER_ITEM_MODEL accVoucherItem = new ACC_VOUCHER_ITEM_MODEL();
    List<ACC_VOUCHER_ITEM_MODEL> accVoucherItemList = new List<ACC_VOUCHER_ITEM_MODEL>();
    ACC_COMPANY_VOUCHER_MODEL accCompanyVoucherModel = new ACC_COMPANY_VOUCHER_MODEL();
    List<LedgerModel> ledgerList = new List<LedgerModel>();
    List<PurchaseTermsConditionsModel> AlltermsConditionList = new List<PurchaseTermsConditionsModel>();

    string searchitem = "";
    OrderItemEntity orderitem;
    OrderItemEntity order_itm = null;
    BlazoredTextEditor itemDescription;
    string q = "";
    string r = "";
    string ait = "5.00";
    string vat = "7.5";
    string itemname;
    double requisitionTotal = 0;
    decimal salesSubTotal = 0;
    string unitName = "";
    string packSize = "";

    double othersSubTotal = 0;
    //DateTime request_date = System.DateTime.Now;
    string quotation_date;
    string validupto_date;
    int tablerow;
    string selected_department;
    int selected_department_Id;
    string cheque_Date;
    bool checked_cheque;
    decimal GrandTotal;
    decimal Total = 0;
    decimal LC_AMOUNT;
    decimal LC_COMMISSION;
    decimal INSURANCE;
    string Inwords;
    string othersItemName;
    string othersitemQuantity;
    string OthersitemRate;
    string reqNo;
    protected bool REQ_IS_DISABLE { get; set; }
    string salesOrderNo;
    string companyShortForm = "";
    int customerId = 0;
    string SelectedString = "";

    protected override async Task OnInitializedAsync()
    {
        tablerow = 1;
        //itemname = itemname + "_" + tablerow;
        await DepartmentList();
        await GetItemList();
        await GetCustomer();
        await GetCustomerType();
        await GetReqNo();
        await GetEmployee();
        await GetLedger();
        unitList = await Http.GetJsonAsync<List<UnitModel>>(Utility.BaseUrl + "api/Setup/GetUnitList");
        termsConditionList = await Http.GetJsonAsync<List<PurchaseTermsConditionsModel>>(Utility.BaseUrl + "api/Setup/GetSalesTermsConditionsForSalesOrder");
        await GetSalesItemDetails();
        AlltermsConditionList = termsConditionList;
        salesQuotation = await Http.GetJsonAsync<SalesQuotationModel>(Utility.BaseUrl + "api/Sales/GetQuotationByQutNo/" + quotationNo);
        TotalCalculation();

    }
    private async Task GetLedger()
    {
        ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");
    }
    private async Task GetSalesItemDetails()
    {
        salesItemList = await Http.GetJsonAsync<List<SalesItemDetailsModel>>(Utility.BaseUrl + "api/Sales/GetQuotationDetailsByQutNo/" + quotationNo);
        if (salesItemList.Count > 0)
        {
            foreach (var item in salesItemList)
            {
                salesItemData = new SalesItemDetailsModel();
                decimal total = item.UNIT_PRICE * Convert.ToDecimal(item.ORDER_QUANTITY);
                decimal AIT = (total * 5) / 100;
                decimal ait_in_Parcent = Convert.ToDecimal(String.Format("{0:0.00}", AIT));
                decimal unitPriceAndAit = total + ait_in_Parcent;
                decimal p = (unitPriceAndAit * Convert.ToDecimal(7.5)) / 100;
                decimal VAT_with_Price_and_AIT = Convert.ToDecimal(String.Format("{0:0.00}", p));
                //decimal tUnitPrice = total + ait_in_Parcent + p;
                decimal tUnitPrice = total + item.AIT + item.VAT;
                decimal totalUnitPrice = Convert.ToDecimal(String.Format("{0:0.00}", tUnitPrice));

                salesItemData.AMOUNT = Convert.ToDouble(total);
                salesItemData.AIT = item.AIT;//ait_in_Parcent;
                salesItemData.VAT = item.VAT; //VAT_with_Price_and_AIT;
                salesItemData.TOTAL_PRICE = totalUnitPrice;
                salesItemData.UOM = item.UOM;
                salesItemData.UNIT_PRICE = item.UNIT_PRICE;
                salesItemData.ORDER_QUANTITY = item.ORDER_QUANTITY;
                salesItemData.SERVICE_NAME = item.SERVICE_NAME;
                salesItemData.ITEM_DESCRIPTION = item.ITEM_DESCRIPTION;
                salesItemData.ITEM_ID = item.ITEM_ID;
                salesItemData.NUMBER_OF_PACK = item.NUMBER_OF_PACK;
                salesItemData.PACK_SIZE = item.PACK_SIZE;





                salesItemModelList.Add(salesItemData);
            }

        }
    }
    private async Task SearchCondition(ChangeEventArgs changeEvent)
    {
        string value = changeEvent.Value.ToString();
        if (value != "")
        { termsConditionList = await Http.GetJsonAsync<List<PurchaseTermsConditionsModel>>(Utility.BaseUrl + "api/Setup/GetSalesTermsConditionsBySearch/" + value); }
        else { await GetAllTermsCondition(); }


    }
    public async void DeleteTermsConditions(int Id)
    {
        var itemToRemove = selectedtermsConditionList.Single(r => r.SALES_TERMS_CONDITION_ID == Id);
        selectedtermsConditionList.Remove(itemToRemove);

        string termsId = Convert.ToString(Id);
        //terms_And_Conditions_No = terms_And_Conditions_No.Replace(termsId, string.Empty);
        var l = terms_And_Conditions_No.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();
        l.Remove(termsId);
        terms_And_Conditions_No = string.Join(",", l);


    }
    private async Task GetSelectedTerms()
    {
        int[] nums = Array.ConvertAll(terms_And_Conditions_No.Split(','), int.Parse);
        PurchaseTermsConditionsModel tcon = new PurchaseTermsConditionsModel();
        foreach (var item in nums)
        {
            tcon = new PurchaseTermsConditionsModel();
            tcon.PURCHASE_TERMS_CONDITION_ID = 0;
            tcon.SALES_TERMS_CONDITION_ID = AlltermsConditionList.Find(x => x.SALES_TERMS_CONDITION_ID == item).SALES_TERMS_CONDITION_ID;
            tcon.SL = 0;
            tcon.TERMS_AND_CONDITIONS = AlltermsConditionList.Find(x => x.SALES_TERMS_CONDITION_ID == item).TERMS_AND_CONDITIONS;


            if (!selectedtermsConditionList.Exists(x => x.SALES_TERMS_CONDITION_ID == item))
            {

                selectedtermsConditionList.Add(tcon);

            }
            else
            {
                selectedtermsConditionList.Where(w => w.SALES_TERMS_CONDITION_ID == item).ToList().ForEach(s => s.SALES_TERMS_CONDITION_ID = tcon.SALES_TERMS_CONDITION_ID);
                selectedtermsConditionList.Where(w => w.SALES_TERMS_CONDITION_ID == item).ToList().ForEach(s => s.TERMS_AND_CONDITIONS = tcon.TERMS_AND_CONDITIONS);
            }

        }

    }
    private async Task GetItemList()
    {
        productList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product");
    }
    private async Task GetCustomer()
    {
        customerList = await Http.GetJsonAsync<List<CustomerModel>>(Utility.BaseUrl + "api/Customer");
    }
    private async Task GetCustomerType()
    {
        customerType = await Http.GetJsonAsync<List<CustomerTypeModel>>(Utility.BaseUrl + "api/Customer/GetCustomerType");
    }
    private async Task GetEmployee()
    {
        employeeList = await Http.GetJsonAsync<List<EmployeeModel>>(Utility.BaseUrl + "api/Employee");
    }
    public async Task GetReqNo()
    {
        //var reqNo = await Http.GetJsonAsync<RequisitionNo>(Utility.BaseUrl + "api/Purchase/GetReqNo");
        reqNo = await Http.GetStringAsync(Utility.BaseUrl + "api/Purchase/GetReqNo");
        purchaseRequisition.REQUISITION_NO = Convert.ToString(reqNo);

        REQ_IS_DISABLE = true;
        StateHasChanged();
    }

    private async Task<IEnumerable<ItemEntity>> SearchArticles(string searchText)
    {
        searchitem = searchText;
        return await Task.FromResult(productList.Where(x => x.ITEM_NAME.ToLower().Contains(searchText.ToLower())));
    }
    private async Task DepartmentList()
    {
        departmentList = await Http.GetJsonAsync<List<DepartmentEntity>>(Utility.BaseUrl + "api/Department");

    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JSRuntime.InvokeVoidAsync("JsInteropDatepicker");
    //}
    private void Add()
    {
        tablerow = tablerow + 1;
        itemname = itemname + "_" + tablerow;
        StateHasChanged();
    }
    protected async Task AddItem()
    {
        if (IsValidation_Table_Item() != true)
        {
            int pId = 0;
            if (productList != null)
            {
                pId = productList.Find(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).ITEM_ID;
            }
            bool rowexists = salesItemList.Exists(x => x.ITEM_ID == pId);
            if (rowexists != true)
            {
                bool alreadyExists = productList.Any(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim());
                order_itm = new OrderItemEntity();
                salesItem = new SalesItemDetailsModel();
                salesItem.ITEM_ID = productList.Find(x => x.ITEM_NAME == itemname).ITEM_ID;
                salesItem.ITEM_NAME = itemname;
                salesItem.PACK_SIZE = packSize;
                salesItem.UOM = unitName;
                salesItem.NUMBER_OF_PACK = noOfPack;
                salesItem.ORDER_QUANTITY = Convert.ToDouble(q);
                salesItem.UNIT_PRICE = Convert.ToDecimal(r);
                salesItem.UOM = productList.Find(x => x.ITEM_NAME == itemname).UOM;
                salesItem.PACK_SIZE = productList.Find(x => x.ITEM_NAME == itemname).PACK_SIZE;
                if (ait != null && ait != "")
                { salesItem.AIT = Convert.ToDecimal(ait); }
                if (vat != null && vat != "")
                { salesItem.VAT = Convert.ToDecimal(vat); }
                salesItem.ITEM_DESCRIPTION = await this.itemDescription.GetHTML();

                //if (alreadyExists == true)
                //{
                //    order_itm.ITEM_ID = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).ITEM_ID;
                //    order_itm.PACK_SIZE = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).PACK_SIZE;
                //    order_itm.UOM = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).UOM;
                //}
                //else
                //{
                //    order_itm.ITEM_ID = await Http.GetJsonAsync<int>(Utility.BaseUrl + "api/Purchase/GetItemId/" + itemname);
                //}

                salesItem.TOTAL_PRICE = Convert.ToDecimal(salesItem.ORDER_QUANTITY) * Convert.ToDecimal(salesItem.UNIT_PRICE);
                salesSubTotal += salesItem.TOTAL_PRICE;
                salesItemModelList.Add(salesItem);
            }
            else
            {

                string des = await this.itemDescription.GetHTML();
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.ITEM_ID = pId);
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.ITEM_NAME = itemname);
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.ITEM_DESCRIPTION = des);
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.UOM = unitName);
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.PACK_SIZE = packSize);
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.NUMBER_OF_PACK = noOfPack);
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.UNIT_PRICE = Convert.ToDecimal(r));
                //salesItemList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.UOM = item.UNIT_ID);
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.ORDER_QUANTITY = Convert.ToDouble(q));
                //salesItemList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.TOTAL_PRICE = totalUnitPrice);
                //salesItemList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.AIT = ait_in_Parcent);
                //salesItemList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.VAT = VAT_with_Price_and_AIT);
                decimal total = Convert.ToDecimal(r) * Convert.ToDecimal(q);
                decimal _ait = (total * Convert.ToDecimal(ait)) / 100;
                decimal _aitAndTotal = total + _ait;
                decimal _vat = (_aitAndTotal * Convert.ToDecimal(vat)) / 100;
                decimal _totalPrice = total + _ait + _vat;
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.AIT = _ait);
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.VAT = _vat);
                salesItemModelList.Where(w => w.ITEM_ID == pId).ToList().ForEach(s => s.TOTAL_PRICE = _totalPrice);





                //voucherItemList = voucherItemList.Where(w => w.symbol == MyProperty).Select(s => { s.symbol=MyProperty; return s; }).ToList();
                //voucherItemList = voucherItemList.Where(w => w.particular == SelectedArticle.LEDGER_NAME).Select(s => { s.particular= SelectedArticle.LEDGER_NAME; return s; }).ToList();
            }


            //q = "";
            //r = "";
            //itemname = "";
            TotalCalculation();
            salesItem = new SalesItemDetailsModel();
            itemname = "";
            q = "";
            r = "";
            ait = "5.00";
            vat = "7.5";
            unitName = "";
            packSize = "";
            noOfPack = "";

        }


    }
    public List<string> checkedOtherTermsIds { get; set; } = new List<string>();
    void OtherTermsClicked(string termsConditionids, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!checkedOtherTermsIds.Contains(termsConditionids))
            {
                checkedOtherTermsIds.Add(termsConditionids);
                termsconditionId = Convert.ToInt32(termsConditionids);
            }
        }
        else
        {
            if (checkedOtherTermsIds.Contains(termsConditionids))
            {
                checkedOtherTermsIds.Remove(termsConditionids);
            }
        }
        terms_And_Conditions_No = String.Join(",", checkedOtherTermsIds);
    }
    public async Task SaveTermsConditions()
    {

        if (IsValidation_TermsConditions() != true)
        {
            try
            {
                termsconditions.POSITION = 2;
                var data = await Http.PostJsonAsync<PurchaseTermsConditionsModel>(Utility.BaseUrl + "api/Setup/AddSalesTermsConditions", termsconditions);
                toastService.ShowSuccess("Insert Successfully!!!");
            }
            catch (Exception ex)
            {

            }


        }
        termsConditionList = await Http.GetJsonAsync<List<PurchaseTermsConditionsModel>>(Utility.BaseUrl + "api/Setup/GetSalesTermsConditionsForSalesOrder");
        AlltermsConditionList = termsConditionList;
        termsconditions.TERMS_AND_CONDITIONS = "";
    }
    public async Task EditTermsCondition()
    {

        if (IsValidation_TermsConditions() != true)
        {
            try
            {
                termsconditions.SALES_TERMS_CONDITION_ID = termsconditionId;
                var data = await Http.PutJsonAsync<PurchaseTermsConditionsModel>(Utility.BaseUrl + "api/Setup/UpdateSalesTermsConditions", termsconditions);

            }
            catch (Exception ex)
            {

            }


        }
        await GetAllTermsCondition();
        termsconditions.TERMS_AND_CONDITIONS = "";
        editfieldsetareastatus = 0;
    }
    public async void EditTermsConditionItem()
    {
        if (termsconditionId != 0)
        {
            editfieldsetareastatus = 1;
            termsconditions.TERMS_AND_CONDITIONS = termsConditionList.Find(x => x.SALES_TERMS_CONDITION_ID == termsconditionId).TERMS_AND_CONDITIONS;
        }
    }
    private async Task DeleteTermsCondition()
    {
        if (termsconditionId != 0)
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
                return;

            await Http.DeleteAsync(Utility.BaseUrl + "api/Setup/DeleteTermsConditions/" + termsconditionId);
            await GetAllTermsCondition();
        }


    }
    private async Task GetAllTermsCondition()
    {
        termsConditionList = await Http.GetJsonAsync<List<PurchaseTermsConditionsModel>>(Utility.BaseUrl + "api/Setup/GetSalesTermsConditionsForSalesOrder");
    }
    private bool IsValidation_TermsConditions()
    {
        bool flag = false;
        if (termsconditions.TERMS_AND_CONDITIONS == "" || termsconditions.TERMS_AND_CONDITIONS == string.Empty || termsconditions.TERMS_AND_CONDITIONS == null)
        {
            toastService.ShowWarning("Terms & Condition Field Cannot be empty!");
            flag = true;
        }

        return flag;
    }
    protected async Task AddOthersItem()
    {
        othersItem = new OthersRequisitionItemsModel();
        othersItem.OTHERS_ITEM = othersItemName;
        if (othersitemQuantity != null && othersitemQuantity != "")
        { othersItem.QUANTITY = Convert.ToDouble(othersitemQuantity); }
        else { othersItem.QUANTITY = 0; }

        othersItem.RATE = Convert.ToDouble(OthersitemRate);
        if (othersitemQuantity != null && othersitemQuantity != "" && othersitemQuantity != "0") { othersItem.TOTAL = Convert.ToDouble(othersitemQuantity) * Convert.ToDouble(OthersitemRate); }
        else { othersItem.TOTAL = Convert.ToDouble(OthersitemRate); }

        othersSubTotal += othersItem.TOTAL;
        othersItemList.Add(othersItem);
        othersItemName = "";
        othersitemQuantity = "";
        OthersitemRate = "";
        TotalCalculation();
    }
    public async void DeleteOthersItem(string item)
    {
        var itemToRemove = othersItemList.Single(r => r.OTHERS_ITEM == item);
        othersItemList.Remove(itemToRemove);
        if (othersItemList.Count > 0)
        {
            othersSubTotal = 0;
            foreach (var _oitem in othersItemList)
            {
                othersSubTotal += _oitem.TOTAL;
            }
        }
        else { othersSubTotal = 0; }

        TotalCalculation();
        StateHasChanged();
    }
    //--------------
    public async void DeleteItem(string item)
    {
        var itemToRemove = salesItemModelList.Single(r => r.ITEM_NAME == item);
        salesItemModelList.Remove(itemToRemove);
        if (salesItemList.Count > 0)
        {
            salesSubTotal = 0;
            foreach (var _oitem in salesItemList)
            {
                salesSubTotal += _oitem.TOTAL_PRICE;
            }
        }
        else { salesSubTotal = 0; }

        TotalCalculation();
        StateHasChanged();
    }
    private async void UnitClicked(ChangeEventArgs args)
    {
        salesItemDetails.UOM = args.Value.ToString();

    }
    public async void EditItem(string item)
    {
        itemname = salesItemModelList.Single(r => r.ITEM_NAME == item).ITEM_NAME;
        q = Convert.ToString(salesItemModelList.Single(r => r.ITEM_NAME == item).ORDER_QUANTITY);
        r = Convert.ToString(salesItemModelList.Single(r => r.ITEM_NAME == item).UNIT_PRICE);
        unitName = Convert.ToString(salesItemModelList.Single(r => r.ITEM_NAME == item).UOM);
        packSize = Convert.ToString(salesItemModelList.Single(r => r.ITEM_NAME == item).PACK_SIZE);
        noOfPack = Convert.ToString(salesItemModelList.Single(r => r.ITEM_NAME == item).NUMBER_OF_PACK);
        //ait = Convert.ToString(salesItemList.Single(r => r.ITEM_NAME == item).AIT);
        //vat = Convert.ToString(salesItemList.Single(r => r.ITEM_NAME == item).VAT);
        itemDescription.LoadHTMLContent(salesItemModelList.Single(r => r.ITEM_NAME == item).ITEM_DESCRIPTION);
        //var itemToRemove = salesItemList.Single(r => r.ITEM_NAME == item);
        //salesItemList.Remove(itemToRemove);
        if (requestItemList.Count > 0)
        {
            salesSubTotal = 0;
            foreach (var _oitem in requestItemList)
            {
                salesSubTotal += Convert.ToDecimal(_oitem.Total);
            }
        }
        else { salesSubTotal = 0; }
        TotalCalculation();
        StateHasChanged();
    }
    //
    public async void EditOthersItem(string item)
    {
        othersItemName = othersItemList.Single(r => r.OTHERS_ITEM == item).OTHERS_ITEM;
        othersitemQuantity = Convert.ToString(othersItemList.Single(r => r.OTHERS_ITEM == item).QUANTITY);
        OthersitemRate = Convert.ToString(othersItemList.Single(r => r.OTHERS_ITEM == item).RATE);
        var itemToRemove = othersItemList.Single(r => r.OTHERS_ITEM == item);
        othersItemList.Remove(itemToRemove);
        if (othersItemList.Count > 0)
        {
            othersSubTotal = 0;
            foreach (var _oitem in othersItemList)
            {
                othersSubTotal += _oitem.TOTAL;
            }
        }
        else { othersSubTotal = 0; }
        TotalCalculation();
        StateHasChanged();
    }

    public async Task GetSalesOrderNo()
    {
        string prefix = "";
        prefix = companyShortForm;
        //string C = salesQuotation.CUSTOMER_NAME;
        //var firstChars = C.Split(' ').Select(s => s[0]);
        //foreach(var p in firstChars)
        //{
        //    prefix += p;
        //}
        salesOrderNo = await Http.GetStringAsync(Utility.BaseUrl + "api/Sales/GetSalesOrderNo");
        salesOrder.SALES_ORDER_NO = salesOrderNo;
    }

    //---------Sales Save function---

    public async Task SaveSalesOrder()
    {

        if (IsValidation() != true)
        {
            try
            {
                //---Sales Order

                salesOrder.DELIVERY_DATE = deliveryDate;
                salesOrder.PO_WO_DATE = workOrderDate;
                salesOrder.SALES_ORDER_RECEIVED_DATE = orderReceiveDate;
                //salesOrder.DELIVERY_DATE = _deliveryDate; //Convert.ToDateTime(Convert.ToDateTime(deliveryDate).Year+"-"+ Convert.ToDateTime(deliveryDate).Month+"-"+ Convert.ToDateTime(deliveryDate).Day);
                salesOrder.GRAND_TOTAL = Convert.ToDouble(GrandTotal);
                salesOrder.TERMS_AND_CONDITION = terms_And_Conditions_No;
                salesOrder.REG_BY = await sessionStorage.GetItemAsync<string>("session_employeeLoginId");
                salesOrder.QUOTATION_NO = quotationNo;
                salesOrder.CUSTOMER_ID = salesQuotation.CUSTOMER_ID;
                salesOrder.DELIVERY_NOTE_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Sales/GetDeliveryNo");
                await GetSalesOrderNo();

                //----------Account Master Data
                //string d = deliveryDate.Substring(0, 2);
                //string m = deliveryDate.Substring(3, 2);
                //string y = deliveryDate.Substring(6, 4);
                //DateTime dd = Convert.ToDateTime(y + "-" + m + "-" + d);
                //+ "-" + Convert.ToDateTime(d).Month + "-" + Convert.ToDateTime(d).Day); ;
                //DateTime dtt = Convert.ToDateTime(dd);
                accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 3);
                //accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(dd);
                //accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
                accCompanyVoucherModel.LEDGER_NAME = customerList.Find(x => x.CUSTOMER_ID == salesOrder.CUSTOMER_ID).CUSTOMER_NAME;
                accCompanyVoucherModel.COMP_VOUCHER_AMOUNT = Convert.ToDecimal(GrandTotal);
                accCompanyVoucherModel.COMP_VOUCHER_ADD_AMOUNT = 0;
                accCompanyVoucherModel.COMP_VOUCHER_LESS_AMOUNT = 0;
                accCompanyVoucherModel.COMP_VOUCHER_NET_AMOUNT = Convert.ToDecimal(GrandTotal);
                accCompanyVoucherModel.COMP_VOUCHER_PROCESS_AMOUNT = 0;
                accCompanyVoucherModel.COMP_VOUCHER_NARRATION = "";
                accCompanyVoucherModel.COMP_VOUCHER_TYPE = 3;
                accCompanyVoucherModel.ENTRYBY = await sessionStorage.GetItemAsync<string>("session_employeeName");
                accCompanyVoucherModel.UPDATEBY = await sessionStorage.GetItemAsync<string>("session_employeeName");
                //-------------------------------

                //-----Acc Voucher Details

                // Create a List of objects
                List<ACC_VOUCHER_MODEL> voucherItem = new List<ACC_VOUCHER_MODEL>
            {
                        new ACC_VOUCHER_MODEL {
                            COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                              ,VOUCHER_REF_KEY=""
                              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                              ,COMP_VOUCHER_TYPE=3
                              ,LEDGER_NAME=customerList.Find(x => x.CUSTOMER_ID == salesOrder.CUSTOMER_ID).CUSTOMER_NAME
                              ,VOUCHER_DEBIT_AMOUNT=Convert.ToDecimal(GrandTotal)
                              ,VOUCHER_CREDIT_AMOUNT=0
                              ,VOUCHER_ADD_AMOUNT=0
                              ,VOUCHER_LESS_AMOUNT=0
                              ,VOUCHER_TOBY="Dr"
                              ,VOUCHER_FC_DEBIT_AMOUNT=0
                              ,VOUCHER_FC_CREDIT_AMOUNT = 0
                        },
                        new ACC_VOUCHER_MODEL {
                              COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO
                              ,VOUCHER_REF_KEY=""
                              ,BRANCH_ID=accCompanyVoucherModel.BRANCH_ID
                              ,COMP_VOUCHER_DATE=accCompanyVoucherModel.COMP_VOUCHER_DATE
                              ,COMP_VOUCHER_TYPE=3
                              ,LEDGER_NAME=SelectedString
                              ,VOUCHER_DEBIT_AMOUNT=0
                              ,VOUCHER_CREDIT_AMOUNT=Convert.ToDecimal(GrandTotal)
                              ,VOUCHER_ADD_AMOUNT=0
                              ,VOUCHER_LESS_AMOUNT=0
                              ,VOUCHER_TOBY="Cr"
                              ,VOUCHER_FC_DEBIT_AMOUNT=0
                              ,VOUCHER_FC_CREDIT_AMOUNT = 0

                        }
                    };
                accCompanyVoucherModel.accVoucherList = voucherItem;
                salesOrder.acc_com_VoucherModel = accCompanyVoucherModel;
                salesOrder.acc_Voucher_Model = voucherItem;

                //----Sales Details

                foreach (var item in salesItemModelList)
                {
                    accVoucherItem = new ACC_VOUCHER_ITEM_MODEL();
                    accVoucherItem.BRANCH_ID = accCompanyVoucherModel.BRANCH_ID;
                    accVoucherItem.COMP_REF_NO = accCompanyVoucherModel.COMP_REF_NO;
                    accVoucherItem.COMP_VOUCHER_TYPE = accCompanyVoucherModel.COMP_VOUCHER_TYPE;
                    accVoucherItem.COMP_VOUCHER_DATE = accCompanyVoucherModel.COMP_VOUCHER_DATE;
                    //accVoucherItem.STOCKITEM_NAME = productList.Find(x => x.ITEM_ID == item.ITEM_ID).ITEM_NAME;
                    accVoucherItem.BILL_QUANTITY = Convert.ToDecimal(item.SALES_QUANTITY);
                    accVoucherItem.BILL_RATE = Convert.ToDecimal(item.UNIT_PRICE);
                    //accVoucherItem.GODOWNS_NAME = salesOrder.;
                    accVoucherItem.BILL_UOM = item.UOM;
                    accVoucherItemList.Add(accVoucherItem);
                }
                salesOrder.acc_VoucherItemList = accVoucherItemList;
                foreach (var item in salesItemModelList)
                {
                    salesItem = new SalesItemDetailsModel();
                    //salesItem.SALES_ID = id;
                    salesItem.PO_WO_NUMBER = salesOrder.PO_WO_NUMBER;
                    salesItem.SALES_ORDER_NO = salesOrder.SALES_ORDER_NO;
                    salesItem.ITEM_ID = item.ITEM_ID;
                    salesItem.ITEM_DESCRIPTION = item.ITEM_DESCRIPTION;
                    salesItem.ORDER_QUANTITY = item.ORDER_QUANTITY;
                    salesItem.SERVICE_NAME = item.SERVICE_NAME;
                    salesItem.UOM = item.UOM;
                    salesItem.PACK_SIZE = item.PACK_SIZE;
                    salesItem.UNIT_PRICE = item.UNIT_PRICE;
                    salesItem.AIT = item.AIT;
                    salesItem.VAT = item.VAT;
                    salesItem.TOTAL_PRICE = Convert.ToDecimal(item.ORDER_QUANTITY) * item.UNIT_PRICE;

                    itemList.Add(salesItem);
                }
                salesOrder.sOrderDetailsList = itemList;
                //var data = await Http.PostJsonAsync<SalesOrderModel>(Utility.BaseUrl + "api/Sales/AddSalesOrder/", salesOrder);

                toastService.ShowSuccess("Order Place Successfully!!!");
            }
            catch (Exception ex)
            {
                toastService.ShowError("Not Save ! " + ex.Message);
            }

        }
    }
    //------------

    public async Task SaveSalesOrder_bkp()
    {

        if (IsValidation() != true)
        {
            try
            {
                //string d = workOrderDate.Replace("/", "-");
                //salesOrder.PO_WO_DATE = Convert.ToDateTime(d);
                //string dd = deliveryDate.Replace("/", "-");
                //DateTime? _woDate = null;
                //DateFunc(dt);
                //dt = DateTime.Now;
                //DateTime _woDate = new DateTime();
                //if (workOrderDate != "") { workOrderDate = DateTime.ParseExact(workOrderDate, @"d/M/yyyy", System.Globalization.CultureInfo.InvariantCulture); }

                //DateTime _deliveryDate = DateTime.ParseExact(deliveryDate, @"d/M/yyyy", System.Globalization.CultureInfo.InvariantCulture);
                //DateTime deli = Convert.ToDateTime(Convert.ToDateTime(deliveryDate).Year + "-" + Convert.ToDateTime(deliveryDate).Month + "-" + Convert.ToDateTime(deliveryDate).Day);
                salesOrder.DELIVERY_DATE = deliveryDate;
                salesOrder.PO_WO_DATE = workOrderDate;
                salesOrder.SALES_ORDER_RECEIVED_DATE = orderReceiveDate;
                //salesOrder.DELIVERY_DATE = _deliveryDate; //Convert.ToDateTime(Convert.ToDateTime(deliveryDate).Year+"-"+ Convert.ToDateTime(deliveryDate).Month+"-"+ Convert.ToDateTime(deliveryDate).Day);
                salesOrder.GRAND_TOTAL = Convert.ToDouble(GrandTotal);
                salesOrder.TERMS_AND_CONDITION = terms_And_Conditions_No;
                salesOrder.REG_BY = await sessionStorage.GetItemAsync<string>("session_employeeLoginId");
                salesOrder.QUOTATION_NO = quotationNo;
                salesOrder.CUSTOMER_ID = salesQuotation.CUSTOMER_ID;
                salesOrder.DELIVERY_NOTE_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Sales/GetDeliveryNo");
                await GetSalesOrderNo();


                var id = await Http.GetJsonAsync<int>(Utility.BaseUrl + "api/Sales/GetSalesOrderId");
                foreach (var item in salesItemModelList)
                {
                    salesItem = new SalesItemDetailsModel();
                    salesItem.SALES_ID = id;
                    salesItem.PO_WO_NUMBER = salesOrder.PO_WO_NUMBER;
                    salesItem.SALES_ORDER_NO = salesOrder.SALES_ORDER_NO;
                    salesItem.ITEM_ID = item.ITEM_ID;
                    salesItem.ITEM_DESCRIPTION = item.ITEM_DESCRIPTION;
                    salesItem.ORDER_QUANTITY = item.ORDER_QUANTITY;
                    salesItem.UOM = item.UOM;
                    salesItem.PACK_SIZE = item.PACK_SIZE;
                    salesItem.UNIT_PRICE = item.UNIT_PRICE;
                    salesItem.AIT = item.AIT;
                    salesItem.VAT = item.VAT;
                    salesItem.TOTAL_PRICE = Convert.ToDecimal(item.ORDER_QUANTITY) * item.UNIT_PRICE;

                    itemList.Add(salesItem);
                }
                //var salesitem_details = await Http.PostJsonAsync<List<SalesItemDetailsModel>>(Utility.BaseUrl + "api/Sales/AddSalesOrderDetails", itemList);
                var data = await Http.PostJsonAsync<SalesOrderModel>(Utility.BaseUrl + "api/Sales/AddSalesOrder/", salesOrder);

                toastService.ShowSuccess("Insert Successfully!!!");
                salesItem = new SalesItemDetailsModel();

            }
            catch (Exception ex)
            {
                toastService.ShowWarning("Not Save" + ex.Message);
            }

        }
    }
    private bool IsValidation_Table_Item()
    {
        bool flag = false;
        if (itemname == "" || itemname == string.Empty || itemname == null)
        {
            toastService.ShowWarning("Please Select Item!");
            flag = true;
        }
        else if (q == "" || q == string.Empty || q == null)
        {
            toastService.ShowWarning("Quantity Field is Empty!");
            flag = true;
        }
        else if (r == "" || r == string.Empty || r == null)
        {
            toastService.ShowWarning("Rate Field is Empty!");
            flag = true;
        }
        return flag;
    }
    //private async void ItemSelected(ChangeEventArgs changeEvent)
    //{
    //    item = await Http.GetJsonAsync<ItemEntity>(Utility.BaseUrl + "api/Product/GetItemByItemName/" + itemname);
    //    selectedunit = item.UNIT_NAME;
    //}

    private async void ItemSelected(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        value = (string)args.Value;
        itemname = value;
        item = await Http.GetJsonAsync<ItemEntity>(Utility.BaseUrl + "api/Product/GetItemByItemName/" + value);
        unitName = item.UNIT_NAME;
        StateHasChanged();
    }

    private bool IsValidation()
    {
        bool flag = false;
        //if (salesOrder.PO_WO_NUMBER == "" || salesOrder.PO_WO_NUMBER == string.Empty || salesOrder.PO_WO_NUMBER == null)
        //{
        //    toastService.ShowWarning("PO/WO No. cannot be empty!");
        //    flag = true;
        //}


        return flag;
    }
    //private void ClearData()
    //{
    //    purchaseRequisition.REQUISITION_NO = "";
    //    purchaseRequisition.REQUESTED_BY = "";
    //    purchaseRequisition.REQUEST_DATE = System.DateTime.Now;
    //    purchaseRequisition.REQUIRED_DATE = System.DateTime.Now;
    //    purchaseRequisition.REQUEST_FOR = "";
    //    purchaseRequisition.REQUISITION_PURPOSE = "";
    //    requestItemList = null;

    //}
    private async Task Requesst_Receive_Dept_Click(ChangeEventArgs changeEventArgs)
    {

        selected_department_Id = Convert.ToInt32(changeEventArgs.Value);
        selected_department = departmentList.Find(x => x.DEPARTMENT_ID == selected_department_Id).DEPARTMENT_NAME;
        StateHasChanged();
    }
    private async Task LC_Amount_Clicked(ChangeEventArgs lcAmount)
    {
        if (lcAmount.Value.ToString() != "0" && lcAmount.Value.ToString() != null && lcAmount.Value.ToString() != "")
        {
            LC_AMOUNT = Convert.ToDecimal(lcAmount.Value.ToString());
            TotalCalculation();
        }
        else
        {
            LC_AMOUNT = 0;
            TotalCalculation();
        }


    }
    private async Task LC_Commission_Clicked(ChangeEventArgs lcCommission)
    {
        if (lcCommission.Value.ToString() != "0" && lcCommission.Value.ToString() != null && lcCommission.Value.ToString() != "")
        {
            LC_COMMISSION = Convert.ToDecimal(lcCommission.Value.ToString());
            TotalCalculation();
        }
        else
        {
            LC_COMMISSION = 0;
            TotalCalculation();
        }

    }
    private async Task Insurance_Clicked(ChangeEventArgs Insurance)
    {
        if (Insurance.Value.ToString() != "0" && Insurance != null && Insurance.Value.ToString() != "")
        {
            INSURANCE = Convert.ToDecimal(Insurance.Value.ToString());
            TotalCalculation();
        }
        else
        {
            INSURANCE = 0;
            TotalCalculation();
        }

    }

    async void PaymentMode_ChequeClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            checked_cheque = true;
            purchaseRequisition.PAYMENT_MODE = "Cheque";
        }
        else
        {
            checked_cheque = false;
            cheque_Date = "";
            purchaseRequisition.PAYMENT_MODE = "";
        }
        StateHasChanged();
    }
    //PaymentMode_PayorderClicked(
    //PaymentMode_TTClicked( event
    //PaymentMode_InAdvanceClicked
    //PaymentMode_OthersClicked(e
    async void PaymentMode_CashClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "Cash"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }

    }
    async void PaymentMode_PayorderClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "Payorder"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void PaymentMode_TTClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "TT"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void PaymentMode_InAdvanceClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "InAdvance"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void PaymentMode_OthersClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "Others"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void Customer_Clicked(ChangeEventArgs eventArgs)
    {
        salesOrder.CUSTOMER_ID = Convert.ToInt32(eventArgs.Value.ToString());
        await GetCustomerData(salesQuotation.CUSTOMER_ID);
    }
    private async Task GetCustomerData(int customerId)
    {
        customer = await Http.GetJsonAsync<CustomerModel>(Utility.BaseUrl + "api/Customer/GetCustomerData/" + customerId);
        StateHasChanged();
    }
    private async Task discount_amount_In_Parcent_Clicked(ChangeEventArgs change)
    {
        if (Total != 0 && change.Value != "")
        { discount_amount_In_Parcent = (Total * Convert.ToDecimal(change.Value)) / 100; }
        else { discount_amount_In_Parcent = 0; }
        TotalCalculation();
    }
    private async Task discount_amount_In_TK_Clicked(ChangeEventArgs change)
    {
        if (Total != 0 && change.Value != "") { discount_amount_In_Taka = Convert.ToDecimal(change.Value); }
        else { discount_amount_In_Taka = 0; }
        TotalCalculation();
    }
    private async Task advance_amount_In_Parcent_Clicked(ChangeEventArgs change)
    {
        if (Total != 0 && change.Value != "") { advance_amount_In_Parcent = (Total * Convert.ToDecimal(change.Value)) / 100; }
        else { advance_amount_In_Parcent = 0; }
        TotalCalculation();
    }
    private async Task advance_amount_In_TK_Clicked(ChangeEventArgs change)
    {
        if (Total != 0 && change.Value != "") { advance_amount_In_Taka = Convert.ToDecimal(change.Value); }
        else { advance_amount_In_Taka = 0; }
        TotalCalculation();
    }
    private async Task delivery_And_Others_Clicked(ChangeEventArgs change)
    {
        if (change.Value != "") { deliveryAndOthers = Convert.ToDecimal(change.Value); }
        else { deliveryAndOthers = 0; }
        TotalCalculation();
    }

    private void TotalCalculation()
    {
        //if (requisitionTotal != 0 || requisitionTotal != null)
        //{ GrandTotal = Convert.ToDecimal(requisitionTotal); }
        //if(LC_AMOUNT!=0||LC_AMOUNT!=null)
        //{ GrandTotal= }
        salesSubTotal = salesItemModelList.Sum(x => Convert.ToDecimal(x.TOTAL_PRICE));
        Total = Convert.ToDecimal(salesSubTotal) + LC_AMOUNT + LC_COMMISSION + INSURANCE + Convert.ToDecimal(othersSubTotal);
        netAmount = Total;
        totalNetAmount = Total;
        GrandTotal = Total;
        if (discount_amount_In_Parcent != 0)
        {
            netAmount = Total - discount_amount_In_Parcent;
            totalNetAmount = netAmount;
            GrandTotal = netAmount;
        }
        if (discount_amount_In_Taka != 0)
        {
            netAmount = Total - discount_amount_In_Taka;
            totalNetAmount = netAmount;
            GrandTotal = netAmount;
        }
        if (advance_amount_In_Parcent != 0)
        {
            //decimal sum = advance_amount_In_Parcent + discount_amount_In_Parcent + discount_amount_In_Taka;
            totalNetAmount = Total - (advance_amount_In_Parcent + discount_amount_In_Parcent + discount_amount_In_Taka);
            GrandTotal = totalNetAmount;
        }
        if (advance_amount_In_Taka != 0)
        {
            totalNetAmount = Total - (advance_amount_In_Taka + discount_amount_In_Parcent + discount_amount_In_Taka);
            GrandTotal = totalNetAmount;
        }
        if (deliveryAndOthers != 0)
        {
            GrandTotal = totalNetAmount + deliveryAndOthers;
        }


        //GrandTotal = (Convert.ToDecimal(salesSubTotal) + LC_AMOUNT + LC_COMMISSION + INSURANCE + Convert.ToDecimal(othersSubTotal))- discount_amount_In_Parcent;
        //GrandTotal = (Convert.ToDecimal(salesSubTotal) + LC_AMOUNT + LC_COMMISSION + INSURANCE + Convert.ToDecimal(othersSubTotal)) - discount_amount_In_Taka;
        double inwordValue = Convert.ToDouble(GrandTotal);
        Inwords = NumberToWords.ConvertAmount(inwordValue);
    }
    private Task OnValueChanged(int value)
    {
        // Assign the selected value to the Model
        purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID = Convert.ToInt32(value);
        return Task.CompletedTask;
    }
    private async Task ReceiveDepartmentClicked(ChangeEventArgs changeEvent)
    {
        int changeId = Convert.ToInt32(changeEvent.Value.ToString());
        purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID = changeId;
        string dName = departmentList.Find(x => x.DEPARTMENT_ID == changeId).DEPARTMENT_NAME;
        if (dName == "Accounts & Finance")
        {
            reqNo = reqNo + "AF";
            purchaseRequisition.REQUISITION_NO = reqNo;
        }
    }
    public async Task AddCustomer()
    {

        if (IsCustomerValidation() != true)
        {
            try
            {
                var data = await Http.PostJsonAsync<CustomerModel>(Utility.BaseUrl + "api/Customer", customer);

                toastService.ShowSuccess("Requisition Generate Successfully!!!");
                await GetCustomer();
                customer = new CustomerModel();

            }
            catch (Exception ex)
            {

            }

        }
    }
    private bool IsCustomerValidation()
    {
        bool flag = false;
        if (customer.CUSTOMER_NAME == "" || customer.CUSTOMER_NAME == string.Empty || customer.CUSTOMER_NAME == null)
        {
            toastService.ShowWarning("Customer Name cannot be empty!");
            flag = true;
            flag = true;
        }


        return flag;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
